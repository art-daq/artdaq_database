Start testing: Sep 16 14:14 CDT
----------------------------------------------------------
1/137 Testing: JSONDocument_replaceChild_001_t
1/137 Test: JSONDocument_replaceChild_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/JSONDocument_replaceChild_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/test001.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/JSONDocument_replaceChild_001_t.d
"JSONDocument_replaceChild_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:01.449219  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:01.451535  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.451552  1  5 findChild() args  path=<operation>
09-16 14:14:01.457965  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.462092  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.462151  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:14:01.462379  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:14:01.462394  1  5 findChild() Find succeeded.
09-16 14:14:01.466089  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.466107  1  5 findChild() args  path=<begin-state>
09-16 14:14:01.467133  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.467623  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.467650  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:01.467814  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:01.467830  1  5 findChild() Find succeeded.
09-16 14:14:01.471437  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.471460  1  5 findChild() args  path=<delta>
09-16 14:14:01.471963  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.472237  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.472256  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:01.472372  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:01.472383  1  5 findChild() Find succeeded.
09-16 14:14:01.473877  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.473893  1  5 findChild() args  path=<path>
09-16 14:14:01.474442  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.474807  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.474828  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:01.474932  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:01.474941  1  5 findChild() Find succeeded.
09-16 14:14:01.476303  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.476315  1  5 findChild() args  path=<end-state>
09-16 14:14:01.476868  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.477171  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.477190  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:01.477312  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:01.477322  1  5 findChild() Find succeeded.
09-16 14:14:01.479027  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.479038  1  5 findChild() args  path=<returned-value>
09-16 14:14:01.479533  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.479809  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.479827  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:01.479949  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:01.479959  1  5 findChild() Find succeeded.
09-16 14:14:01.481401  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.481412  1  5 findChild() args  path=<must-succeed>
09-16 14:14:01.481901  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.482177  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.482242  1  5 findChild() found child value=int(1)
09-16 14:14:01.482360  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:01.482370  1  5 findChild() Find succeeded.
09-16 14:14:01.483640  1  4 replaceChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : {
                "c" : "2", 
                "d" : [
                    2, 
                    5, 
                    6
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:01.483656  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:01.483661  1  4 replaceChild() args  path=<document.data>
09-16 14:14:01.487493  1  4 replaceChild() new child value=object(...)
09-16 14:14:01.487513  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:01.490283  1  4 replaceChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"d" : [
2,
5,
6
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.490301  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:01.491393  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"d" : [
2,
5,
6
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:14:01.491477  1  4 replaceChild() found child value=object(...)
09-16 14:14:01.493533  1  4 replaceChild() resultDocument=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.493754  1  4 replaceChild() replacedChild=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.493766  1  4 replaceChild() Replace succeeded.
09-16 14:14:01.493838  1 10 operator==() begin _json_buffer=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.493850  1 10 operator==() args  other.__json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:01.499513  1 10 matches() JSON buffers are equal.
09-16 14:14:01.499558  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : {
        "c" : "2", 
        "d" : [
            2, 
            5, 
            6
        ]
    }
}>
09-16 14:14:01.499567  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : {
        "c" : "2", 
        "d" : [
            2, 
            5, 
            6
        ]
    }
}>
Running test:<replaceChild>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_001_t" end time: Sep 16 14:14 CDT
"JSONDocument_replaceChild_001_t" time elapsed: 00:00:00
----------------------------------------------------------

2/137 Testing: JSONDocument_replaceChild_002_t
2/137 Test: JSONDocument_replaceChild_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/JSONDocument_replaceChild_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/test002.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/JSONDocument_replaceChild_002_t.d
"JSONDocument_replaceChild_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:01.545775  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:01.547791  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.547810  1  5 findChild() args  path=<operation>
09-16 14:14:01.554587  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.560050  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.560118  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:14:01.560373  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:14:01.560390  1  5 findChild() Find succeeded.
09-16 14:14:01.564431  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.564449  1  5 findChild() args  path=<begin-state>
09-16 14:14:01.565175  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.565507  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.565528  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:01.565657  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:01.565668  1  5 findChild() Find succeeded.
09-16 14:14:01.567414  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.567430  1  5 findChild() args  path=<delta>
09-16 14:14:01.568066  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.568413  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.568435  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:01.568559  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:01.568570  1  5 findChild() Find succeeded.
09-16 14:14:01.570109  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.570120  1  5 findChild() args  path=<path>
09-16 14:14:01.570639  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.570913  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.570931  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:01.571039  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:01.571049  1  5 findChild() Find succeeded.
09-16 14:14:01.572424  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.572435  1  5 findChild() args  path=<end-state>
09-16 14:14:01.572923  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.573195  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.573213  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:01.573322  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:01.573332  1  5 findChild() Find succeeded.
09-16 14:14:01.574864  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.574875  1  5 findChild() args  path=<returned-value>
09-16 14:14:01.575362  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.575641  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.575660  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:01.575769  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:01.575780  1  5 findChild() Find succeeded.
09-16 14:14:01.577260  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.577272  1  5 findChild() args  path=<must-succeed>
09-16 14:14:01.577768  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.578040  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.578098  1  5 findChild() found child value=int(1)
09-16 14:14:01.578214  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:01.578225  1  5 findChild() Find succeeded.
09-16 14:14:01.579567  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1
        }, 
        "data1" : "aa"
    }
}>
09-16 14:14:01.579580  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "aa" : 2
    }
}>
09-16 14:14:01.579586  1  4 replaceChild() args  path=<document.data>
09-16 14:14:01.580067  1  4 replaceChild() new child value=object(...)
09-16 14:14:01.580087  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:01.580283  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"a" : 1
},
"data1" : "aa"
}
}>
09-16 14:14:01.580297  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:01.580451  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1
},
"data1" : "aa"
}>
09-16 14:14:01.580524  1  4 replaceChild() found child value=object(...)
09-16 14:14:01.580704  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:14:01.580804  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:14:01.580815  1  4 replaceChild() Replace succeeded.
09-16 14:14:01.580856  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:14:01.580866  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 2
        }, 
        "data1" : "aa"
    }
}>
09-16 14:14:01.581566  1 10 matches() JSON buffers are equal.
09-16 14:14:01.581585  1 10 operator==() begin _json_buffer=<{
    "a" : 1
}>
09-16 14:14:01.581591  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1
}>
Running test:<replaceChild>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_002_t" end time: Sep 16 14:14 CDT
"JSONDocument_replaceChild_002_t" time elapsed: 00:00:00
----------------------------------------------------------

3/137 Testing: JSONDocument_replaceChild_003_t
3/137 Test: JSONDocument_replaceChild_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/JSONDocument_replaceChild_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/test003.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/JSONDocument_replaceChild_003_t.d
"JSONDocument_replaceChild_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:01.624694  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:01.626292  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.626304  1  5 findChild() args  path=<operation>
09-16 14:14:01.631077  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.634643  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.634696  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:14:01.634901  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:14:01.634913  1  5 findChild() Find succeeded.
09-16 14:14:01.638123  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.638138  1  5 findChild() args  path=<begin-state>
09-16 14:14:01.639054  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.639464  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.639487  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:01.639633  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:01.639646  1  5 findChild() Find succeeded.
09-16 14:14:01.642427  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.642443  1  5 findChild() args  path=<delta>
09-16 14:14:01.642870  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.643109  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.643125  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:01.643219  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:01.643228  1  5 findChild() Find succeeded.
09-16 14:14:01.644559  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.644576  1  5 findChild() args  path=<path>
09-16 14:14:01.645089  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.645373  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.645389  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:01.645486  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:01.645495  1  5 findChild() Find succeeded.
09-16 14:14:01.646684  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.646696  1  5 findChild() args  path=<end-state>
09-16 14:14:01.647147  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.647390  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.647410  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:01.647501  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:01.647509  1  5 findChild() Find succeeded.
09-16 14:14:01.648742  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.648752  1  5 findChild() args  path=<returned-value>
09-16 14:14:01.649158  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.649384  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.649403  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:01.649506  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:01.649515  1  5 findChild() Find succeeded.
09-16 14:14:01.650750  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.650760  1  5 findChild() args  path=<must-succeed>
09-16 14:14:01.651164  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.651389  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.651453  1  5 findChild() found child value=int(1)
09-16 14:14:01.651550  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:01.651559  1  5 findChild() Find succeeded.
09-16 14:14:01.652685  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : [
                1, 
                2, 
                3
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:14:01.652697  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:14:01.652701  1  4 replaceChild() args  path=<document.data>
09-16 14:14:01.653739  1  4 replaceChild() new child value=object(...)
09-16 14:14:01.653755  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:01.654506  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:01.654519  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:01.654754  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:14:01.654815  1  4 replaceChild() found child value=object(...)
09-16 14:14:01.655088  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:01.655229  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:01.655237  1  4 replaceChild() Replace succeeded.
09-16 14:14:01.655286  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:01.655294  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : [
                6, 
                6, 
                8
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:14:01.656223  1 10 matches() JSON buffers are equal.
09-16 14:14:01.656241  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : [
        1, 
        2, 
        3
    ]
}>
09-16 14:14:01.656247  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : [
        1, 
        2, 
        3
    ]
}>
Running test:<replaceChild>
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_003_t" end time: Sep 16 14:14 CDT
"JSONDocument_replaceChild_003_t" time elapsed: 00:00:00
----------------------------------------------------------

4/137 Testing: JSONDocument_replaceChild_004_t
4/137 Test: JSONDocument_replaceChild_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/JSONDocument_replaceChild_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/test004.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/JSONDocument_replaceChild_004_t.d
"JSONDocument_replaceChild_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:01.693700  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:01.695154  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.695165  1  5 findChild() args  path=<operation>
09-16 14:14:01.699290  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.702085  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.702119  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:14:01.702244  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:14:01.702252  1  5 findChild() Find succeeded.
09-16 14:14:01.704025  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.704034  1  5 findChild() args  path=<begin-state>
09-16 14:14:01.704437  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.704640  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.704653  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:01.704733  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:01.704741  1  5 findChild() Find succeeded.
09-16 14:14:01.705979  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.705988  1  5 findChild() args  path=<delta>
09-16 14:14:01.706350  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.706556  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.706570  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:01.706649  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:01.706657  1  5 findChild() Find succeeded.
09-16 14:14:01.707800  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.707808  1  5 findChild() args  path=<path>
09-16 14:14:01.708164  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.708363  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.708375  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:01.708462  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:01.708470  1  5 findChild() Find succeeded.
09-16 14:14:01.709583  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.709606  1  5 findChild() args  path=<end-state>
09-16 14:14:01.710134  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.710402  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.710420  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:01.710512  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:01.710520  1  5 findChild() Find succeeded.
09-16 14:14:01.711805  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.711814  1  5 findChild() args  path=<returned-value>
09-16 14:14:01.712220  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.712449  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.712464  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:01.712545  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:01.712552  1  5 findChild() Find succeeded.
09-16 14:14:01.713663  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.713670  1  5 findChild() args  path=<must-succeed>
09-16 14:14:01.713978  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.714148  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.714201  1  5 findChild() found child value=int(0)
09-16 14:14:01.714276  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:14:01.714283  1  5 findChild() Find succeeded.
09-16 14:14:01.715207  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data2" : {
            "a" : 1, 
            "b" : [
                1, 
                2, 
                3
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:14:01.715216  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:14:01.715219  1  4 replaceChild() args  path=<document.data>
09-16 14:14:01.716111  1  4 replaceChild() new child value=object(...)
09-16 14:14:01.716133  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:01.717168  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data2" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:01.717200  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:01.717431  1  4 replaceChild() recurse() args childValue=<{
"data2" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:14:01.717440  1  4 replaceChild() recurse() Error: Replace failed fordata, search path =<document.data>.
Running test:<replaceChild>
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_004_t" end time: Sep 16 14:14 CDT
"JSONDocument_replaceChild_004_t" time elapsed: 00:00:00
----------------------------------------------------------

5/137 Testing: JSONDocument_insertChild_101_t
5/137 Test: JSONDocument_insertChild_101_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/JSONDocument_insertChild_101_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/test101.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test101.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/JSONDocument_insertChild_101_t.d
"JSONDocument_insertChild_101_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:01.755609  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:01.756967  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.756979  1  5 findChild() args  path=<operation>
09-16 14:14:01.760921  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.763574  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.763607  1  5 findChild() found child value=std::string(insertChild)
09-16 14:14:01.763741  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:14:01.763749  1  5 findChild() Find succeeded.
09-16 14:14:01.765347  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.765356  1  5 findChild() args  path=<begin-state>
09-16 14:14:01.765716  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.765911  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.765924  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:01.766009  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:01.766016  1  5 findChild() Find succeeded.
09-16 14:14:01.767328  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.767337  1  5 findChild() args  path=<delta>
09-16 14:14:01.767693  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.767879  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.767891  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:01.767964  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:01.767971  1  5 findChild() Find succeeded.
09-16 14:14:01.769000  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.769009  1  5 findChild() args  path=<path>
09-16 14:14:01.769361  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.769555  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.769568  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:01.769641  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:01.769648  1  5 findChild() Find succeeded.
09-16 14:14:01.770571  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.770579  1  5 findChild() args  path=<end-state>
09-16 14:14:01.770911  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.771097  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.771110  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:01.771184  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:01.771191  1  5 findChild() Find succeeded.
09-16 14:14:01.772415  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.772423  1  5 findChild() args  path=<returned-value>
09-16 14:14:01.772761  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.772947  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.772960  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:01.773034  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:01.773041  1  5 findChild() Find succeeded.
09-16 14:14:01.774117  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.774125  1  5 findChild() args  path=<must-succeed>
09-16 14:14:01.774466  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.774650  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.774682  1  5 findChild() found child value=int(1)
09-16 14:14:01.774760  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:01.774767  1  5 findChild() Find succeeded.
09-16 14:14:01.775683  1  2 insertChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:01.775693  1  2 insertChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:01.775697  1  2 insertChild() args  path=<document.data>
09-16 14:14:01.778781  1  4 insertChild() new child value=object(...)
09-16 14:14:01.778812  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:01.780806  1  4 insertChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.780819  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:01.781454  1  4 insertChild() recurse() args childValue=<{
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:14:01.781489  1  4 insertChild() found child value=object(...)
09-16 14:14:01.782976  1  4 insertChild() resultDocument=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.783148  1  4 insertChild() insertChild=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.783157  1  4 insertChild() Insert succeeded.
09-16 14:14:01.783241  1 10 operator==() begin _json_buffer=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.783250  1 10 operator==() args  other.__json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }, 
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:01.787549  1 10 matches() JSON buffers are equal.
09-16 14:14:01.787582  1 10 operator==() begin _json_buffer=<{
    "aa" : 3, 
    "b" : {
        "c" : "2", 
        "dd" : [
            2, 
            5, 
            6, 
            7
        ]
    }
}>
09-16 14:14:01.787587  1 10 operator==() args  other.__json_buffer=<{
    "aa" : 3, 
    "b" : {
        "c" : "2", 
        "dd" : [
            2, 
            5, 
            6, 
            7
        ]
    }
}>
Running test:<insertChild>
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_101_t" end time: Sep 16 14:14 CDT
"JSONDocument_insertChild_101_t" time elapsed: 00:00:00
----------------------------------------------------------

6/137 Testing: JSONDocument_insertChild_102_t
6/137 Test: JSONDocument_insertChild_102_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/JSONDocument_insertChild_102_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/test102.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test102.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/JSONDocument_insertChild_102_t.d
"JSONDocument_insertChild_102_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:01.824336  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:01.825664  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.825674  1  5 findChild() args  path=<operation>
09-16 14:14:01.829453  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.831921  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.831951  1  5 findChild() found child value=std::string(insertChild)
09-16 14:14:01.832060  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:14:01.832067  1  5 findChild() Find succeeded.
09-16 14:14:01.833589  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.833597  1  5 findChild() args  path=<begin-state>
09-16 14:14:01.833947  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.834132  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.834144  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:01.834215  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:01.834222  1  5 findChild() Find succeeded.
09-16 14:14:01.835470  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.835477  1  5 findChild() args  path=<delta>
09-16 14:14:01.835800  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.835977  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.835989  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:01.836058  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:01.836065  1  5 findChild() Find succeeded.
09-16 14:14:01.837145  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.837155  1  5 findChild() args  path=<path>
09-16 14:14:01.837617  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.837795  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.837808  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:01.837877  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:01.837884  1  5 findChild() Find succeeded.
09-16 14:14:01.838789  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.838797  1  5 findChild() args  path=<end-state>
09-16 14:14:01.839159  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.839336  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.839349  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:01.839426  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:01.839433  1  5 findChild() Find succeeded.
09-16 14:14:01.840605  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.840614  1  5 findChild() args  path=<returned-value>
09-16 14:14:01.840973  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.841196  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.841210  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:01.841285  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:01.841292  1  5 findChild() Find succeeded.
09-16 14:14:01.842383  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.842398  1  5 findChild() args  path=<must-succeed>
09-16 14:14:01.842768  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.842962  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.843016  1  5 findChild() found child value=int(0)
09-16 14:14:01.843100  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:14:01.843108  1  5 findChild() Find succeeded.
09-16 14:14:01.844211  1  2 insertChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : "aaa", 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:01.844235  1  2 insertChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:01.844242  1  2 insertChild() args  path=<document.data>
09-16 14:14:01.848137  1  4 insertChild() new child value=object(...)
09-16 14:14:01.848206  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:01.850302  1  4 insertChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : "aaa",
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:01.850318  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:01.850970  1  4 insertChild() recurse() args childValue=<{
"data" : "aaa",
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:14:01.850980  1  4 insertChild() recurse() Error: Insert failed fordata, search path =<document.data>; Child exists, call replace instead.
Running test:<insertChild>
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_102_t" end time: Sep 16 14:14 CDT
"JSONDocument_insertChild_102_t" time elapsed: 00:00:00
----------------------------------------------------------

7/137 Testing: JSONDocument_insertChild_103_t
7/137 Test: JSONDocument_insertChild_103_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/JSONDocument_insertChild_103_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/test103.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test103.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/JSONDocument_insertChild_103_t.d
"JSONDocument_insertChild_103_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:01.878738  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:01.879930  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.879941  1  5 findChild() args  path=<operation>
09-16 14:14:01.883527  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.885944  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.885974  1  5 findChild() found child value=std::string(insertChild)
09-16 14:14:01.886078  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:14:01.886085  1  5 findChild() Find succeeded.
09-16 14:14:01.887559  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.887567  1  5 findChild() args  path=<begin-state>
09-16 14:14:01.887883  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.888055  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.888067  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:01.888135  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:01.888141  1  5 findChild() Find succeeded.
09-16 14:14:01.889174  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.889181  1  5 findChild() args  path=<delta>
09-16 14:14:01.889497  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.889668  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.889680  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:01.889748  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:01.889754  1  5 findChild() Find succeeded.
09-16 14:14:01.890722  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.890730  1  5 findChild() args  path=<path>
09-16 14:14:01.891027  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.891197  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.891208  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:01.891275  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:01.891282  1  5 findChild() Find succeeded.
09-16 14:14:01.892188  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.892195  1  5 findChild() args  path=<end-state>
09-16 14:14:01.892500  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.892669  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.892680  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:01.892747  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:01.892754  1  5 findChild() Find succeeded.
09-16 14:14:01.893719  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.893726  1  5 findChild() args  path=<returned-value>
09-16 14:14:01.894025  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.894194  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.894206  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:01.894274  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:01.894280  1  5 findChild() Find succeeded.
09-16 14:14:01.895244  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:14:01.895251  1  5 findChild() args  path=<must-succeed>
09-16 14:14:01.895556  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.895727  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:14:01.895755  1  5 findChild() found child value=int(0)
09-16 14:14:01.895826  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:14:01.895832  1  5 findChild() Find succeeded.
09-16 14:14:01.896728  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "data" : "ss", 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:14:01.896735  1  2 insertChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:14:01.896738  1  2 insertChild() args  path=<document.data>
09-16 14:14:01.897358  1  4 insertChild() new child value=object(...)
09-16 14:14:01.897371  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:01.897808  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : "ss",
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:01.897818  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:01.897940  1  4 insertChild() recurse() args childValue=<{
"data" : "ss",
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:14:01.897949  1  4 insertChild() recurse() Error: Insert failed fordata, search path =<document.data>; Child exists, call replace instead.
Running test:<insertChild>
<end of output>
Test time =   0.05 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_103_t" end time: Sep 16 14:14 CDT
"JSONDocument_insertChild_103_t" time elapsed: 00:00:00
----------------------------------------------------------

8/137 Testing: JSONDocument_insertChild_104_t
8/137 Test: JSONDocument_insertChild_104_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/JSONDocument_insertChild_104_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/test104.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test104.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/JSONDocument_insertChild_104_t.d
"JSONDocument_insertChild_104_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:01.937226  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:01.938970  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.938983  1  5 findChild() args  path=<operation>
09-16 14:14:01.944117  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.947481  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.947522  1  5 findChild() found child value=std::string(insertChild)
09-16 14:14:01.947689  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:14:01.947699  1  5 findChild() Find succeeded.
09-16 14:14:01.949832  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.949844  1  5 findChild() args  path=<begin-state>
09-16 14:14:01.950326  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.950606  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.950624  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:01.950743  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:01.950753  1  5 findChild() Find succeeded.
09-16 14:14:01.952155  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.952167  1  5 findChild() args  path=<delta>
09-16 14:14:01.952640  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.952912  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.952930  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:01.953049  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:01.953058  1  5 findChild() Find succeeded.
09-16 14:14:01.954469  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.954479  1  5 findChild() args  path=<path>
09-16 14:14:01.954928  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.955192  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.955208  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:01.955323  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:01.955332  1  5 findChild() Find succeeded.
09-16 14:14:01.956577  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.956588  1  5 findChild() args  path=<end-state>
09-16 14:14:01.957038  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.957299  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.957316  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:01.957456  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:01.957465  1  5 findChild() Find succeeded.
09-16 14:14:01.958804  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.958814  1  5 findChild() args  path=<returned-value>
09-16 14:14:01.959240  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.959482  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.959499  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:01.959593  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:01.959602  1  5 findChild() Find succeeded.
09-16 14:14:01.960918  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:01.960928  1  5 findChild() args  path=<must-succeed>
09-16 14:14:01.961376  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:01.961644  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:01.961683  1  5 findChild() found child value=int(1)
09-16 14:14:01.961784  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:01.961794  1  5 findChild() Find succeeded.
09-16 14:14:01.962972  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:14:01.962983  1  2 insertChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:14:01.962988  1  2 insertChild() args  path=<document.data>
09-16 14:14:01.963805  1  4 insertChild() new child value=object(...)
09-16 14:14:01.963824  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:01.964386  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:01.964404  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:01.964554  1  4 insertChild() recurse() args childValue=<{
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:14:01.964593  1  4 insertChild() found child value=object(...)
09-16 14:14:01.964891  1  4 insertChild() resultDocument=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:14:01.965041  1  4 insertChild() insertChild=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:14:01.965050  1  4 insertChild() Insert succeeded.
09-16 14:14:01.965103  1 10 operator==() begin _json_buffer=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:14:01.965112  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ], 
        "data" : {
            "a" : 1, 
            "b" : [
                6, 
                6, 
                8
            ]
        }
    }
}>
09-16 14:14:01.966054  1 10 matches() JSON buffers are equal.
09-16 14:14:01.966074  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : [
        6, 
        6, 
        8
    ]
}>
09-16 14:14:01.966079  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : [
        6, 
        6, 
        8
    ]
}>
Running test:<insertChild>
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_104_t" end time: Sep 16 14:14 CDT
"JSONDocument_insertChild_104_t" time elapsed: 00:00:00
----------------------------------------------------------

9/137 Testing: JSONDocument_deleteChild_201_t
9/137 Test: JSONDocument_deleteChild_201_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/JSONDocument_deleteChild_201_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/test201.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test201.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/JSONDocument_deleteChild_201_t.d
"JSONDocument_deleteChild_201_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.004345  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.005890  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.005904  1  5 findChild() args  path=<operation>
09-16 14:14:02.010699  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.013938  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.013981  1  5 findChild() found child value=std::string(deleteChild)
09-16 14:14:02.014124  1  5 findChild() resultDocument=<{
"operation" : "deleteChild"
}>
09-16 14:14:02.014133  1  5 findChild() Find succeeded.
09-16 14:14:02.016297  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.016315  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.016890  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.017203  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.017220  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.017330  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.017340  1  5 findChild() Find succeeded.
09-16 14:14:02.018809  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.018823  1  5 findChild() args  path=<path>
09-16 14:14:02.019278  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.019525  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.019540  1  5 findChild() found child value=std::string(document.data)
09-16 14:14:02.019624  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:14:02.019632  1  5 findChild() Find succeeded.
09-16 14:14:02.020667  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.020676  1  5 findChild() args  path=<end-state>
09-16 14:14:02.021043  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.021249  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.021263  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.021345  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.021353  1  5 findChild() Find succeeded.
09-16 14:14:02.022430  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.022438  1  5 findChild() args  path=<returned-value>
09-16 14:14:02.022807  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.023014  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.023028  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:02.023111  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:02.023119  1  5 findChild() Find succeeded.
09-16 14:14:02.024215  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.024224  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.024640  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.024901  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.025022  1  5 findChild() found child value=int(1)
09-16 14:14:02.025128  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.025137  1  5 findChild() Find succeeded.
09-16 14:14:02.026200  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "tt" : "aa"
        }, 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:14:02.026210  1  3 deleteChild() args  path=<document.data>
09-16 14:14:02.027309  1  3 deleteChild() recurse() args currentDepth=1
09-16 14:14:02.028078  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"tt" : "aa"
},
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:02.028094  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:02.028261  1  3 deleteChild() recurse() args childValue=<{
"data" : {
"tt" : "aa"
},
"bbb" : [
1,
2,
3
]
}>
09-16 14:14:02.028321  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:02.028478  1  3 deleteChild() resultDocument=<{
"document" : {
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:02.028567  1  3 deleteChild() deletedChild=<{
"tt" : "aa"
}>
09-16 14:14:02.028576  1  3 deleteChild() Delete succeeded.
09-16 14:14:02.028644  1 10 operator==() begin _json_buffer=<{
"document" : {
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:14:02.028653  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:14:02.029226  1 10 matches() JSON buffers are equal.
09-16 14:14:02.029242  1 10 operator==() begin _json_buffer=<{
    "tt" : "aa"
}>
09-16 14:14:02.029247  1 10 operator==() args  other.__json_buffer=<{
    "tt" : "aa"
}>
Running test:<deleteChild>
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_deleteChild_201_t" end time: Sep 16 14:14 CDT
"JSONDocument_deleteChild_201_t" time elapsed: 00:00:00
----------------------------------------------------------

10/137 Testing: JSONDocument_appendChild_301_t
10/137 Test: JSONDocument_appendChild_301_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/JSONDocument_appendChild_301_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/test301.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test301.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/JSONDocument_appendChild_301_t.d
"JSONDocument_appendChild_301_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.077122  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.079291  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.079308  1  5 findChild() args  path=<operation>
09-16 14:14:02.085514  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.089867  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.089935  1  5 findChild() found child value=std::string(appendChild)
09-16 14:14:02.090141  1  5 findChild() resultDocument=<{
"operation" : "appendChild"
}>
09-16 14:14:02.090154  1  5 findChild() Find succeeded.
09-16 14:14:02.092410  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.092427  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.092996  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.093355  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.093374  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.093475  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.093485  1  5 findChild() Find succeeded.
09-16 14:14:02.095490  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.095504  1  5 findChild() args  path=<delta>
09-16 14:14:02.096136  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.096480  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.096503  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:02.096645  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:02.096657  1  5 findChild() Find succeeded.
09-16 14:14:02.098410  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.098423  1  5 findChild() args  path=<path>
09-16 14:14:02.098992  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.099319  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.099339  1  5 findChild() found child value=std::string(aliases.active)
09-16 14:14:02.099488  1  5 findChild() resultDocument=<{
"path" : "aliases.active"
}>
09-16 14:14:02.099500  1  5 findChild() Find succeeded.
09-16 14:14:02.101050  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.101061  1  5 findChild() args  path=<end-state>
09-16 14:14:02.101586  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.101876  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.101895  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.102022  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.102033  1  5 findChild() Find succeeded.
09-16 14:14:02.103657  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.103669  1  5 findChild() args  path=<returned-value>
09-16 14:14:02.104297  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.104585  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.104604  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:02.104715  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:02.104725  1  5 findChild() Find succeeded.
09-16 14:14:02.106236  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.106247  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.106754  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.107029  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.107081  1  5 findChild() found child value=int(1)
09-16 14:14:02.107196  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.107207  1  5 findChild() Find succeeded.
09-16 14:14:02.108587  1 13 appendChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.108601  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "version alias 2", 
        "assigned" : "Tue Dec 29 18:19:25 2015"
    }
}>
09-16 14:14:02.108607  1 13 appendChild() args  path=<aliases.active>
09-16 14:14:02.108950  1  4 appendChild() new child value=object(...)
09-16 14:14:02.108967  1  5 findChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.108975  1  5 findChild() args  path=<aliases.active>
09-16 14:14:02.110857  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.112382  1  5 findChild() recurse() args currentView=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:02.112402  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.112971  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:14:02.112998  1  5 findChild() found child value=array(...)
09-16 14:14:02.113294  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:14:02.113305  1  5 findChild() Find succeeded.
09-16 14:14:02.114208  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:14:02.114346  1  3 appendChild() newChild=<{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}>
09-16 14:14:02.114422  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:14:02.114436  1  4 replaceChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.114444  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:14:02.114450  1  4 replaceChild() args  path=<aliases.active>
09-16 14:14:02.116202  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.116222  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.117053  1  4 replaceChild() recurse() args childValue=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:02.117069  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.117637  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:14:02.117700  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.118616  1  4 replaceChild() resultDocument=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:02.118918  1  4 replaceChild() replacedChild=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:02.118929  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.119037  1 10 operator==() begin _json_buffer=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:02.119050  1 10 operator==() args  other.__json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.121929  1 10 matches() JSON buffers are equal.
09-16 14:14:02.121958  1 10 operator==() begin _json_buffer=<{
    "name" : "version alias 2", 
    "assigned" : "Tue Dec 29 18:19:25 2015"
}>
09-16 14:14:02.121964  1 10 operator==() args  other.__json_buffer=<{
    "name" : "version alias 2", 
    "assigned" : "Tue Dec 29 18:19:25 2015"
}>
Running test:<appendChild>
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_appendChild_301_t" end time: Sep 16 14:14 CDT
"JSONDocument_appendChild_301_t" time elapsed: 00:00:00
----------------------------------------------------------

11/137 Testing: JSONDocument_removeChild_302_t
11/137 Test: JSONDocument_removeChild_302_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/JSONDocument_removeChild_302_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/test302.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test302.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/JSONDocument_removeChild_302_t.d
"JSONDocument_removeChild_302_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.163667  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.165257  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.165271  1  5 findChild() args  path=<operation>
09-16 14:14:02.170027  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.173150  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.173190  1  5 findChild() found child value=std::string(removeChild)
09-16 14:14:02.173332  1  5 findChild() resultDocument=<{
"operation" : "removeChild"
}>
09-16 14:14:02.173341  1  5 findChild() Find succeeded.
09-16 14:14:02.175181  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.175191  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.175626  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.175842  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.175856  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.175942  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.175950  1  5 findChild() Find succeeded.
09-16 14:14:02.177323  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.177333  1  5 findChild() args  path=<delta>
09-16 14:14:02.177723  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.177937  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.177951  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:14:02.178036  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:14:02.178044  1  5 findChild() Find succeeded.
09-16 14:14:02.179198  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.179207  1  5 findChild() args  path=<path>
09-16 14:14:02.179606  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.179820  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.179834  1  5 findChild() found child value=std::string(aliases.active)
09-16 14:14:02.179918  1  5 findChild() resultDocument=<{
"path" : "aliases.active"
}>
09-16 14:14:02.179926  1  5 findChild() Find succeeded.
09-16 14:14:02.181072  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.181100  1  5 findChild() args  path=<end-state>
09-16 14:14:02.181626  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.181904  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.181921  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.182013  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.182022  1  5 findChild() Find succeeded.
09-16 14:14:02.183459  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.183473  1  5 findChild() args  path=<returned-value>
09-16 14:14:02.183996  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.184267  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.184284  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:14:02.184398  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:14:02.184407  1  5 findChild() Find succeeded.
09-16 14:14:02.185648  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.185657  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.186079  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.186322  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:14:02.186386  1  5 findChild() found child value=int(1)
09-16 14:14:02.186497  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.186506  1  5 findChild() Find succeeded.
09-16 14:14:02.187649  1 13 removeChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.187661  1 13 removeChild() args  child=<{
    "payload" : {
        "name" : "version alias 2"
    }
}>
09-16 14:14:02.187666  1 13 removeChild() args  path=<aliases.active>
09-16 14:14:02.187921  1  4 removeChild() new delete value=object(...)
09-16 14:14:02.187935  1  5 findChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.187941  1  5 findChild() args  path=<aliases.active>
09-16 14:14:02.189692  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.191053  1  5 findChild() recurse() args currentView=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.191065  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.191612  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:14:02.191637  1  5 findChild() found child value=array(...)
09-16 14:14:02.191961  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:14:02.191970  1  5 findChild() Find succeeded.
09-16 14:14:02.192582  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:14:02.192602  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:14:02.192845  1  3 removeChild() updatedChild=<{
"payload" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:14:02.193013  1  3 removeChild() delChild=<{
"0" : [
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:14:02.193064  1 13 removeChild() updatedChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:14:02.193076  1  4 replaceChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.193083  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:14:02.193087  1  4 replaceChild() args  path=<aliases.active>
09-16 14:14:02.194538  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.194554  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.195296  1  4 replaceChild() recurse() args childValue=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.195309  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.195872  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:14:02.195927  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.196589  1  4 replaceChild() resultDocument=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.196926  1  4 replaceChild() replacedChild=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.196935  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.197040  1 10 operator==() begin _json_buffer=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.197051  1 10 operator==() args  other.__json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.199177  1 10 matches() JSON buffers are equal.
09-16 14:14:02.199200  1 10 operator==() begin _json_buffer=<{
    "0" : [
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:14:02.199205  1 10 operator==() args  other.__json_buffer=<{
    "0" : [
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
Running test:<removeChild>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_removeChild_302_t" end time: Sep 16 14:14 CDT
"JSONDocument_removeChild_302_t" time elapsed: 00:00:00
----------------------------------------------------------

12/137 Testing: JSONDocumentBuilder_buildDocument_001_t
12/137 Test: JSONDocumentBuilder_buildDocument_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/JSONDocumentBuilder_buildDocument_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/test001.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/JSONDocumentBuilder_buildDocument_001_t.d
"JSONDocumentBuilder_buildDocument_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.232329  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.232444  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.233685  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.233695  1  5 findChild() args  path=<operation>
09-16 14:14:02.237617  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.240356  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.240391  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:14:02.240516  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:14:02.240524  1  5 findChild() Find succeeded.
09-16 14:14:02.242238  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.242248  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.242516  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.242659  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.242673  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.242753  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.242760  1  5 findChild() Find succeeded.
09-16 14:14:02.244001  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.244010  1  5 findChild() args  path=<end-state>
09-16 14:14:02.244256  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.244409  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.244423  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.244503  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.244511  1  5 findChild() Find succeeded.
09-16 14:14:02.245740  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.245749  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.245981  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.246122  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.246152  1  5 findChild() found child value=int(1)
09-16 14:14:02.246234  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.246241  1  5 findChild() Find succeeded.
09-16 14:14:02.247303  1  2 createFrom() args  document=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.247386  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.247393  1  5 findChild() args  path=<document.metadata>
09-16 14:14:02.247922  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.248463  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:14:02.248475  1  5 findChild() recurse() Error: Search failed for json element name=document, search path =<document.metadata>.
09-16 14:14:02.248712  1  2 createFrom() No document.metadata
09-16 14:14:02.248729  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.248734  1  5 findChild() args  path=<changelog>
09-16 14:14:02.248992  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.249207  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:14:02.249218  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:14:02.249252  1  2 createFrom() No converted.changelog
09-16 14:14:02.249260  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.249264  1  5 findChild() args  path=<document.data>
09-16 14:14:02.249556  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.249771  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:14:02.249781  1  5 findChild() recurse() Error: Search failed for json element name=document, search path =<document.data>.
09-16 14:14:02.249815  1  2 createFrom() No document.data
09-16 14:14:02.249827  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.249833  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.249837  1  4 replaceChild() args  path=<document.data>
09-16 14:14:02.251094  1  4 replaceChild() new child value=object(...)
09-16 14:14:02.251108  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.251826  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.251839  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.252061  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.252107  1  4 replaceChild() found child value=object(...)
09-16 14:14:02.252823  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.252840  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.252845  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.252882  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.252890  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.255084  1 10 matches() JSON buffers are equal.
Running test:<buildDocument>
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_001_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_buildDocument_001_t" time elapsed: 00:00:00
----------------------------------------------------------

13/137 Testing: JSONDocumentBuilder_buildDocument_002_t
13/137 Test: JSONDocumentBuilder_buildDocument_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/JSONDocumentBuilder_buildDocument_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/test002.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/JSONDocumentBuilder_buildDocument_002_t.d
"JSONDocumentBuilder_buildDocument_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.299761  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.299927  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.301931  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.301947  1  5 findChild() args  path=<operation>
09-16 14:14:02.307792  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.313178  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.313253  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:14:02.313509  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:14:02.313526  1  5 findChild() Find succeeded.
09-16 14:14:02.318074  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.318093  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.318875  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.319246  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.319275  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.319480  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.319497  1  5 findChild() Find succeeded.
09-16 14:14:02.322694  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.322716  1  5 findChild() args  path=<end-state>
09-16 14:14:02.323201  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.323487  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.323507  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.323637  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.323648  1  5 findChild() Find succeeded.
09-16 14:14:02.326034  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.326055  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.326842  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.327238  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.327342  1  5 findChild() found child value=int(1)
09-16 14:14:02.327545  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.327562  1  5 findChild() Find succeeded.
09-16 14:14:02.330580  1  2 createFrom() args  document=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.330776  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.330793  1  5 findChild() args  path=<document.metadata>
09-16 14:14:02.334764  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.337027  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.337061  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.337623  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.337653  1  5 findChild() found child value=object(...)
09-16 14:14:02.337871  1  5 findChild() resultDocument=<{
"document.metadata" : {
"comments" : {
"empty" : "empty"
}
}
}>
09-16 14:14:02.337883  1  5 findChild() Find succeeded.
09-16 14:14:02.337987  1  2 createFrom() Found document.metadata=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:14:02.338007  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.338016  1  4 replaceChild() args  newChild=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:14:02.338021  1  4 replaceChild() args  path=<document.metadata>
09-16 14:14:02.339571  1  4 replaceChild() new child value=object(...)
09-16 14:14:02.339598  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.340474  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.340494  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.340823  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.340906  1  4 replaceChild() found child value=object(...)
09-16 14:14:02.341729  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.341884  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.341896  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.341971  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.341980  1  5 findChild() args  path=<changelog>
09-16 14:14:02.343345  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.344334  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.344348  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:14:02.344787  1  2 createFrom() No converted.changelog
09-16 14:14:02.344819  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.344827  1  5 findChild() args  path=<document.data>
09-16 14:14:02.346170  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.347163  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.347178  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.347681  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.347702  1  5 findChild() found child value=object(...)
09-16 14:14:02.348003  1  5 findChild() resultDocument=<{
"document.data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:14:02.348014  1  5 findChild() Find succeeded.
09-16 14:14:02.348089  1  2 createFrom() Found document.data=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.348099  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.348105  1  4 replaceChild() args  newChild=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.348110  1  4 replaceChild() args  path=<document.data>
09-16 14:14:02.349556  1  4 replaceChild() new child value=object(...)
09-16 14:14:02.349569  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.350441  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.350458  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.350780  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.350800  1  4 replaceChild() found child value=object(...)
09-16 14:14:02.351786  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.351807  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.351814  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.351872  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.351882  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.354848  1 10 matches() JSON buffers are equal.
Running test:<buildDocument>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_002_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_buildDocument_002_t" time elapsed: 00:00:00
----------------------------------------------------------

14/137 Testing: JSONDocumentBuilder_buildDocument_003_t
14/137 Test: JSONDocumentBuilder_buildDocument_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/JSONDocumentBuilder_buildDocument_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/test003.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/JSONDocumentBuilder_buildDocument_003_t.d
"JSONDocumentBuilder_buildDocument_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.402261  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.402437  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.404347  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:14:02.404367  1  5 findChild() args  path=<operation>
09-16 14:14:02.410347  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.414402  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:14:02.414466  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:14:02.414668  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:14:02.414683  1  5 findChild() Find succeeded.
09-16 14:14:02.417499  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:14:02.417543  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.418084  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.418402  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:14:02.418430  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.418575  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.418590  1  5 findChild() Find succeeded.
09-16 14:14:02.420838  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:14:02.420857  1  5 findChild() args  path=<end-state>
09-16 14:14:02.421277  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.421525  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:14:02.421549  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.421683  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.421696  1  5 findChild() Find succeeded.
09-16 14:14:02.423567  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:14:02.423581  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.423947  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.424168  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:14:02.424237  1  5 findChild() found child value=int(0)
09-16 14:14:02.424374  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:14:02.424388  1  5 findChild() Find succeeded.
09-16 14:14:02.425974  1  2 createFrom() args  document=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.426176  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.426199  1  5 findChild() args  path=<document.metadata>
09-16 14:14:02.428658  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.430634  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:02.430654  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.431231  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.431264  1  5 findChild() found child value=object(...)
09-16 14:14:02.431487  1  5 findChild() resultDocument=<{
"document.metadata" : {
"comments" : {
"empty" : "empty"
}
}
}>
09-16 14:14:02.431500  1  5 findChild() Find succeeded.
09-16 14:14:02.431572  1  2 createFrom() Found document.metadata=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:14:02.431595  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.431610  1  4 replaceChild() args  newChild=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:14:02.431620  1  4 replaceChild() args  path=<document.metadata>
09-16 14:14:02.433177  1  4 replaceChild() new child value=object(...)
09-16 14:14:02.433203  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.434072  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.434095  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.434488  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.434570  1  4 replaceChild() found child value=object(...)
09-16 14:14:02.435436  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.435632  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.435646  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.435726  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.435740  1  5 findChild() args  path=<changelog>
09-16 14:14:02.437287  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.438413  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:02.438431  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:14:02.438837  1  2 createFrom() No converted.changelog
09-16 14:14:02.438876  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.438888  1  5 findChild() args  path=<document.data>
09-16 14:14:02.440436  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.441492  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:14:02.441511  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.442062  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.442088  1  5 findChild() found child value=object(...)
09-16 14:14:02.442418  1  5 findChild() resultDocument=<{
"document.data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:14:02.442431  1  5 findChild() Find succeeded.
09-16 14:14:02.442522  1  2 createFrom() Found document.data=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.442535  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.442545  1  4 replaceChild() args  newChild=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:14:02.442554  1  4 replaceChild() args  path=<document.data>
09-16 14:14:02.444084  1  4 replaceChild() new child value=object(...)
09-16 14:14:02.444100  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.444933  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.444953  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.445319  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:14:02.445344  1  4 replaceChild() found child value=object(...)
09-16 14:14:02.446377  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.446408  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.446420  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.446489  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.446505  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations-error" : [
        "config1"
    ], 
    "version" : "version1", 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:14:02.449474  1 10 matches() JSON buffers are not equal.
09-16 14:14:02.449488  1 10 matches() Error message=<Objects have different sizes <object(...),object(...)>>
Running test:<buildDocument>
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_003_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_buildDocument_003_t" time elapsed: 00:00:00
----------------------------------------------------------

15/137 Testing: JSONDocumentBuilder_addAlias_004_t
15/137 Test: JSONDocumentBuilder_addAlias_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/JSONDocumentBuilder_addAlias_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/test004.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/alias.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/JSONDocumentBuilder_addAlias_004_t.d
"JSONDocumentBuilder_addAlias_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.497596  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.497746  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.499696  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.499712  1  5 findChild() args  path=<operation>
09-16 14:14:02.506413  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.510509  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.510565  1  5 findChild() found child value=std::string(addAlias)
09-16 14:14:02.510792  1  5 findChild() resultDocument=<{
"operation" : "addAlias"
}>
09-16 14:14:02.510816  1  5 findChild() Find succeeded.
09-16 14:14:02.515519  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.515544  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.516113  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.516433  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.516456  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.516585  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.516597  1  5 findChild() Find succeeded.
09-16 14:14:02.518728  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.518743  1  5 findChild() args  path=<delta>
09-16 14:14:02.519182  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.519464  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.519485  1  5 findChild() found child value=std::string(alias.json)
09-16 14:14:02.519628  1  5 findChild() resultDocument=<{
"delta" : "alias.json"
}>
09-16 14:14:02.519640  1  5 findChild() Find succeeded.
09-16 14:14:02.521357  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.521370  1  5 findChild() args  path=<end-state>
09-16 14:14:02.521774  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.522011  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.522031  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.522151  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.522162  1  5 findChild() Find succeeded.
09-16 14:14:02.523985  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.523998  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.524401  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.524677  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.524729  1  5 findChild() found child value=int(1)
09-16 14:14:02.524851  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.524862  1  5 findChild() Find succeeded.
09-16 14:14:02.526419  1  3 addAlias() args  alias=<{
    "alias" : "alias01"
}>
09-16 14:14:02.528037  1 10 _makeActiveAlias() activeAlias<{"name":"alias01","assigned":"Mon Feb  8 14:00:30 2016"}>
09-16 14:14:02.528125  1 13 appendChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.528139  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "alias01", 
        "assigned" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.528145  1 13 appendChild() args  path=<aliases.active>
09-16 14:14:02.528506  1  4 appendChild() new child value=object(...)
09-16 14:14:02.528525  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.528532  1  5 findChild() args  path=<aliases.active>
09-16 14:14:02.530715  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.532495  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.532512  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.532660  1  5 findChild() recurse() args currentView=<{
"active" : [

],
"history" : [

]
}>
09-16 14:14:02.532683  1  5 findChild() found child value=array(...)
09-16 14:14:02.532807  1  5 findChild() resultDocument=<{
"aliases.active" : [

]
}>
09-16 14:14:02.532818  1  5 findChild() Find succeeded.
09-16 14:14:02.533275  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.533427  1  3 appendChild() newChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.533479  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.533493  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:14:02.533502  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.533507  1  4 replaceChild() args  path=<aliases.active>
09-16 14:14:02.535242  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.535262  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.536320  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.536339  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.536494  1  4 replaceChild() recurse() args childValue=<{
"active" : [

],
"history" : [

]
}>
09-16 14:14:02.536555  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.537715  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.537845  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.537856  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.538000  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.538011  1 13 appendChild() args  child=<{
    "payload" : {
        "addAlias" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.538017  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:14:02.538225  1  4 appendChild() new child value=object(...)
09-16 14:14:02.538239  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.538245  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:14:02.539773  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.540939  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.540955  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.541148  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}>
09-16 14:14:02.541164  1  5 findChild() found child value=array(...)
09-16 14:14:02.541276  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [

]
}>
09-16 14:14:02.541286  1  5 findChild() Find succeeded.
09-16 14:14:02.541653  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.541761  1  3 appendChild() newChild=<{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.541808  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.541817  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.541823  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.541828  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:14:02.543509  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.543522  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.544636  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:14:02.544652  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.544846  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}>
09-16 14:14:02.544867  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.546065  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.546187  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.546199  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.546279  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.546293  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.549743  1 10 matches() JSON buffers are equal.
Running test:<addAlias>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_addAlias_004_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_addAlias_004_t" time elapsed: 00:00:00
----------------------------------------------------------

16/137 Testing: JSONDocumentBuilder_removeAlias_005_t
16/137 Test: JSONDocumentBuilder_removeAlias_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/JSONDocumentBuilder_removeAlias_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/test005.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/alias.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test005.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/JSONDocumentBuilder_removeAlias_005_t.d
"JSONDocumentBuilder_removeAlias_005_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.598600  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.598767  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.600818  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.600837  1  5 findChild() args  path=<operation>
09-16 14:14:02.607304  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.611519  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.611573  1  5 findChild() found child value=std::string(removeAlias)
09-16 14:14:02.611763  1  5 findChild() resultDocument=<{
"operation" : "removeAlias"
}>
09-16 14:14:02.611775  1  5 findChild() Find succeeded.
09-16 14:14:02.614751  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.614785  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.615471  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.615837  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.615860  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.615989  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.616001  1  5 findChild() Find succeeded.
09-16 14:14:02.618114  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.618128  1  5 findChild() args  path=<delta>
09-16 14:14:02.618557  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.618807  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.618827  1  5 findChild() found child value=std::string(alias.json)
09-16 14:14:02.618947  1  5 findChild() resultDocument=<{
"delta" : "alias.json"
}>
09-16 14:14:02.618959  1  5 findChild() Find succeeded.
09-16 14:14:02.620594  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.620607  1  5 findChild() args  path=<end-state>
09-16 14:14:02.621021  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.621268  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.621287  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.621415  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.621427  1  5 findChild() Find succeeded.
09-16 14:14:02.623334  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.623347  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.623768  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.624014  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:14:02.624068  1  5 findChild() found child value=int(1)
09-16 14:14:02.624200  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.624211  1  5 findChild() Find succeeded.
09-16 14:14:02.625740  1  4 removeAlias() args  alias=<{
    "alias" : "alias01"
}>
09-16 14:14:02.627247  1 10 _makeAlias() activeAlias<{"name":"alias01"}>
09-16 14:14:02.627327  1 13 removeChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.627341  1 13 removeChild() args  child=<{
    "payload" : {
        "name" : "alias01"
    }
}>
09-16 14:14:02.627348  1 13 removeChild() args  path=<aliases.active>
09-16 14:14:02.627633  1  4 removeChild() new delete value=object(...)
09-16 14:14:02.627652  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.627661  1  5 findChild() args  path=<aliases.active>
09-16 14:14:02.630354  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.632629  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.632647  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.633091  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:14:02.633122  1  5 findChild() found child value=array(...)
09-16 14:14:02.633588  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.633601  1  5 findChild() Find succeeded.
09-16 14:14:02.634413  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:14:02.634454  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:14:02.634757  1  3 removeChild() updatedChild=<{
"payload" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.634965  1  3 removeChild() delChild=<{
"0" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.635027  1 13 removeChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias012", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "alias02", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.635044  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.635054  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias012", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "alias02", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.635060  1  4 replaceChild() args  path=<aliases.active>
09-16 14:14:02.637448  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.637469  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.638940  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.638959  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.639385  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:14:02.639457  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.640792  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.641204  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.641216  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.641406  1 14 value_at() begin _json_buffer=<{
    "0" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.641417  1 14 value_at() begin index=<0>
09-16 14:14:02.641435  1 14 value_at() json_buffer=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.641714  1 14 value_at() new child value=array(...)
09-16 14:14:02.641936  1  2 insertChild() begin _json_buffer=<{
    "name" : "alias01", 
    "assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.641948  1  2 insertChild() args  newChild=<{
    "removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.641954  1  2 insertChild() args  path=<removed>
09-16 14:14:02.642335  1  4 insertChild() new child value=std::string(Mon Feb  8 14:00:30 2016)
09-16 14:14:02.642349  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:02.642499  1  4 insertChild() recurse() args childValue=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.642522  1  4 insertChild() found child value=std::string(Mon Feb  8 14:00:30 2016)
09-16 14:14:02.642689  1  4 insertChild() resultDocument=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.642807  1  4 insertChild() insertChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.642818  1  4 insertChild() Insert succeeded.
09-16 14:14:02.642857  1 10 _makeHistoryAlias() historyAlias<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.642908  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.642920  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "alias01", 
        "assigned" : "Mon Feb  8 14:00:30 2016", 
        "removed" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.642926  1 13 appendChild() args  path=<aliases.history>
09-16 14:14:02.643243  1  4 appendChild() new child value=object(...)
09-16 14:14:02.643259  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.643267  1  5 findChild() args  path=<aliases.history>
09-16 14:14:02.644980  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.646263  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.646279  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.646607  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:14:02.646624  1  5 findChild() found child value=array(...)
09-16 14:14:02.646736  1  5 findChild() resultDocument=<{
"aliases.history" : [

]
}>
09-16 14:14:02.646746  1  5 findChild() Find succeeded.
09-16 14:14:02.647181  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.647344  1  3 appendChild() newChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.647414  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016", 
            "removed" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.647430  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.647442  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016", 
            "removed" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.647448  1  4 replaceChild() args  path=<aliases.history>
09-16 14:14:02.649446  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.649464  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.651034  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.651051  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.651372  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:14:02.651392  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.652831  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.652953  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.652962  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.653108  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.653119  1 13 appendChild() args  child=<{
    "payload" : {
        "removeAlias" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.653124  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:14:02.653324  1  4 appendChild() new child value=object(...)
09-16 14:14:02.653337  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.653344  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:14:02.655233  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.656603  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.656618  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.656864  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.656883  1  5 findChild() found child value=array(...)
09-16 14:14:02.657050  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.657060  1  5 findChild() Find succeeded.
09-16 14:14:02.657549  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.657652  1  3 appendChild() newChild=<{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.657704  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.657715  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.657721  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.657726  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:14:02.659831  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.659844  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.661196  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.661212  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.661465  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.661488  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.662907  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.663085  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.663096  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.663183  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.663196  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.667224  1 10 matches() JSON buffers are equal.
Running test:<removeAlias>
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_removeAlias_005_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_removeAlias_005_t" time elapsed: 00:00:00
----------------------------------------------------------

17/137 Testing: JSONDocumentBuilder_addToGlobalConfig_006_t
17/137 Test: JSONDocumentBuilder_addToGlobalConfig_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/JSONDocumentBuilder_addToGlobalConfig_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/test006.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/globalconfig.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test006.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/JSONDocumentBuilder_addToGlobalConfig_006_t.d
"JSONDocumentBuilder_addToGlobalConfig_006_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.707352  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.707476  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.709084  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.709098  1  5 findChild() args  path=<operation>
09-16 14:14:02.713783  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.718232  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:14:02.718298  1  5 findChild() found child value=std::string(addToGlobalConfig)
09-16 14:14:02.718503  1  5 findChild() resultDocument=<{
"operation" : "addToGlobalConfig"
}>
09-16 14:14:02.718512  1  5 findChild() Find succeeded.
09-16 14:14:02.720548  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.720559  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.720953  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.721142  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:14:02.721157  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.721248  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.721256  1  5 findChild() Find succeeded.
09-16 14:14:02.722875  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.722886  1  5 findChild() args  path=<delta>
09-16 14:14:02.723200  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.723384  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:14:02.723403  1  5 findChild() found child value=std::string(globalconfig.json)
09-16 14:14:02.723493  1  5 findChild() resultDocument=<{
"delta" : "globalconfig.json"
}>
09-16 14:14:02.723502  1  5 findChild() Find succeeded.
09-16 14:14:02.724746  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.724755  1  5 findChild() args  path=<end-state>
09-16 14:14:02.725066  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.725248  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:14:02.725263  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.725351  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.725359  1  5 findChild() Find succeeded.
09-16 14:14:02.726875  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.726893  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.727299  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.727528  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:14:02.727589  1  5 findChild() found child value=int(1)
09-16 14:14:02.727681  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.727689  1  5 findChild() Find succeeded.
09-16 14:14:02.728864  1  5 addToGlobalConfig() args  globalconfig=<{
    "configurations" : "globalconfig01"
}>
09-16 14:14:02.730110  1 10 _makeaddToGlobalConfig() globalConfig<{"name":"globalconfig01","assigned":"Mon Feb  8 14:00:30 2016"}>
09-16 14:14:02.730190  1 13 appendChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.730201  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "globalconfig01", 
        "assigned" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.730206  1 13 appendChild() args  path=<configurations>
09-16 14:14:02.730545  1  4 appendChild() new child value=object(...)
09-16 14:14:02.730559  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.730565  1  5 findChild() args  path=<configurations>
09-16 14:14:02.732795  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.734690  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.734713  1  5 findChild() found child value=array(...)
09-16 14:14:02.734885  1  5 findChild() resultDocument=<{
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.734894  1  5 findChild() Find succeeded.
09-16 14:14:02.735433  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.735545  1  3 appendChild() newChild=<{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.735593  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.735606  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.735613  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.735618  1  4 replaceChild() args  path=<configurations>
09-16 14:14:02.737609  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.737625  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.738855  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.738908  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.740192  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.740372  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.740386  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.740531  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.740540  1 13 appendChild() args  child=<{
    "payload" : {
        "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.740544  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:14:02.740713  1  4 appendChild() new child value=object(...)
09-16 14:14:02.740723  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.740729  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:14:02.742414  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.743713  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.743725  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.743983  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.744000  1  5 findChild() found child value=array(...)
09-16 14:14:02.744196  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.744205  1  5 findChild() Find succeeded.
09-16 14:14:02.744745  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.744846  1  3 appendChild() newChild=<{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.744892  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.744900  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.744905  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.744918  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:14:02.746895  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.746905  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.748164  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.748177  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.748436  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.748454  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.749768  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.749965  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.749975  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.750063  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.750072  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.753808  1 10 matches() JSON buffers are equal.
Running test:<addToGlobalConfig>
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_addToGlobalConfig_006_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_addToGlobalConfig_006_t" time elapsed: 00:00:00
----------------------------------------------------------

18/137 Testing: JSONDocumentBuilder_setVersion_007_t
18/137 Test: JSONDocumentBuilder_setVersion_007_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/JSONDocumentBuilder_setVersion_007_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/test007.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/version.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test007.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/JSONDocumentBuilder_setVersion_007_t.d
"JSONDocumentBuilder_setVersion_007_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.791132  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.791240  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.792503  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.792514  1  5 findChild() args  path=<operation>
09-16 14:14:02.796428  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.799084  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:14:02.799118  1  5 findChild() found child value=std::string(setVersion)
09-16 14:14:02.799238  1  5 findChild() resultDocument=<{
"operation" : "setVersion"
}>
09-16 14:14:02.799246  1  5 findChild() Find succeeded.
09-16 14:14:02.800841  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.800850  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.801120  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.801275  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:14:02.801288  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.801365  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.801372  1  5 findChild() Find succeeded.
09-16 14:14:02.802660  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.802669  1  5 findChild() args  path=<delta>
09-16 14:14:02.802927  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.803080  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:14:02.803092  1  5 findChild() found child value=std::string(version.json)
09-16 14:14:02.803166  1  5 findChild() resultDocument=<{
"delta" : "version.json"
}>
09-16 14:14:02.803173  1  5 findChild() Find succeeded.
09-16 14:14:02.804183  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.804191  1  5 findChild() args  path=<end-state>
09-16 14:14:02.804454  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.804605  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:14:02.804617  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.804692  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.804699  1  5 findChild() Find succeeded.
09-16 14:14:02.805886  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.805894  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.806152  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.806304  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:14:02.806334  1  5 findChild() found child value=int(1)
09-16 14:14:02.806416  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.806424  1  5 findChild() Find succeeded.
09-16 14:14:02.807332  1  6 setVersion() args  version=<{
    "version" : "updatedVersion"
}>
09-16 14:14:02.807375  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.807384  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "version" : "updatedVersion"
    }
}>
09-16 14:14:02.807387  1  4 replaceChild() args  path=<version>
09-16 14:14:02.809232  1  4 replaceChild() new child value=std::string(updatedVersion)
09-16 14:14:02.809244  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.810633  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.810670  1  4 replaceChild() found child value=std::string(version1)
09-16 14:14:02.811726  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.811916  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.811924  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.812108  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.812117  1 13 appendChild() args  child=<{
    "payload" : {
        "setVersion" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.812121  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:14:02.812338  1  4 appendChild() new child value=object(...)
09-16 14:14:02.812350  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.812355  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:14:02.813740  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.814853  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.814865  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.815082  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.815104  1  5 findChild() found child value=array(...)
09-16 14:14:02.815271  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.815279  1  5 findChild() Find succeeded.
09-16 14:14:02.815822  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.815900  1  3 appendChild() newChild=<{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.815940  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "setVersion" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.815948  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.815953  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "setVersion" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.815956  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:14:02.817592  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.817602  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.818623  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.818635  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.818854  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.818899  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.819962  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.820125  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.820133  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.820208  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.820217  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "updatedVersion", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "setVersion" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.823308  1 10 matches() JSON buffers are equal.
Running test:<setVersion>
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_setVersion_007_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_setVersion_007_t" time elapsed: 00:00:00
----------------------------------------------------------

19/137 Testing: JSONDocumentBuilder_markReadonly_008_t
19/137 Test: JSONDocumentBuilder_markReadonly_008_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/JSONDocumentBuilder_markReadonly_008_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/test008.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test008.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/JSONDocumentBuilder_markReadonly_008_t.d
"JSONDocumentBuilder_markReadonly_008_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.856886  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.856984  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.858149  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.858158  1  5 findChild() args  path=<operation>
09-16 14:14:02.862037  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.864484  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.864514  1  5 findChild() found child value=std::string(markReadonly)
09-16 14:14:02.864620  1  5 findChild() resultDocument=<{
"operation" : "markReadonly"
}>
09-16 14:14:02.864628  1  5 findChild() Find succeeded.
09-16 14:14:02.866126  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.866134  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.866352  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.866490  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.866503  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.866574  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.866581  1  5 findChild() Find succeeded.
09-16 14:14:02.868208  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.868216  1  5 findChild() args  path=<end-state>
09-16 14:14:02.868430  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.868556  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.868568  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.868637  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.868643  1  5 findChild() Find succeeded.
09-16 14:14:02.869750  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.869757  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.869964  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.870088  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.870115  1  5 findChild() found child value=int(1)
09-16 14:14:02.870186  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.870193  1  5 findChild() Find succeeded.
09-16 14:14:02.871129  1  6 markReadonly()
09-16 14:14:02.871186  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.871195  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isreadonly" : true
    }
}>
09-16 14:14:02.871199  1  4 replaceChild() args  path=<bookkeeping.isreadonly>
09-16 14:14:02.872997  1  4 replaceChild() new child value=bool(true)
09-16 14:14:02.873011  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.874359  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.874371  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.874578  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.874610  1  4 replaceChild() found child value=bool(false)
09-16 14:14:02.875577  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.875676  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.875684  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.875818  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.875826  1 13 appendChild() args  child=<{
    "payload" : {
        "markReadonly" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.875830  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:14:02.875962  1  4 appendChild() new child value=object(...)
09-16 14:14:02.875972  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.875977  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:14:02.877198  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.878145  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.878155  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.878357  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.878374  1  5 findChild() found child value=array(...)
09-16 14:14:02.878531  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.878538  1  5 findChild() Find succeeded.
09-16 14:14:02.879018  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.879089  1  3 appendChild() newChild=<{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.879127  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.879134  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.879138  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.879141  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:14:02.880686  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.880719  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.881786  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.881801  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.882010  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.882088  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.883121  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.883282  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.883290  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.883402  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.883411  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markReadonly" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.886400  1 10 matches() JSON buffers are equal.
Running test:<markReadonly>
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_markReadonly_008_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_markReadonly_008_t" time elapsed: 00:00:00
----------------------------------------------------------

20/137 Testing: JSONDocumentBuilder_markDeleted_009_t
20/137 Test: JSONDocumentBuilder_markDeleted_009_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/JSONDocumentBuilder_markDeleted_009_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/test009.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test009.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/JSONDocumentBuilder_markDeleted_009_t.d
"JSONDocumentBuilder_markDeleted_009_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:02.918025  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:02.918118  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:14:02.919246  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.919254  1  5 findChild() args  path=<operation>
09-16 14:14:02.922681  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.925012  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.925040  1  5 findChild() found child value=std::string(markDeleted)
09-16 14:14:02.925142  1  5 findChild() resultDocument=<{
"operation" : "markDeleted"
}>
09-16 14:14:02.925148  1  5 findChild() Find succeeded.
09-16 14:14:02.926601  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.926609  1  5 findChild() args  path=<begin-state>
09-16 14:14:02.926816  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.926937  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.926948  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:14:02.927016  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:14:02.927022  1  5 findChild() Find succeeded.
09-16 14:14:02.928168  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.928175  1  5 findChild() args  path=<end-state>
09-16 14:14:02.928371  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.928494  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.928505  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:14:02.928570  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:14:02.928576  1  5 findChild() Find succeeded.
09-16 14:14:02.929624  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:14:02.929631  1  5 findChild() args  path=<must-succeed>
09-16 14:14:02.929826  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.929963  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:14:02.929989  1  5 findChild() found child value=int(1)
09-16 14:14:02.930057  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:14:02.930064  1  5 findChild() Find succeeded.
09-16 14:14:02.930933  1  7 markDeleted()
09-16 14:14:02.930986  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.930994  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isdeleted" : true
    }
}>
09-16 14:14:02.930998  1  4 replaceChild() args  path=<bookkeeping.isdeleted>
09-16 14:14:02.932691  1  4 replaceChild() new child value=bool(true)
09-16 14:14:02.932704  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.934022  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.934033  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.934231  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.934262  1  4 replaceChild() found child value=bool(false)
09-16 14:14:02.935181  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.935265  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.935272  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.935373  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.935381  1 13 appendChild() args  child=<{
    "payload" : {
        "markDeleted" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.935384  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:14:02.935515  1  4 appendChild() new child value=object(...)
09-16 14:14:02.935526  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.935530  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:14:02.936714  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.937653  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.937663  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.937926  1  5 findChild() recurse() args currentView=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.937952  1  5 findChild() found child value=array(...)
09-16 14:14:02.938133  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.938141  1  5 findChild() Find succeeded.
09-16 14:14:02.938617  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.938688  1  3 appendChild() newChild=<{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.938726  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.938732  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.938736  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.938739  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:14:02.940234  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.940244  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.941211  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.941221  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.941447  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.941482  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.942459  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.942614  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.942622  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.942711  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.942718  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isreadonly" : true
    }
}>
09-16 14:14:02.942721  1  4 replaceChild() args  path=<bookkeeping.isreadonly>
09-16 14:14:02.944187  1  4 replaceChild() new child value=bool(true)
09-16 14:14:02.944214  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.945291  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.945329  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.945614  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.945642  1  4 replaceChild() found child value=bool(false)
09-16 14:14:02.946669  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.946745  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.946752  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.946869  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.946876  1 13 appendChild() args  child=<{
    "payload" : {
        "markReadonly" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:14:02.946879  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:14:02.947044  1  4 appendChild() new child value=object(...)
09-16 14:14:02.947053  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.947057  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:14:02.948330  1  5 findChild() recurse() args currentDepth=1
09-16 14:14:02.949317  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.949328  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:02.949573  1  5 findChild() recurse() args currentView=<{
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.949587  1  5 findChild() found child value=array(...)
09-16 14:14:02.949773  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.949781  1  5 findChild() Find succeeded.
09-16 14:14:02.950310  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.950379  1  3 appendChild() newChild=<{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:14:02.950432  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.950440  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.950444  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:14:02.950447  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:14:02.951983  1  4 replaceChild() new child value=array(...)
09-16 14:14:02.951992  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:14:02.952950  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.952960  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:02.953193  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:14:02.953209  1  4 replaceChild() found child value=array(...)
09-16 14:14:02.954221  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.954414  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.954421  1  4 replaceChild() Replace succeeded.
09-16 14:14:02.954504  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:14:02.954512  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : true, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markDeleted" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markReadonly" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:14:02.957477  1 10 matches() JSON buffers are equal.
Running test:<markDeleted>
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_markDeleted_009_t" end time: Sep 16 14:14 CDT
"JSONDocumentBuilder_markDeleted_009_t" time elapsed: 00:00:00
----------------------------------------------------------

21/137 Testing: Readjson_001_t
21/137 Test: Readjson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test001.json" "--skip-return-code" "247" "readjson_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_001_t.d
"Readjson_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
Initial:{
   "aliases" : {}
}
Converted:{
"aliases" : {

}
}
Returned:{
"aliases" : {

}
}
<end of output>
Test time =   0.03 sec
----------------------------------------------------------
Test Passed.
"Readjson_001_t" end time: Sep 16 14:14 CDT
"Readjson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

22/137 Testing: Readjson_002_t
22/137 Test: Readjson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test002.json" "--skip-return-code" "247" "readjson_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_002_t.d
"Readjson_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
Initial:{
   "aliases" : []
}
Converted:{
"aliases" : [

]
}
Returned:{
"aliases" : [

]
}
<end of output>
Test time =   0.03 sec
----------------------------------------------------------
Test Passed.
"Readjson_002_t" end time: Sep 16 14:14 CDT
"Readjson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

23/137 Testing: Readjson_003_t
23/137 Test: Readjson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test003.json" "--skip-return-code" "247" "readjson_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_003_t.d
"Readjson_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
Initial:{
        "document" : {
            "data" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "source" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "module_type" : {
                            "type" : "string", 
                            "comment" : "#Success 1  above satom", 
                            "annotation" : " "
                        }, 
                        "resume_after_timeout" : {
                            "type" : "bool", 
                            "comment" : " ", 
                            "annotation" : "#Success 3 right of satom"
                        }, 
                        "waiting_time" : {
                            "type" : "number", 
                            "comment" : " ", 
                            "annotation" : "//Success 2 right of satom"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find any", 
                    "query" : "not defined"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "json", 
            "rawdata" : "as"
        }, 
        "version" : "version", 
        "configurations" : [
            {
                "name" : "config-005", 
                "assigned" : "Mon Feb 29 21:57:32 2016"
            }
        ], 
        "aliases" : {
            "active" : [

            ], 
            "history" : [

            ]
        }, 
        "bookkeeping" : {
            "isdeleted" : false, 
            "isreadonly" : true, 
            "created" : "Tue Dec 29 18:19:25 2015", 
            "updates" : [
                {
                    "addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
                }, 
                {
                    "setVersion" : "Mon Feb 29 21:57:32 2016"
                }
            ]
        }
    }
Converted:{
"document" : {
"data" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "version",
"configurations" : [
{
"name" : "config-005",
"assigned" : "Mon Feb 29 21:57:32 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
},
{
"setVersion" : "Mon Feb 29 21:57:32 2016"
}
]
}
}
Returned:{
"document" : {
"data" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "version",
"configurations" : [
{
"name" : "config-005",
"assigned" : "Mon Feb 29 21:57:32 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
},
{
"setVersion" : "Mon Feb 29 21:57:32 2016"
}
]
}
}
<end of output>
Test time =   0.04 sec
----------------------------------------------------------
Test Passed.
"Readjson_003_t" end time: Sep 16 14:14 CDT
"Readjson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

24/137 Testing: Readjson_004_t
24/137 Test: Readjson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test004.json" "--skip-return-code" "247" "readjson_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_004_t.d
"Readjson_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
Initial:{ "document" : [ [1,"2"] , [2,"4"]]}
Converted:{
"document" : [
[
1,
"2"
],
[
2,
"4"
]
]
}
Returned:{
"document" : [
[
1,
"2"
],
[
2,
"4"
]
]
}
<end of output>
Test time =   0.04 sec
----------------------------------------------------------
Test Passed.
"Readjson_004_t" end time: Sep 16 14:14 CDT
"Readjson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

25/137 Testing: Readjson_005_t
25/137 Test: Readjson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test005.json" "--skip-return-code" "247" "readjson_t" "-c" "test005.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_005_t.d
"Readjson_005_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
Initial:{
        "document" : {
            "data" : {
                "NAME" : "CONFIGURATION_ALIASES", 
                "COMMENT" : "", 
                "AUTHOR" : "", 
                "CREATION_TIME" : 1465601490, 
                "NUM_OF_COLS" : 8, 
                "NUM_OF_ROWS" : 3, 
                "DATA_SET" : [
                    {
                        "CONFIGURATION_KEY_ID" : 3, 
                        "CONFIGURATION_KEY" : "3", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "Physics", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Physics", 
                        "AUTHOR" : "Uplegger"
                    }, 
                    {
                        "CONFIGURATION_KEY_ID" : 5, 
                        "CONFIGURATION_KEY" : "5", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "SCurve", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC", 
                        "AUTHOR" : "Uplegger"
                    }, 
                    {
                        "CONFIGURATION_KEY_ID" : 6, 
                        "CONFIGURATION_KEY" : "6", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "SCurve_Default_1x1", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC", 
                        "AUTHOR" : "Uplegger"
                    }
                ]
            }, 
            "metadata" : {
                "comments" : {
                    "empty" : "empty"
                }
            }, 
            "search" : [
                {
                    "name" : "find any", 
                    "query" : "not defined"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "json", 
            "rawdata" : "as"
        }, 
        "version" : "0", 
        "configurations" : [
            {
                "name" : "notprovided", 
                "assigned" : "Fri Jun 10 18:31:30 2016"
            }
        ], 
        "aliases" : {
            "active" : [

            ], 
            "history" : [

            ]
        }, 
        "changelog" : "empty", 
        "bookkeeping" : {
            "isdeleted" : false, 
            "isreadonly" : true, 
            "created" : "Tue Dec 29 18:19:25 2015", 
            "updates" : [
                {
                    "addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
                }, 
                {
                    "setVersion" : "Fri Jun 10 18:31:30 2016"
                }, 
                {
                    "setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
                }
            ]
        }, 
        "configurable_entity" : {
            "name" : "CMSROOT"
        }, 
        "_id" : {
            "_oid" : "130869f2a1aa48b0acb3ac80"
        }
    }
Converted:{
"document" : {
"data" : {
"NAME" : "CONFIGURATION_ALIASES",
"COMMENT" : "",
"AUTHOR" : "",
"CREATION_TIME" : 1465601490,
"NUM_OF_COLS" : 8,
"NUM_OF_ROWS" : 3,
"DATA_SET" : [
{
"CONFIGURATION_KEY_ID" : 3,
"CONFIGURATION_KEY" : "3",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "Physics",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Physics",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 5,
"CONFIGURATION_KEY" : "5",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 6,
"CONFIGURATION_KEY" : "6",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve_Default_1x1",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
}
]
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "0",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Jun 10 18:31:30 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
},
{
"setVersion" : "Fri Jun 10 18:31:30 2016"
},
{
"setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
}
]
},
"configurable_entity" : {
"name" : "CMSROOT"
},
"_id" : {
"_oid" : "130869f2a1aa48b0acb3ac80"
}
}
Returned:{
"document" : {
"data" : {
"NAME" : "CONFIGURATION_ALIASES",
"COMMENT" : "",
"AUTHOR" : "",
"CREATION_TIME" : 1465601490,
"NUM_OF_COLS" : 8,
"NUM_OF_ROWS" : 3,
"DATA_SET" : [
{
"CONFIGURATION_KEY_ID" : 3,
"CONFIGURATION_KEY" : "3",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "Physics",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Physics",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 5,
"CONFIGURATION_KEY" : "5",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 6,
"CONFIGURATION_KEY" : "6",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve_Default_1x1",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
}
]
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "0",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Jun 10 18:31:30 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
},
{
"setVersion" : "Fri Jun 10 18:31:30 2016"
},
{
"setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
}
]
},
"configurable_entity" : {
"name" : "CMSROOT"
},
"_id" : {
"_oid" : "130869f2a1aa48b0acb3ac80"
}
}
<end of output>
Test time =   0.05 sec
----------------------------------------------------------
Test Passed.
"Readjson_005_t" end time: Sep 16 14:14 CDT
"Readjson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

26/137 Testing: Readjson_006_t
26/137 Test: Readjson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test006.json" "--skip-return-code" "247" "readjson_t" "-c" "test006.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_006_t.d
"Readjson_006_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
Initial:	{
		"SUPERVISOR_INSTANCE": 1,
		"AGGREGATOR_ID": "",
		"STATUS": "",
		"CONFIGURATION_STRING": "A\"\" \"X\"\" Z"
	}
Converted:{
"SUPERVISOR_INSTANCE" : 1,
"AGGREGATOR_ID" : "",
"STATUS" : "",
"CONFIGURATION_STRING" : "A\"\" \"X\"\" Z"
}
Returned:{
"SUPERVISOR_INSTANCE" : 1,
"AGGREGATOR_ID" : "",
"STATUS" : "",
"CONFIGURATION_STRING" : "A\"\" \"X\"\" Z"
}
<end of output>
Test time =   0.03 sec
----------------------------------------------------------
Test Passed.
"Readjson_006_t" end time: Sep 16 14:14 CDT
"Readjson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

27/137 Testing: Convert_DBJson2GUIJson_001_t
27/137 Test: Convert_DBJson2GUIJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_001_t.d
"Convert_DBJson2GUIJson_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.215853  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.217933  1 10 json_db_to_gui() begin
09-16 14:14:03.224623  1 10 json_db_to_gui() read dbAST
09-16 14:14:03.224872  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.224944  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.225000  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.225056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.225164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.225207  1 11 json_db_to_gui() operator() switch OBJECT child name=<tt>
09-16 14:14:03.225245  1 13 json_db_to_gui() child args name <tt>
09-16 14:14:03.225255  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.225501  1 13 json_db_to_gui() metadata node was not found, name=<tt>
09-16 14:14:03.225529  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.225550  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.225561  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.225641  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.225715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.225778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.225868  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.225889  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.225898  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:03.225906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.225959  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.225971  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.225988  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:03.225997  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.226009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.226068  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(mm)
09-16 14:14:03.226103  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.226122  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.226132  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.226142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.226225  1 11 json_db_to_gui() operator() switch ARRAY child value=int(1)
09-16 14:14:03.226238  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.226246  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.226254  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.226262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.226281  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:03.226292  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.226300  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.226307  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.226314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.226335  1 11 json_db_to_gui() operator() switch ARRAY child value=object(...)
09-16 14:14:03.226347  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.226354  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.226362  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.226371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.226444  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:14:03.226496  1 10 json_db_to_gui() created gui_node
09-16 14:14:03.231257  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.05 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_001_t" end time: Sep 16 14:14 CDT
"Convert_DBJson2GUIJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

28/137 Testing: Convert_DBJson2GUIJson_002_t
28/137 Test: Convert_DBJson2GUIJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_002_t.d
"Convert_DBJson2GUIJson_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.267254  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.269855  1 10 json_db_to_gui() begin
09-16 14:14:03.284661  1 10 json_db_to_gui() read dbAST
09-16 14:14:03.284868  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.284935  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.284987  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.285041  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.285136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.285180  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:03.285223  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:03.285235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.285290  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:03.285305  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.285329  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.285342  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.285419  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.285489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.285549  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.285561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.285600  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.285672  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.285686  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.285697  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.285708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.285734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.285746  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:14:03.285761  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:14:03.285774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.285971  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:14:03.285988  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.286000  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.286011  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.286032  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.286054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.286079  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.286090  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286112  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.286135  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.286148  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.286159  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.286171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.286197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286210  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:14:03.286225  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:14:03.286238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286277  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:14:03.286292  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.286303  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.286316  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.286336  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.286357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.286381  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.286392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.286469  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.286481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286506  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.286517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286562  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:14:03.286578  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:14:03.286588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286628  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:14:03.286642  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.286653  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.286667  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.286688  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.286709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.286734  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.286745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.286789  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.286800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286823  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.286834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286851  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:14:03.286868  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:14:03.286880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.286920  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:14:03.286934  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.286945  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.286958  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.286979  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.287000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.287025  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.287036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287057  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.287080  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.287091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287114  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.287125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287143  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:03.287159  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:03.287172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287208  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:03.287221  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.287233  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.287245  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.287266  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.287289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.287313  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.287324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.287369  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.287380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287410  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.287422  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287441  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:14:03.287457  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:14:03.287470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287506  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:14:03.287520  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.287531  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.287544  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.287564  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.287585  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.287609  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.287620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.287680  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.287691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287714  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.287725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287743  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:14:03.287758  1 13 json_db_to_gui() child args name <use_art>
09-16 14:14:03.287770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287810  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:14:03.287824  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.287835  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.287848  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.287870  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.287890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.287914  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.287925  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.287946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.287968  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.287980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288002  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.288013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288030  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:14:03.288046  1 13 json_db_to_gui() child args name <verbose>
09-16 14:14:03.288059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288095  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:14:03.288110  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.288120  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.288133  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.288154  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.288174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.288199  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.288210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.288254  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.288265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288287  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.288298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288326  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.288337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288354  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:03.288370  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:03.288383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288423  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:03.288438  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.288450  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.288462  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.288484  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.288505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.288529  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.288539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.288583  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.288595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288617  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.288627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288645  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:14:03.288661  1 13 json_db_to_gui() child args name <metrics>
09-16 14:14:03.288672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288706  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:14:03.288721  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.288732  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.288745  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.288766  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.288786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.288810  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.288821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.288867  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.288879  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.288890  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.288902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.288927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.288939  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:14:03.288953  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:14:03.288966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289002  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:14:03.289016  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.289028  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.289038  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.289057  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.289079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.289103  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.289114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.289159  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.289172  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.289183  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.289196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.289223  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289235  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:14:03.289249  1 13 json_db_to_gui() child args name <fileName>
09-16 14:14:03.289260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289298  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:14:03.289312  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.289323  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.289336  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.289357  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.289377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.289408  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.289420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.289484  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.289495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289517  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.289528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289545  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:14:03.289560  1 13 json_db_to_gui() child args name <level>
09-16 14:14:03.289572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289608  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:14:03.289622  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.289632  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.289645  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.289665  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.289684  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.289708  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.289718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.289762  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.289772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289794  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.289805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289822  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:14:03.289837  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:14:03.289849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.289887  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:14:03.289900  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.289911  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.289924  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.289944  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.289963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.289987  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.289997  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.290040  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.290052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290073  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.290083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290100  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:14:03.290116  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:14:03.290127  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290163  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:14:03.290177  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.290188  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.290200  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.290221  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.290241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.290264  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.290274  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.290316  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.290328  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290349  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.290360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290382  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.290392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290419  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.290430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290451  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.290461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290476  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:14:03.290492  1 13 json_db_to_gui() child args name <outputs>
09-16 14:14:03.290505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290520  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:14:03.290534  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.290547  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.290558  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.290579  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.290599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.290622  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.290632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.290676  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.290687  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.290698  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.290710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.290734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290746  1 11 json_db_to_gui() operator() switch OBJECT child name=<rootMPIOutput>
09-16 14:14:03.290759  1 13 json_db_to_gui() child args name <rootMPIOutput>
09-16 14:14:03.290771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290805  1 13 json_db_to_gui() metadata node was found, name=<rootMPIOutput>
09-16 14:14:03.290819  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.290829  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.290841  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.290861  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.290881  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.290905  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.290915  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.290936  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.290958  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.290970  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.290980  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.290992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.291016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.291028  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:14:03.291041  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:14:03.291053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.291088  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:14:03.291102  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.291112  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.291124  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.291145  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.291165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.291188  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.291198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.291219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.291242  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.291253  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.291264  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.291276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.291301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.291312  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:14:03.291326  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:14:03.291338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.291374  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:14:03.291387  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.291402  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.291416  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.291437  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.291456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.291480  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.291490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.291511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.291567  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.291588  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.291601  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:03.291611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.291646  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.291657  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.291678  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:03.291689  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.291705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.291761  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:14:03.291796  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.291817  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.291829  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.291842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.291882  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:14:03.291895  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.291906  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.291918  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.291930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.291953  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.291963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.291986  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.291996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292012  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:03.292027  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:03.292038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292074  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:03.292088  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.292098  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.292111  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.292131  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.292151  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.292175  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.292185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.292228  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.292238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292260  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.292269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292291  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.292301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292322  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.292332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292348  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:14:03.292363  1 13 json_db_to_gui() child args name <physics>
09-16 14:14:03.292375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292389  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:14:03.292408  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.292421  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.292431  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.292451  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.292472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.292494  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.292504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.292548  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.292560  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.292571  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.292583  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.292607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292618  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:14:03.292632  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:14:03.292644  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292678  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:14:03.292692  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.292702  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.292715  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.292735  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.292755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.292779  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.292789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.292832  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.292844  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.292855  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.292867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.292891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292907  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.292920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.292938  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:14:03.292952  1 13 json_db_to_gui() child args name <filters>
09-16 14:14:03.292964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293001  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:14:03.293014  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.293025  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.293037  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.293057  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.293077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.293101  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.293111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293132  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.293155  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.293167  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.293177  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.293189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.293212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293224  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:14:03.293237  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:14:03.293248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293283  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:14:03.293297  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.293308  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.293320  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.293341  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.293360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.293383  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.293394  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.293445  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.293457  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.293467  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.293480  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.293503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293515  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:03.293528  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:03.293540  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293575  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:03.293589  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.293600  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.293612  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.293633  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.293653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.293676  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.293686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.293729  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.293739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293761  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.293771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293788  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:14:03.293803  1 13 json_db_to_gui() child args name <nth>
09-16 14:14:03.293815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293850  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:14:03.293864  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.293874  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.293887  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.293908  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.293927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.293950  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.293960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.293981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.294003  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.294014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294035  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.294045  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294067  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.294077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294093  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:14:03.294109  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:14:03.294122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294156  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:14:03.294170  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.294181  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.294193  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.294213  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.294233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.294256  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.294268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.294313  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.294325  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.294335  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.294346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.294371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294383  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:03.294401  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:03.294414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294450  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:03.294464  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.294474  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.294487  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.294507  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.294527  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.294550  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.294561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.294604  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.294614  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294636  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.294646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294663  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:14:03.294678  1 13 json_db_to_gui() child args name <nth>
09-16 14:14:03.294689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294725  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:14:03.294739  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.294749  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.294762  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.294782  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.294802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.294825  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.294836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.294878  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.294889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294910  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.294921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294942  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.294952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294973  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.294983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.294999  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:14:03.295015  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:14:03.295026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.295062  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:14:03.295076  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.295087  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.295100  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.295120  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.295140  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.295164  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.295174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.295195  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.295218  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.295230  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.295240  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:03.295252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.295280  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.295292  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.295302  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:03.295314  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.295329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.295346  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:14:03.295361  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.295374  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.295386  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.295403  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.295428  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.295438  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.295456  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:14:03.295471  1 13 json_db_to_gui() child args name <p1>
09-16 14:14:03.295483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.295517  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:14:03.295532  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.295545  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.295557  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.295577  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.295598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.295622  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.295633  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.295654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.295677  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.295688  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.295699  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:03.295711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.295738  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.295750  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.295760  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:03.295770  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.295785  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.295806  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.295818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.295837  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:14:03.295851  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:14:03.295862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.295897  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:14:03.295911  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.295922  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.295932  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.295953  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.295973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.295997  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.296007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.296029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.296051  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296063  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.296073  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:03.296085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.296113  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296124  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.296134  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:03.296144  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.296160  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.296176  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:03.296192  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296205  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.296217  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.296229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.296253  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.296263  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.296281  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:14:03.296296  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:14:03.296308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.296341  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:14:03.296355  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296366  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.296378  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.296403  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.296425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.296448  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.296459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.296480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.296503  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296515  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.296525  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:03.296537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.296564  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296576  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.296586  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:03.296597  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.296612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.296629  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:03.296644  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296657  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.296669  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.296682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.296705  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.296717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.296736  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:14:03.296750  1 13 json_db_to_gui() child args name <producers>
09-16 14:14:03.296762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.296797  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:14:03.296811  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296822  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.296834  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.296855  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.296875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.296898  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.296909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.296931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.296953  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.296964  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.296975  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.296987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.297013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297030  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.297043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297064  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.297074  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297091  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:14:03.297106  1 13 json_db_to_gui() child args name <process_name>
09-16 14:14:03.297119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297132  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:14:03.297147  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.297159  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.297171  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.297192  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.297212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.297236  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.297246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.297290  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.297300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297321  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.297331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297348  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:14:03.297364  1 13 json_db_to_gui() child args name <services>
09-16 14:14:03.297376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297390  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:14:03.297409  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.297422  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.297433  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.297453  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.297474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.297497  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.297507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.297553  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.297564  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.297575  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.297587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.297612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297624  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:14:03.297638  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:14:03.297650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297684  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:14:03.297698  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.297708  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.297721  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.297741  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.297761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.297785  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.297796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.297840  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.297851  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.297861  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.297873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.297898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297910  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:14:03.297923  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:14:03.297935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.297969  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:14:03.297983  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.297993  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.298006  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.298027  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.298047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.298070  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.298080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.298126  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.298138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298160  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.298170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298187  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:14:03.298203  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:14:03.298215  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298250  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:14:03.298264  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.298275  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.298287  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.298306  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.298326  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.298350  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.298360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.298409  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.298421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298442  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.298453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298471  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:03.298486  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:03.298498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298532  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:03.298546  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.298556  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.298569  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.298589  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.298609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.298632  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.298642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.298686  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.298697  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298718  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.298728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298745  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:03.298760  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:03.298772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298808  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:03.298822  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.298832  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.298845  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.298865  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.298885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.298908  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.298919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.298962  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.298972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.298994  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.299003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299020  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:14:03.299034  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:14:03.299043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299084  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:14:03.299098  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.299109  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.299121  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.299142  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.299163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.299187  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.299198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.299241  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.299252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299273  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.299283  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299305  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.299315  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299332  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:14:03.299347  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:14:03.299359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299393  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:14:03.299414  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.299433  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.299445  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.299465  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.299484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.299507  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.299517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.299560  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.299571  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.299581  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.299592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.299616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299627  1 11 json_db_to_gui() operator() switch OBJECT child name=<errorOnFailureToPut>
09-16 14:14:03.299640  1 13 json_db_to_gui() child args name <errorOnFailureToPut>
09-16 14:14:03.299652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299686  1 13 json_db_to_gui() metadata node was found, name=<errorOnFailureToPut>
09-16 14:14:03.299699  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.299710  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.299721  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.299741  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.299760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.299783  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.299793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.299835  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.299845  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299866  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.299876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299892  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:14:03.299907  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:14:03.299919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.299952  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:14:03.299966  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.299977  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.299987  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.300007  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.300027  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.300049  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.300060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.300101  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.300112  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300133  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.300142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300163  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.300173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300194  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.300204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300219  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:14:03.300234  1 13 json_db_to_gui() child args name <source>
09-16 14:14:03.300246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300260  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:14:03.300273  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.300285  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.300296  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.300315  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.300334  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.300356  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.300367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300386  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.300412  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.300425  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.300435  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.300447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.300472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300483  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type_map>
09-16 14:14:03.300497  1 13 json_db_to_gui() child args name <fragment_type_map>
09-16 14:14:03.300507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300540  1 13 json_db_to_gui() metadata node was found, name=<fragment_type_map>
09-16 14:14:03.300553  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.300563  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.300575  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.300595  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.300618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.300640  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.300651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.300671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.300693  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.300704  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.300714  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:03.300725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.300752  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.300763  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:03.300773  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:03.300782  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.300795  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.300816  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:03.300831  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.300843  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.300855  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.300868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.300889  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:03.300902  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.300915  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.300926  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.300938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.300959  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:03.300973  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.300984  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.300996  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.301010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.301030  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:03.301043  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.301055  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.301066  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.301078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.301098  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:03.301110  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.301123  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.301134  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.301146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.301166  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:03.301179  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.301191  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:03.301202  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.301214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:03.301239  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.301249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301267  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:03.301281  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:03.301293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301326  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:03.301340  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.301350  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.301362  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.301382  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.301405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.301429  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.301439  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.301480  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.301491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301512  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.301523  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301540  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:14:03.301555  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:14:03.301566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301598  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:14:03.301611  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.301621  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.301633  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.301652  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.301670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.301693  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.301703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.301744  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.301755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301775  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.301785  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301801  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:14:03.301816  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:14:03.301828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301860  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:14:03.301873  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.301883  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.301895  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.301914  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.301934  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.301956  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.301966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.301986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.302008  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.302018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.302038  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.302048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.302069  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.302079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.302146  1 10 json_db_to_gui() created gui_node
09-16 14:14:03.322009  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_002_t" end time: Sep 16 14:14 CDT
"Convert_DBJson2GUIJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

29/137 Testing: Convert_DBJson2GUIJson_003_t
29/137 Test: Convert_DBJson2GUIJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_003_t.d
"Convert_DBJson2GUIJson_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.383928  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.386221  1 10 json_db_to_gui() begin
09-16 14:14:03.392995  1 10 json_db_to_gui() read dbAST
09-16 14:14:03.393214  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.393270  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.393313  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.393361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.393448  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.393481  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:14:03.393509  1 13 json_db_to_gui() child args name <prolog>
09-16 14:14:03.393515  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.393556  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:14:03.393564  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.393578  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.393584  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.393647  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.393709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.393753  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.393759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.393783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.393842  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.393849  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.393855  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.393861  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.393873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.393880  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:14:03.393886  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:14:03.393892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394245  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:14:03.394256  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.394261  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.394267  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.394282  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.394301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394317  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.394322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394381  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.394387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394404  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.394413  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394474  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce_standard>
09-16 14:14:03.394483  1 13 json_db_to_gui() child args name <rce_standard>
09-16 14:14:03.394489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394512  1 13 json_db_to_gui() metadata node was found, name=<rce_standard>
09-16 14:14:03.394519  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.394524  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.394530  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.394539  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.394549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394559  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.394565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394585  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.394591  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.394596  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.394602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.394615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394622  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:14:03.394627  1 13 json_db_to_gui() child args name <metrics>
09-16 14:14:03.394633  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394654  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:14:03.394661  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.394666  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.394672  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.394680  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.394690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394701  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.394706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394725  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.394731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394739  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.394745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394752  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:03.394759  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:03.394763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394784  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:03.394791  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.394795  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.394801  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.394809  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.394818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394828  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.394833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394863  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.394869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394878  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.394883  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394890  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:14:03.394897  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:14:03.394901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394931  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:14:03.394938  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.394943  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.394948  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.394957  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.394966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.394975  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.394981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.394989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395000  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.395006  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.395011  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.395015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.395028  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395043  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:03.395049  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:03.395054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395084  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:03.395092  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.395096  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.395102  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.395110  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.395120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395130  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.395136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395154  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.395159  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395168  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.395173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395181  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:14:03.395197  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:14:03.395202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395221  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:14:03.395228  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.395233  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.395247  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.395256  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.395265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395275  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.395281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395299  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.395304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395313  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.395318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395333  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.395338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395347  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.395352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395359  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:03.395365  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:03.395369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395389  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:03.395401  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.395407  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.395411  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.395421  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.395431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395441  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.395446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395465  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.395470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395479  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.395484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395492  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:14:03.395499  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:14:03.395503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395523  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:14:03.395530  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.395545  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.395550  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.395559  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.395569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395580  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.395586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395605  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.395610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395618  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.395623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395631  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:14:03.395637  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:14:03.395641  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395660  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:14:03.395667  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.395671  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.395676  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.395694  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.395703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395713  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.395719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395727  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395737  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.395742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395751  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.395756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395763  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce_standard>
09-16 14:14:03.395770  1 13 json_db_to_gui() child args name <rce_standard>
09-16 14:14:03.395775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395793  1 13 json_db_to_gui() metadata node was found, name=<rce_standard>
09-16 14:14:03.395800  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.395804  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.395810  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.395818  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.395827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395837  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.395842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395864  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.395869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.395902  1 11 json_db_to_gui() missing annotation for string data; keyrce_standard
09-16 14:14:03.395912  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.395917  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395925  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard>
09-16 14:14:03.395932  1 13 json_db_to_gui() child args name <rce04_standard>
09-16 14:14:03.395936  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.395956  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard>
09-16 14:14:03.395963  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.395967  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.395973  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.395981  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.395991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396001  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.396006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396015  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396025  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.396030  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396038  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.396044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396051  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:14:03.396058  1 13 json_db_to_gui() child args name <rce04_standard.fragment_receiver.fragment_id>
09-16 14:14:03.396063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396081  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:14:03.396088  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.396093  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.396098  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.396106  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.396116  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396126  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.396131  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396140  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396149  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.396154  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396163  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.396169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396176  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard.fragment_receiver.board_id>
09-16 14:14:03.396183  1 13 json_db_to_gui() child args name <rce04_standard.fragment_receiver.board_id>
09-16 14:14:03.396187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396205  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard.fragment_receiver.board_id>
09-16 14:14:03.396212  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.396217  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.396222  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.396231  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.396240  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396250  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.396255  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396274  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.396279  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396288  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.396293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396302  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.396307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396314  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:14:03.396321  1 13 json_db_to_gui() child args name <main>
09-16 14:14:03.396327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396333  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:14:03.396339  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.396343  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.396349  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.396357  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.396366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396376  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.396381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396404  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.396411  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.396416  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.396422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.396433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396439  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard>
09-16 14:14:03.396445  1 13 json_db_to_gui() child args name <rce05_standard>
09-16 14:14:03.396451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396470  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard>
09-16 14:14:03.396477  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.396481  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.396487  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.396496  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.396505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396515  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.396521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396530  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396539  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.396545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396553  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.396558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396566  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:14:03.396573  1 13 json_db_to_gui() child args name <rce05_standard.fragment_receiver.fragment_id>
09-16 14:14:03.396577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396595  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:14:03.396603  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.396607  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.396613  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.396621  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.396631  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396641  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.396646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396655  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396673  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.396679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396687  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.396692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396700  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard.fragment_receiver.board_id>
09-16 14:14:03.396706  1 13 json_db_to_gui() child args name <rce05_standard.fragment_receiver.board_id>
09-16 14:14:03.396710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396728  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard.fragment_receiver.board_id>
09-16 14:14:03.396735  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.396739  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.396744  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.396752  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.396761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396780  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.396786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.396813  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.396819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396827  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.396832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396841  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.396846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.396871  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:14:03.396929  1 10 json_db_to_gui() created gui_node
09-16 14:14:03.404273  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_003_t" end time: Sep 16 14:14 CDT
"Convert_DBJson2GUIJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

30/137 Testing: Convert_DBJson2GUIJson_004_t
30/137 Test: Convert_DBJson2GUIJson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test004.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_004_t.d
"Convert_DBJson2GUIJson_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.441827  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.445978  1 10 json_db_to_gui() begin
09-16 14:14:03.468296  1 10 json_db_to_gui() read dbAST
09-16 14:14:03.468474  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.468539  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.468595  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.468665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.468743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.468775  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:14:03.468814  1 13 json_db_to_gui() child args name <prolog>
09-16 14:14:03.468821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.468869  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:14:03.468880  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.468896  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.468905  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.468973  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.469042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.469103  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.469112  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.469229  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.469238  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.469245  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.469253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.469271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469280  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:14:03.469290  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:14:03.469301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469503  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:14:03.469515  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.469522  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.469530  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.469553  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.469568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.469584  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.469592  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.469639  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.469646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469662  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.469669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469701  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:14:03.469712  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:14:03.469719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469745  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:14:03.469754  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.469762  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.469770  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.469784  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.469798  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.469813  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.469821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.469851  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.469859  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.469866  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.469873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.469890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469898  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:14:03.469907  1 13 json_db_to_gui() child args name <metrics>
09-16 14:14:03.469916  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.469941  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:14:03.469950  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.469957  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.469966  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.469979  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.469993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470009  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.470016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470046  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.470053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470068  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.470075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470087  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:03.470098  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:03.470106  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470130  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:03.470139  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.470146  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.470154  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.470168  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.470182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470198  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.470205  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470243  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.470250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470265  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.470272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470284  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:14:03.470294  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:14:03.470302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470326  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:14:03.470335  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.470343  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.470351  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.470365  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.470379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470399  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.470406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470437  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.470445  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.470452  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.470460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.470478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470486  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:03.470495  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:03.470502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470527  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:03.470536  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.470543  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.470551  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.470565  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.470579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470595  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.470602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470631  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.470639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470654  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.470660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470672  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:14:03.470683  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:14:03.470691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470715  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:14:03.470724  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.470731  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.470740  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.470753  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.470766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470782  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.470789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470819  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.470826  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470841  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.470848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470859  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:14:03.470870  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:14:03.470878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470902  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:14:03.470911  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.470918  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.470927  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.470941  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.470954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.470970  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.470977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.470992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471007  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.471014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471029  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.471036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471048  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:14:03.471058  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:14:03.471067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471090  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:14:03.471100  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.471107  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.471115  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.471129  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.471142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471158  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.471165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471194  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.471201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471216  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.471223  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471235  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:14:03.471245  1 13 json_db_to_gui() child args name <generator>
09-16 14:14:03.471253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471277  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:14:03.471286  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.471293  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.471302  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.471315  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.471329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471345  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.471352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471381  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.471388  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471414  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.471422  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471443  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:14:03.471455  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:14:03.471463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471489  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:14:03.471499  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.471507  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.471516  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.471529  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.471546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471562  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.471570  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471585  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471601  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.471609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471624  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.471632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471644  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:14:03.471655  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:14:03.471663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471688  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:14:03.471698  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.471706  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.471715  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.471729  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.471743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471760  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.471768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471798  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.471806  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471822  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.471829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471841  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:14:03.471853  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:14:03.471861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471887  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:14:03.471897  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.471904  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.471913  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.471926  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.471940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471957  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.471964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.471979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.471995  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.472003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472018  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.472026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472038  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:14:03.472049  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:14:03.472058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472085  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:14:03.472095  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.472103  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.472112  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.472126  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.472140  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472157  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.472165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472196  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.472204  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.472212  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.472220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.472238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472246  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:14:03.472256  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:14:03.472264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472290  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:14:03.472300  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.472307  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.472316  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.472331  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.472345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472361  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.472369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472384  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472404  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.472412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472428  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.472436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472448  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:14:03.472459  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:14:03.472468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472494  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:14:03.472503  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.472511  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.472520  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.472534  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.472548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472565  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.472572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472602  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.472610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472626  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.472633  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472645  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:14:03.472656  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:14:03.472664  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472690  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:14:03.472700  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.472707  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.472716  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.472730  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.472744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472761  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.472768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472799  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.472807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472822  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.472829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472842  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:14:03.472853  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:14:03.472861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472888  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:14:03.472898  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.472905  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.472914  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.472928  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.472942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472958  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.472966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.472981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.472996  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.473004  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473019  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.473027  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473039  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:14:03.473050  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:14:03.473058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473085  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:14:03.473095  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.473103  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.473110  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.473124  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.473139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473156  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.473163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473194  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.473202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473218  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.473225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473237  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:14:03.473248  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:14:03.473257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473283  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:14:03.473293  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.473300  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.473309  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.473324  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.473338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473354  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.473362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473393  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.473404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473420  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.473428  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473449  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.473456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473468  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:14:03.473479  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:14:03.473488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473514  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:14:03.473523  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.473531  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.473539  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.473553  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.473567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473584  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.473592  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473623  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.473631  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.473639  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.473647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.473665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473673  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:14:03.473683  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:14:03.473691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473717  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:14:03.473727  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.473734  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.473743  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.473758  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.473772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473789  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.473796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473827  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.473834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473850  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.473858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473870  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:14:03.473881  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:14:03.473890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.473921  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:14:03.473931  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.473938  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.473947  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.473961  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.473975  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.473992  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.474000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474031  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.474039  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.474047  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.474055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.474073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474081  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:14:03.474091  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:14:03.474100  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474126  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:14:03.474136  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.474143  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.474152  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.474166  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.474181  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474197  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.474205  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474235  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.474243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474259  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.474266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474279  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:14:03.474290  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:14:03.474298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474324  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:14:03.474334  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.474342  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.474351  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.474365  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.474380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474401  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.474409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474449  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.474456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474471  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.474478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474490  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:14:03.474501  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:14:03.474509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474535  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:14:03.474544  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.474552  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.474560  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.474574  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.474587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474604  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.474611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474641  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.474648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474663  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.474670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474685  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.474692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474704  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:14:03.474714  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:14:03.474722  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474747  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:14:03.474757  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.474764  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.474773  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.474787  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.474801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474817  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.474824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.474853  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.474861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474877  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.474884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474896  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:14:03.474906  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:14:03.474915  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.474940  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:14:03.474949  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.474957  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.474965  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.474979  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.474993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475009  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.475016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475046  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.475053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475068  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.475075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475087  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:14:03.475098  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:14:03.475106  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475131  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:14:03.475140  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.475147  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.475156  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.475169  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.475183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475199  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.475206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475235  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.475243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475257  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.475265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475277  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:14:03.475287  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:14:03.475295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475320  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:14:03.475330  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.475337  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.475345  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.475359  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.475375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475392  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.475404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475434  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.475442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475456  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.475464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475477  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:14:03.475487  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:14:03.475495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475527  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:14:03.475538  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.475545  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.475553  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.475566  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.475579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475593  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.475601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475629  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.475636  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475650  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.475658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475670  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:14:03.475680  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:14:03.475687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475719  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:14:03.475729  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.475737  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.475745  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.475758  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.475771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475785  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.475793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475821  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.475828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475842  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.475850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475861  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:14:03.475871  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:14:03.475878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475910  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:14:03.475921  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.475928  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.475936  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.475948  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.475961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.475976  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.475983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.475996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476011  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.476018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476033  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.476041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476052  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:14:03.476062  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:14:03.476070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476102  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:14:03.476112  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.476120  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.476127  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.476139  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.476152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476167  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.476174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476202  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.476210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476224  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.476231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476243  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:14:03.476253  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:14:03.476260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476292  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:14:03.476302  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.476309  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.476316  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.476328  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.476341  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476354  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.476361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476387  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.476397  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476411  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.476418  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476430  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:14:03.476439  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:14:03.476446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476478  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:14:03.476487  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.476495  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.476502  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.476516  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.476527  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476536  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.476541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476557  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.476561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476569  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.476573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476579  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:14:03.476585  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:14:03.476588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476607  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:14:03.476613  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.476618  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.476625  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.476639  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.476652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476662  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.476667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476685  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.476690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476697  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.476701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476708  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:14:03.476713  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:14:03.476717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476735  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:14:03.476742  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.476746  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.476750  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.476758  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.476765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476774  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.476778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476794  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.476798  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476806  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.476810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476816  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:14:03.476821  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:14:03.476825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476843  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:14:03.476849  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.476853  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.476857  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.476864  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.476872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476881  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.476885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476900  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.476905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476912  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.476916  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476922  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:14:03.476928  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:14:03.476931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476949  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:14:03.476955  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.476959  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.476963  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.476971  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.476978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.476986  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.476991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.476998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477006  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477018  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477029  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:14:03.477034  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:14:03.477038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477056  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:14:03.477062  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477066  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477070  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477077  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477093  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477098  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477113  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477125  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477129  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477135  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:14:03.477140  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:14:03.477144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477161  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:14:03.477168  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477172  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477176  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477183  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477199  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477218  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477223  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477230  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477240  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:14:03.477245  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:14:03.477249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477267  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:14:03.477273  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477277  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477281  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477288  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477304  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477324  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477336  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477346  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:14:03.477352  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:14:03.477355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477373  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:14:03.477379  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477383  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477387  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477397  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477415  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477435  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477444  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477448  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477456  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477466  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:14:03.477471  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:14:03.477474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477492  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:14:03.477498  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477502  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477506  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477513  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477528  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477547  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477559  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477569  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:14:03.477574  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:14:03.477577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477595  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:14:03.477601  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477605  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477609  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477616  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477632  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477636  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477651  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477663  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477673  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:14:03.477678  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:14:03.477682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477699  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:14:03.477705  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477708  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477712  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477719  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477734  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477738  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477752  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477764  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477773  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:14:03.477779  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:14:03.477782  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477799  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:14:03.477805  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477809  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477813  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477820  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477836  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477856  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477867  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477877  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:14:03.477882  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:14:03.477885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477902  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:14:03.477909  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.477913  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.477917  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.477923  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.477931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477940  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.477944  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.477959  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.477963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477970  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.477974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.477980  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:14:03.477985  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:14:03.477989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478006  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:14:03.478012  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478016  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478020  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478027  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478043  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478063  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478073  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478084  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:14:03.478089  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:14:03.478093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478110  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:14:03.478116  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478120  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478124  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478131  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478147  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478151  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478166  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478177  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478181  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478187  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:14:03.478192  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:14:03.478196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478213  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:14:03.478219  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478223  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478227  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478234  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478250  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478255  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478269  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478274  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478281  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478291  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:14:03.478296  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:14:03.478300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478317  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:14:03.478323  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478327  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478331  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478338  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478353  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478364  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478372  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478383  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478393  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:14:03.478401  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:14:03.478405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478423  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:14:03.478429  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478433  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478437  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478444  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478461  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478481  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478492  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478502  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:14:03.478507  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:14:03.478510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478528  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:14:03.478534  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478538  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478542  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478549  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478556  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478565  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478585  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478597  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478600  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478607  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:14:03.478612  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:14:03.478615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478633  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:14:03.478639  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478643  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478647  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478654  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478664  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478673  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478685  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478694  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478706  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478716  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:14:03.478721  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:14:03.478725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478743  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:14:03.478749  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478753  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478757  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478764  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478780  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478785  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478800  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478811  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478820  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:14:03.478826  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:14:03.478829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478847  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:14:03.478853  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478857  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478861  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478868  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478884  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478903  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.478908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478916  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.478919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478925  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:14:03.478931  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:14:03.478934  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.478952  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:14:03.478958  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.478962  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.478966  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.478973  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.478980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.478989  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.478994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479008  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479020  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479032  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:14:03.479037  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:14:03.479041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479059  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:14:03.479065  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479068  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479072  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.479079  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.479088  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479096  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.479101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479117  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479128  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479140  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:14:03.479145  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:14:03.479149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479166  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:14:03.479172  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479176  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479180  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.479187  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.479195  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479204  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.479208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479224  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479236  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479247  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:14:03.479253  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:14:03.479257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479274  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:14:03.479280  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479284  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479288  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.479295  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.479312  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479321  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.479325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479342  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479372  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479385  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:14:03.479405  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:14:03.479409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479427  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:14:03.479433  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479437  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479441  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.479448  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.479456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479464  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.479468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479488  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479501  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479511  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:14:03.479516  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:14:03.479520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479537  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:14:03.479543  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479547  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479551  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.479558  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.479566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479575  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.479580  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479595  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479606  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479618  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479630  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479641  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479645  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479650  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:03.479655  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:03.479659  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479674  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:03.479681  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479684  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479688  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.479696  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.479703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479712  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.479717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479731  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479736  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479743  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479747  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479753  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:14:03.479758  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:14:03.479762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479777  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:14:03.479783  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479787  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479791  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.479798  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.479805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479813  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.479818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479826  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479833  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479845  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479855  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:14:03.479860  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:14:03.479863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479879  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:14:03.479885  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479889  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479893  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.479900  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.479907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479915  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.479920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.479935  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.479940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479947  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.479951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479957  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:14:03.479962  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:14:03.479965  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.479980  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:14:03.479987  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.479990  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.479994  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480001  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480017  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480028  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480035  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480066  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:14:03.480074  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480085  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:14:03.480090  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:14:03.480094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480109  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:14:03.480115  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480119  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480123  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480130  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480146  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480151  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480166  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480178  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480181  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480188  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:03.480194  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:03.480198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480214  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:03.480220  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480224  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480228  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480235  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480250  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480270  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480282  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480286  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480292  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:03.480297  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:14:03.480301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480316  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:03.480322  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480326  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480330  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480337  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480344  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480353  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480364  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480373  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480386  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480399  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:03.480404  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:03.480408  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480424  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:03.480430  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480434  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480438  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480445  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480461  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480480  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480493  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480503  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.480508  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.480512  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480527  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.480533  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480537  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480541  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480548  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480564  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480583  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480595  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480605  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:14:03.480610  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:14:03.480613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480629  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:14:03.480635  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480638  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480643  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480649  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480665  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480677  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480684  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480696  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480706  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:03.480711  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:03.480715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480730  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:03.480736  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480740  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480744  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480751  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480767  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480786  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480798  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480808  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:03.480813  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:14:03.480816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480832  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:03.480838  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480842  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480846  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480853  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480868  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480887  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480898  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.480903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480909  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:03.480914  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:03.480918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480933  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:03.480939  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.480943  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.480947  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.480954  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.480961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480969  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.480974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.480988  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.480992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.480999  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481009  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.481014  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.481018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481033  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.481040  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481043  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481047  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481054  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481071  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481090  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481101  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481111  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:14:03.481116  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:14:03.481120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481135  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:14:03.481142  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481145  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481149  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481157  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481174  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481196  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481209  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481219  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:03.481224  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:03.481228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481244  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:03.481250  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481254  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481258  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481265  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481280  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481284  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481299  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481310  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481315  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481321  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:03.481326  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:14:03.481330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481345  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:03.481352  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481355  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481360  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481367  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481382  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481386  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481404  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481416  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481426  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:03.481432  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:03.481435  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481451  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:03.481457  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481461  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481465  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481472  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481479  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481488  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481507  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481512  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481519  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481523  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481529  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.481534  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.481538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481553  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.481559  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481563  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481567  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481574  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481589  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481608  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481620  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481630  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:14:03.481635  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:14:03.481638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481654  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:14:03.481660  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481663  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481667  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481674  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481689  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481693  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481708  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481720  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481730  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:03.481735  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:03.481739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481754  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:03.481760  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481764  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481768  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481775  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481782  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481791  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481811  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481822  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481826  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481832  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:03.481837  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:14:03.481841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481856  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:03.481863  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481866  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481870  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481877  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481893  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.481897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481904  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481912  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.481915  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481922  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.481928  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481935  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:03.481941  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:03.481945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.481961  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:03.481967  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.481971  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.481975  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.481982  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.481989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.481997  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482016  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482028  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482038  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.482044  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.482047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482063  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.482069  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482073  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482077  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482084  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482100  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482120  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482124  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482131  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482141  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:14:03.482147  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:14:03.482150  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482166  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:14:03.482172  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482176  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482180  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482187  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482202  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482207  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482221  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482233  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482243  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:03.482249  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:03.482252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482268  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:03.482274  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482278  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482282  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482289  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482296  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482303  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482315  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482322  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482334  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482344  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:03.482349  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:14:03.482353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482369  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:03.482375  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482379  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482383  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482389  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482399  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482407  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482427  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482439  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482449  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:03.482454  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:03.482457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482473  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:03.482479  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482483  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482487  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482494  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482510  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482515  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482530  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482541  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482551  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.482557  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.482560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482576  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.482581  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482585  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482589  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482596  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482603  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482611  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482629  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482639  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482650  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:14:03.482655  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:14:03.482658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482674  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:14:03.482680  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482684  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482688  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482695  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482711  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482716  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482730  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482744  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482755  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:03.482760  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:03.482764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482780  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:03.482786  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482790  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482794  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482801  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482817  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482820  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482835  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482839  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482847  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482857  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:03.482862  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:14:03.482865  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482881  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:03.482887  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482891  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482895  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.482902  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.482909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482916  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.482921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.482936  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.482939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482946  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.482952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482958  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:03.482963  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:03.482966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.482983  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:03.482989  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.482993  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.482997  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483003  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483019  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483041  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483045  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483052  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483062  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.483069  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.483072  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483088  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.483094  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483098  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483102  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483109  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483116  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483123  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483129  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483143  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483155  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483159  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483165  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:14:03.483170  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:14:03.483174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483189  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:14:03.483196  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483199  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483203  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483210  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483226  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483245  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483257  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483267  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:03.483272  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:03.483275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483291  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:03.483297  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483301  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483305  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483312  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483327  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483347  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483359  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483363  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483369  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:03.483374  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:14:03.483377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483394  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:03.483407  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483413  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483417  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483425  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483443  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483448  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483463  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483467  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483475  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483485  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:03.483490  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:03.483493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483510  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:03.483516  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483520  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483524  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483531  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483547  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483553  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483570  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483583  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483593  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.483598  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.483602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483618  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.483624  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483628  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483632  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483640  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483647  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483655  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483675  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483687  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483696  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:14:03.483702  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:14:03.483705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483721  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:14:03.483727  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483731  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483735  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483742  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483757  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483777  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483788  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483792  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483798  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:03.483803  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:03.483807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483823  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:03.483829  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483833  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483837  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483844  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483860  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483864  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483879  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483891  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.483895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483901  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:03.483908  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:14:03.483911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483927  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:03.483934  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.483937  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.483941  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.483948  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.483957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483965  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.483970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.483985  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.483989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.483997  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.484000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484007  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:03.484012  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:03.484015  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484031  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:03.484037  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.484041  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.484045  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.484052  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.484059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.484068  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.484073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.484087  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.484092  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484099  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.484103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484109  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.484115  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.484118  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484134  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:03.484140  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.484144  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.484148  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.484155  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.484162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.484171  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.484176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.484191  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:03.484195  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484203  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.484206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484214  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.484218  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484224  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:14:03.484229  1 13 json_db_to_gui() child args name <main>
09-16 14:14:03.484232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484238  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:14:03.484242  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.484246  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:03.484250  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.484257  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:03.484265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.484273  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:03.484278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:03.484294  1 11 json_db_to_gui() operator() begin
09-16 14:14:03.484299  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:03.484303  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:03.484307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.484317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484325  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:03.484329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:03.484375  1 10 json_db_to_gui() created gui_node
09-16 14:14:03.520914  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.17 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_004_t" end time: Sep 16 14:14 CDT
"Convert_DBJson2GUIJson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

31/137 Testing: Convert_GUIJson2DBJson_001_t
31/137 Test: Convert_GUIJson2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_001_t.d
"Convert_GUIJson2DBJson_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.611970  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.614001  1 14 json_gui_to_db() begin
09-16 14:14:03.629708  1 14 json_gui_to_db() read guiAST
09-16 14:14:03.629990  1 14 json_gui_to_db() created dbAST
09-16 14:14:03.630149  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.630207  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.630236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.630285  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.630391  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.630438  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.630464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630495  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630578  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.630583  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630590  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.630596  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.630601  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.630604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.630609  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.630616  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.630622  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:14:03.630626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630668  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:14:03.630673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630679  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.630684  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.630688  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.630692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.630697  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.630704  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.630740  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:14:03.630747  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:14:03.630752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630770  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630804  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.630811  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.630818  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_depth, value=int(2)
09-16 14:14:03.630823  1 16 json_node_t() makeChild() node_name=<event_queue_depth>
09-16 14:14:03.630827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630865  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.630872  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.630878  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_wait_time, value=int(1)
09-16 14:14:03.630884  1 16 json_node_t() makeChild() node_name=<event_queue_wait_time>
09-16 14:14:03.630889  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630897  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630925  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.630932  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.630938  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_events_per_bunch, value=int(1)
09-16 14:14:03.630944  1 16 json_node_t() makeChild() node_name=<expected_events_per_bunch>
09-16 14:14:03.630948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630956  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630979  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.630985  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.630991  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.630998  1 15 json_gui_to_db() operator() switch ARRAY child name= file_duration, value=int(0)
09-16 14:14:03.631003  1 16 json_node_t() makeChild() node_name=<file_duration>
09-16 14:14:03.631008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631032  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631045  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631051  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.631057  1 15 json_gui_to_db() operator() switch ARRAY child name= file_event_count, value=int(0)
09-16 14:14:03.631063  1 16 json_node_t() makeChild() node_name=<file_event_count>
09-16 14:14:03.631067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631104  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631111  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.631117  1 15 json_gui_to_db() operator() switch ARRAY child name= file_size_MB, value=int(8000)
09-16 14:14:03.631122  1 16 json_node_t() makeChild() node_name=<file_size_MB>
09-16 14:14:03.631126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631135  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631143  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631163  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631170  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.631176  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:14:03.631181  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:14:03.631186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631232  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631239  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.631246  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:14:03.631251  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:03.631256  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631294  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631301  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.631307  1 15 json_gui_to_db() operator() switch ARRAY child name= onmon_event_prescale, value=int(1)
09-16 14:14:03.631312  1 16 json_node_t() makeChild() node_name=<onmon_event_prescale>
09-16 14:14:03.631326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631352  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631364  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631371  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.631381  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:14:03.631387  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:14:03.631391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631454  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631461  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.631483  1 15 json_gui_to_db() operator() switch ARRAY child name= xmlrpc_client_list, value=std::string(;http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5)
09-16 14:14:03.631490  1 16 json_node_t() makeChild() node_name=<xmlrpc_client_list>
09-16 14:14:03.631494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631538  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631546  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.631552  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:03.631558  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.631563  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631579  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631600  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631607  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.631612  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.631616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631649  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631656  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.631661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631667  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.631673  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.631677  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.631681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.631686  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631692  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.631698  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:14:03.631702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631719  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631742  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:14:03.631747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631753  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.631759  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.631763  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.631767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.631771  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631778  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.631785  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/aggregator/agg_%UID%_metrics.log)
09-16 14:14:03.631790  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:14:03.631795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631832  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631838  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.631844  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:14:03.631850  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:14:03.631855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631892  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631899  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.631905  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:14:03.631911  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:14:03.631916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631946  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631952  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.631959  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.631964  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:14:03.631969  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:14:03.631974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631990  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.631997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632012  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632019  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.632025  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:03.632029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632069  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:03.632074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632080  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.632085  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.632089  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.632094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.632100  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632107  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.632112  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:03.632117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632150  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632157  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:03.632162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632169  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.632174  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.632178  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.632182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.632187  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632194  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.632199  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:03.632203  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632243  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:03.632248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632254  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.632260  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.632264  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.632268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.632274  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632281  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.632286  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:03.632291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632308  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632331  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:03.632335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632342  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.632347  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.632351  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.632355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.632360  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632367  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.632372  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:03.632377  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632394  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632405  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632421  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:03.632426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632432  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.632438  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.632442  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.632446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.632450  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632458  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.632464  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:03.632469  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.632474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632491  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632512  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632519  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.632526  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:14:03.632531  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:03.632536  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632552  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632574  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632581  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.632586  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:03.632590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632630  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:03.632635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632641  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.632647  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.632651  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.632655  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.632660  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632667  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.632674  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:03.632679  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.632684  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632701  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632715  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632722  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632729  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.632735  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:14:03.632740  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:03.632744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632769  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632783  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.632790  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.632797  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:03.632802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632835  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:03.632841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632849  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.632859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633380  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.633388  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.633399  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.633404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.633414  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.633425  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.633436  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:14:03.633441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633455  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:14:03.633460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633529  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.633535  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.633540  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.633544  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.633549  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:14:03.633568  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.633597  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.633605  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.633612  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:03.633617  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633627  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:03.633633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633682  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.633688  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.633693  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.633697  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.633703  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:03.633708  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.633716  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.633723  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.633730  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:03.633736  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633746  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:03.633751  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633790  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633798  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.633804  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.633809  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.633812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.633819  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:03.633824  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.633831  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.633839  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.633845  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:03.633849  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633891  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:03.633896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633903  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.633908  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.633912  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.633917  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.633922  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.633930  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.633936  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:14:03.633940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633973  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633981  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:14:03.633986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.633993  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.633998  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.634002  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.634006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.634011  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634018  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.634025  1 15 json_gui_to_db() operator() switch ARRAY child name= instance_name, value=std::string(ArtdaqDemo)
09-16 14:14:03.634030  1 16 json_node_t() makeChild() node_name=<instance_name>
09-16 14:14:03.634035  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634052  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634073  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634080  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.634086  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(ArtdaqDemoBuildInfo)
09-16 14:14:03.634092  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.634096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634135  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634143  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.634149  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQAG)
09-16 14:14:03.634154  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:14:03.634159  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634196  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634203  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.634208  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:03.634212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634229  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634252  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:03.634257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634263  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.634269  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.634273  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.634277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.634282  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634288  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.634294  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:03.634298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634338  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:03.634343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634349  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.634355  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.634359  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.634363  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.634367  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634374  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.634390  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:03.634399  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.634405  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634433  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634454  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634461  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.634467  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:14:03.634473  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:14:03.634477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634515  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634522  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.634528  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:03.634532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634582  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:03.634587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634603  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.634608  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.634612  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.634617  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.634622  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634629  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.634636  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:14:03.634641  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:14:03.634645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634670  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634685  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634693  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.634699  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:03.634703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634744  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:03.634749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634756  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.634761  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.634765  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.634770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.634774  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.634781  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.634788  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonInput)
09-16 14:14:03.634793  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.634798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.634856  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:14:03.634915  1 14 json_gui_to_db() created db_node
09-16 14:14:03.642800  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_001_t" end time: Sep 16 14:14 CDT
"Convert_GUIJson2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

32/137 Testing: Convert_GUIJson2DBJson_002_t
32/137 Test: Convert_GUIJson2DBJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_002_t.d
"Convert_GUIJson2DBJson_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.678860  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.680369  1 14 json_gui_to_db() begin
09-16 14:14:03.689699  1 14 json_gui_to_db() read guiAST
09-16 14:14:03.689820  1 14 json_gui_to_db() created dbAST
09-16 14:14:03.689901  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.689943  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.689967  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.690010  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.690095  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.690135  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.690163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690285  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690301  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.690311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690326  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.690335  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.690345  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.690354  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.690363  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.690379  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.690390  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:03.690403  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690438  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690453  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690484  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:03.690494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690508  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.690518  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.690528  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.690536  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.690545  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.690560  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.690590  1 15 json_gui_to_db() operator() switch ARRAY child name= board_id, value=int(0)
09-16 14:14:03.690602  1 16 json_node_t() makeChild() node_name=<board_id>
09-16 14:14:03.690612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690630  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690701  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.690715  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.690727  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:14:03.690739  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:14:03.690749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690766  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690824  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.690838  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.690851  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:14:03.690862  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:14:03.690872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690889  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.690947  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.690962  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.690974  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_id, value=int(0)
09-16 14:14:03.690985  1 16 json_node_t() makeChild() node_name=<fragment_id>
09-16 14:14:03.690995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691070  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691084  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.691108  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(TOY1)
09-16 14:14:03.691119  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:14:03.691129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691193  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691205  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691219  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.691231  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(ToySimulator)
09-16 14:14:03.691242  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:14:03.691252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691327  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691341  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.691353  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:03.691364  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:03.691374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691412  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691435  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691452  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.691459  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(50)
09-16 14:14:03.691464  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:14:03.691469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691478  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691510  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691518  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.691525  1 15 json_gui_to_db() operator() switch ARRAY child name= nADCcounts, value=int(40)
09-16 14:14:03.691531  1 16 json_node_t() makeChild() node_name=<nADCcounts>
09-16 14:14:03.691536  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691576  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691584  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.691590  1 15 json_gui_to_db() operator() switch ARRAY child name= random_seed, value=int(9542)
09-16 14:14:03.691596  1 16 json_node_t() makeChild() node_name=<random_seed>
09-16 14:14:03.691602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691642  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691649  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.691656  1 15 json_gui_to_db() operator() switch ARRAY child name= sleep_on_stop_us, value=int(500000)
09-16 14:14:03.691662  1 16 json_node_t() makeChild() node_name=<sleep_on_stop_us>
09-16 14:14:03.691667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691676  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691706  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691714  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.691720  1 15 json_gui_to_db() operator() switch ARRAY child name= throttle_usecs, value=int(100000)
09-16 14:14:03.691725  1 16 json_node_t() makeChild() node_name=<throttle_usecs>
09-16 14:14:03.691730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691774  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691781  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.691788  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:03.691794  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.691800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691833  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691839  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691847  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.691853  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.691858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691901  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.691906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691913  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.691919  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.691924  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.691929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.691934  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.691942  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.691947  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:14:03.691952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691970  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691978  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.691994  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:14:03.692000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692007  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.692013  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.692017  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.692022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.692026  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.692033  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.692040  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/boardreader/br_%UID%_metrics.log)
09-16 14:14:03.692046  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:14:03.692051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692091  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.692098  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.692105  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:14:03.692110  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:14:03.692115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692153  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.692160  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.692166  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:14:03.692172  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:14:03.692178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692203  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692217  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.692224  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.692233  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:14:03.692239  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:14:03.692244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.692420  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:14:03.692460  1 14 json_gui_to_db() created db_node
09-16 14:14:03.696817  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.05 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_002_t" end time: Sep 16 14:14 CDT
"Convert_GUIJson2DBJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

33/137 Testing: Convert_GUIJson2DBJson_003_t
33/137 Test: Convert_GUIJson2DBJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_003_t.d
"Convert_GUIJson2DBJson_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.726580  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.728067  1 14 json_gui_to_db() begin
09-16 14:14:03.737206  1 14 json_gui_to_db() read guiAST
09-16 14:14:03.737352  1 14 json_gui_to_db() created dbAST
09-16 14:14:03.737446  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.737493  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.737520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.737565  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.737658  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.737699  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.737727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.737760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.737792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.737817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.737849  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.737863  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.737872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.737887  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.737896  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.737905  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.737914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.737923  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.737936  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.737947  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:03.737957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.737972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.737988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738031  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:03.738041  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738056  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.738064  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.738073  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.738081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.738091  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.738104  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.738142  1 15 json_gui_to_db() operator() switch ARRAY child name= board_id, value=int(0)
09-16 14:14:03.738152  1 16 json_node_t() makeChild() node_name=<board_id>
09-16 14:14:03.738161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738243  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.738255  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.738267  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:14:03.738277  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:14:03.738286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738356  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.738369  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.738381  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:14:03.738391  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:14:03.738404  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738474  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.738488  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.738499  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_id, value=int(0)
09-16 14:14:03.738509  1 16 json_node_t() makeChild() node_name=<fragment_id>
09-16 14:14:03.738518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738563  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738587  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.738600  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.738625  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(TOY1)
09-16 14:14:03.738635  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:14:03.738644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738701  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738713  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.738726  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.738737  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(ToySimulator)
09-16 14:14:03.738747  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:14:03.738756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738827  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.738841  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.738853  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:03.738863  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:03.738873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738889  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.738944  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.738958  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.738969  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(50)
09-16 14:14:03.738978  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:14:03.738987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739057  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.739070  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.739081  1 15 json_gui_to_db() operator() switch ARRAY child name= nADCcounts, value=int(40)
09-16 14:14:03.739091  1 16 json_node_t() makeChild() node_name=<nADCcounts>
09-16 14:14:03.739101  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739146  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739159  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739170  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.739184  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.739195  1 15 json_gui_to_db() operator() switch ARRAY child name= random_seed, value=int(9542)
09-16 14:14:03.739205  1 16 json_node_t() makeChild() node_name=<random_seed>
09-16 14:14:03.739214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739284  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.739297  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.739308  1 15 json_gui_to_db() operator() switch ARRAY child name= sleep_on_stop_us, value=int(500000)
09-16 14:14:03.739318  1 16 json_node_t() makeChild() node_name=<sleep_on_stop_us>
09-16 14:14:03.739327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739400  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.739414  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.739425  1 15 json_gui_to_db() operator() switch ARRAY child name= throttle_usecs, value=int(100000)
09-16 14:14:03.739436  1 16 json_node_t() makeChild() node_name=<throttle_usecs>
09-16 14:14:03.739445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739476  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739491  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739522  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.739533  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.739545  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:03.739555  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.739565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739635  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.739648  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.739658  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.739668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739684  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739742  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.739750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739765  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.739774  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.739782  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.739790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.739798  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.739811  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.739821  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:14:03.739830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739861  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739904  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:14:03.739913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.739927  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.739935  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.739944  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.739952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.739962  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.739975  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.739986  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/boardreader/br_%UID%_metrics.log)
09-16 14:14:03.739996  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:14:03.740006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740074  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.740088  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.740099  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:14:03.740109  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:14:03.740118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740164  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740188  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.740201  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.740213  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:14:03.740223  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:14:03.740232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740301  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.740314  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.740330  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:14:03.740340  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:14:03.740349  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740411  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.740595  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:14:03.740641  1 14 json_gui_to_db() created db_node
09-16 14:14:03.744872  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.05 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_003_t" end time: Sep 16 14:14 CDT
"Convert_GUIJson2DBJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

34/137 Testing: Convert_GUIJson2DBJson_004_t
34/137 Test: Convert_GUIJson2DBJson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test004.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_004_t.d
"Convert_GUIJson2DBJson_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.775538  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.778091  1 14 json_gui_to_db() begin
09-16 14:14:03.802985  1 14 json_gui_to_db() read guiAST
09-16 14:14:03.803103  1 14 json_gui_to_db() created dbAST
09-16 14:14:03.803174  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.803209  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.803225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.803258  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.803328  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.803361  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.803380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803410  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803531  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.803537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803546  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.803555  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.803560  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.803565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.803573  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.803583  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.803590  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:03.803596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803651  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:03.803657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803666  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.803673  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.803678  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.803683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.803689  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.803699  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.803727  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:14:03.803736  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:14:03.803743  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803779  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803809  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.803819  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.803828  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:14:03.803835  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:14:03.803842  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803864  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803891  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.803901  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.803909  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:14:03.803916  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:14:03.803922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803954  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803963  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.803971  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.803980  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.803988  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:03.803995  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:03.804001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804023  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804050  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804060  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.804070  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:14:03.804078  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:14:03.804083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804094  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804132  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804142  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.804149  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:14:03.804155  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:14:03.804161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804201  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804209  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804218  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.804225  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:14:03.804231  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:14:03.804237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804292  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804302  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.804310  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:03.804318  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.804324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804367  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804374  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804384  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.804391  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.804400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804425  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804435  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804457  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.804463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804471  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.804479  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.804486  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.804492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.804498  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804507  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.804515  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:14:03.804520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804564  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804574  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:14:03.804580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804588  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.804596  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.804601  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.804607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.804612  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804621  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.804640  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:14:03.804649  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:14:03.804655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804720  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804730  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.804738  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:14:03.804745  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:14:03.804751  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804801  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804811  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.804819  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:14:03.804826  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:14:03.804833  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804883  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804892  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.804898  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:14:03.804904  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:14:03.804910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804960  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.804970  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.804977  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:03.804982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.804993  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805014  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805035  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:03.805042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805050  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.805058  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.805064  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.805070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.805076  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.805086  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.805093  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:14:03.805098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805151  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:14:03.805157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805166  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.805173  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.805178  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.805184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.805190  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.805199  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.805206  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:03.805212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805265  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:03.805271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805280  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.805287  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.805292  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.805298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.805304  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.805313  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.805322  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:03.805329  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805361  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:03.805369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805594  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.805603  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.805609  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.805615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.805622  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:14:03.805638  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.805664  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:14:03.805671  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.805681  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.805691  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.805699  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:14:03.805706  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.805713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805767  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.805776  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.805784  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:03.805789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805833  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805843  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:03.805849  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805858  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.805865  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.805871  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.805877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.805883  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.805893  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.805900  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:03.805906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805959  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:03.805965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.805973  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.805981  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.805986  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.805991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.805999  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806008  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.806016  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:03.806021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806032  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806065  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806074  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:03.806081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806089  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.806096  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.806101  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.806107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.806113  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806123  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.806130  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:03.806136  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806188  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:03.806195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806203  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.806210  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.806216  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.806221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.806227  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806237  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.806245  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:03.806252  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.806259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806293  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806310  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806319  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.806328  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:14:03.806335  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:03.806341  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806352  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806392  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806406  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.806414  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:03.806419  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806431  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806473  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:03.806479  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806488  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.806495  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.806502  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.806508  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.806514  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806523  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.806531  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:03.806539  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.806544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806594  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806604  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.806612  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:14:03.806619  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:03.806626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806636  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806666  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806676  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806685  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.806693  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:14:03.806700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806713  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:14:03.806719  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806778  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.806786  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.806792  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.806798  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.806805  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:14:03.806812  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.806821  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806831  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.806847  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:03.806853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806863  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:03.806872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806922  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.806928  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.806934  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.806938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.806944  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.806952  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.806959  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:03.806964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806975  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:03.806980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.806998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807024  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.807030  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.807035  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.807040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.807045  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:03.807051  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.807058  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807065  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.807072  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:03.807077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807087  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:03.807092  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807101  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807136  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.807142  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.807146  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.807151  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.807156  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:03.807162  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.807169  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807177  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.807183  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:03.807187  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807197  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807230  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:03.807235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807242  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.807248  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.807252  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.807256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.807263  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807270  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.807276  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:14:03.807282  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:14:03.807287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807327  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807335  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.807340  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:03.807344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807353  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807362  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807378  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807386  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:03.807391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807401  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.807407  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.807412  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.807417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.807421  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807429  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.807435  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:03.807439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807481  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:03.807486  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807493  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.807498  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.807502  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.807507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.807511  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807518  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.807524  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:14:03.807530  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:14:03.807534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807574  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807581  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.807588  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:14:03.807594  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:14:03.807599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807630  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807637  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807644  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.807650  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:03.807656  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.807660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807669  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807698  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807705  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.807711  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:14:03.807717  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:03.807722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807731  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807739  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807775  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807784  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.807792  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:14:03.807800  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:14:03.807805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807855  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807864  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.807871  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:03.807877  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807899  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807909  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807930  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:03.807936  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.807944  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.807951  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.807957  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.807962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.807968  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.807978  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.807985  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:14:03.807991  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:14:03.807997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808045  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.808053  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.808061  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:14:03.808068  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:14:03.808074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808126  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.808135  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.808142  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:03.808147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808169  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808200  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:03.808206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808214  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.808222  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.808227  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.808233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.808238  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.808248  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.808256  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:14:03.808262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808275  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:14:03.808282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808293  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808338  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.808346  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.808352  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.808358  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.808370  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.808384  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.808398  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.808405  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.808413  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.808419  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.808426  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.808433  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.808440  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.808446  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.808453  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.808459  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.808468  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.808479  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.808487  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:14:03.808495  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.808501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808513  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808535  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808552  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.808562  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.808569  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:14:03.808575  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:14:03.808581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808629  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.808638  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.808647  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:14:03.808654  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:14:03.808661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.808726  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:14:03.808791  1 14 json_gui_to_db() created db_node
09-16 14:14:03.819132  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_004_t" end time: Sep 16 14:14 CDT
"Convert_GUIJson2DBJson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

35/137 Testing: Convert_GUIJson2DBJson_005_t
35/137 Test: Convert_GUIJson2DBJson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test005.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test005.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test005.src.json" "-c" "test005.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_005_t.d
"Convert_GUIJson2DBJson_005_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.864240  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.866921  1 14 json_gui_to_db() begin
09-16 14:14:03.894835  1 14 json_gui_to_db() read guiAST
09-16 14:14:03.895166  1 14 json_gui_to_db() created dbAST
09-16 14:14:03.895312  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.895377  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.895436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.895515  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.895662  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.895717  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.895757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.895797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.895841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.895872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.895910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.895942  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:03.895950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.895961  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.895969  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.895976  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.895990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.895997  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896006  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.896014  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:03.896019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896040  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896049  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896093  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:03.896099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896107  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.896113  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.896118  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.896123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.896129  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896138  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.896184  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:14:03.896193  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:14:03.896198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896264  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896274  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.896282  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:14:03.896289  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:14:03.896296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896342  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896352  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.896364  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:14:03.896375  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:14:03.896381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896434  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896444  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.896452  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:03.896458  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:03.896464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896510  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896519  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.896531  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:14:03.896538  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:14:03.896543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896583  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896591  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896600  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.896607  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:14:03.896613  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:14:03.896619  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896665  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896675  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.896682  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:14:03.896688  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:14:03.896694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896750  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896761  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.896769  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:03.896776  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.896782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896822  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896830  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896841  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.896848  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.896853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896864  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896905  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.896911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896919  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.896926  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.896932  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.896937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.896942  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.896953  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.896960  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:14:03.896965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896976  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.896997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897017  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:14:03.897023  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897032  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.897039  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.897044  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.897049  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.897055  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.897065  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.897099  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:14:03.897108  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:14:03.897114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897165  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.897175  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.897183  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:14:03.897190  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:14:03.897196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897229  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897238  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897246  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.897255  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.897263  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:14:03.897270  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:14:03.897276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897323  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.897333  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.897340  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:14:03.897346  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:14:03.897352  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897362  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897382  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897405  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.897416  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.897423  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:03.897428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897451  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897481  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:03.897487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897495  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.897502  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.897509  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.897514  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.897520  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.897529  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.897536  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:14:03.897541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897552  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897590  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:14:03.897595  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897603  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.897621  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.897626  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.897632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.897637  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.897646  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.897653  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:03.897658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897705  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:03.897711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897719  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.897725  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.897730  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.897735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.897741  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.897750  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.897759  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:03.897765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897809  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:03.897816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.897837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898086  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.898094  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.898100  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.898106  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.898113  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:14:03.898132  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.898162  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:14:03.898168  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.898177  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898187  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.898195  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:14:03.898202  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.898208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898258  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898267  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.898273  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:03.898278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898318  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898326  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:03.898332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898340  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.898347  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.898351  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.898356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.898362  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898370  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.898377  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:03.898382  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898434  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898456  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:03.898462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898470  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.898477  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.898483  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.898489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.898496  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898506  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.898513  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:03.898518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898568  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:03.898574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898582  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.898589  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.898594  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.898599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.898604  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898614  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.898621  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:03.898626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898637  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898676  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:03.898682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898690  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.898697  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.898702  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.898707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.898713  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898722  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.898730  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:03.898736  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.898742  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898763  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898789  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898798  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.898807  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:14:03.898813  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:03.898819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898840  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898867  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898876  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.898883  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:03.898888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898909  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898937  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:03.898943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.898951  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.898958  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.898963  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.898968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.898974  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.898983  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.898991  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:03.898997  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.899003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899014  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899051  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899060  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.899068  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:14:03.899075  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:03.899081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899130  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899138  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.899146  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:14:03.899153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899166  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:14:03.899172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899193  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899227  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.899235  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.899241  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.899246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.899253  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:14:03.899259  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.899268  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899277  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.899285  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:03.899291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899303  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:03.899310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899363  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.899370  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.899376  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.899382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.899389  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899403  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.899412  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:03.899418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899430  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:03.899436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899458  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899490  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.899497  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.899503  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.899508  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.899515  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:03.899521  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.899530  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899538  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.899547  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:03.899553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899565  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:03.899571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899624  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.899631  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.899636  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.899642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.899649  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:03.899655  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.899663  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899673  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.899680  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:03.899685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899738  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:03.899744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899752  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.899759  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.899764  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.899769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.899777  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899786  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.899794  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:14:03.899801  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:14:03.899807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899854  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899864  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.899871  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:03.899876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899925  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:03.899931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899939  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.899946  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.899951  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.899956  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.899961  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.899970  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.899976  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:03.899982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.899993  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900033  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:03.900039  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900047  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.900054  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.900059  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.900064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.900070  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900079  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.900087  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:14:03.900093  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:14:03.900099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900146  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900155  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.900162  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:14:03.900169  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:14:03.900174  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900185  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900221  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900230  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.900238  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:03.900245  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.900251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900296  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900305  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.900312  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:14:03.900319  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:03.900324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900334  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900353  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900362  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900369  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900378  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.900386  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:14:03.900393  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:14:03.900407  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900468  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900478  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.900485  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:03.900490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900540  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:03.900546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900554  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.900561  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.900567  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.900573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.900579  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900588  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.900594  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:14:03.900600  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:14:03.900606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900638  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900676  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900686  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.900694  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:14:03.900701  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:14:03.900707  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900756  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900765  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.900771  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:03.900776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900787  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900826  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:03.900832  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900840  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.900846  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.900851  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.900856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.900862  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.900871  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:03.900878  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:14:03.900885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900898  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:14:03.900904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.900958  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:03.900965  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.900971  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.900976  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.900989  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.901006  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.901015  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.901021  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.901028  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.901034  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.901041  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.901047  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.901054  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.901060  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.901067  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:03.901073  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:03.901082  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.901091  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.901099  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:14:03.901106  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:03.901112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901135  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901161  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.901170  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:03.901177  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:14:03.901183  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:14:03.901189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901234  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.901244  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.901252  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:14:03.901259  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:14:03.901265  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.901344  1 14 json_gui_to_db() Found changelog in guiAST <Edit: comment>
09-16 14:14:03.901446  1 14 json_gui_to_db() created db_node
09-16 14:14:03.911974  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_005_t" end time: Sep 16 14:14 CDT
"Convert_GUIJson2DBJson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

36/137 Testing: Convert_GUIJson2DBJson_006_t
36/137 Test: Convert_GUIJson2DBJson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test006.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test006.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test006.src.json" "-c" "test006.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_006_t.d
"Convert_GUIJson2DBJson_006_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:03.953953  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:03.958140  1 14 json_gui_to_db() begin
09-16 14:14:03.997658  1 14 json_gui_to_db() read guiAST
09-16 14:14:03.997827  1 14 json_gui_to_db() created dbAST
09-16 14:14:03.997918  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.997963  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.997986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.998029  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998146  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.998183  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:14:03.998208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998315  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:14:03.998320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998327  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.998333  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.998337  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.998341  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.998346  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998353  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.998374  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:14:03.998381  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:14:03.998385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998460  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998468  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.998474  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:03.998478  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998520  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:03.998524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998531  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.998536  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.998541  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.998545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.998550  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998557  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.998563  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:14:03.998569  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:03.998573  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998612  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998619  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.998650  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:14:03.998657  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:03.998662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998670  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998679  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998700  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998708  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.998713  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:03.998717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998757  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:03.998762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998769  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.998774  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.998778  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.998783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.998787  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998794  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.998801  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:03.998807  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:03.998812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998820  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998850  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998857  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.998863  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:14:03.998869  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:14:03.998873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998890  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998911  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998918  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.998924  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:14:03.998929  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:14:03.998934  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.998971  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.998978  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.998985  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:14:03.998990  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:14:03.998995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999032  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999039  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.999045  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:14:03.999051  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:14:03.999056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999080  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999093  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999100  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:03.999107  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:14:03.999112  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:14:03.999117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999154  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999161  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999167  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:14:03.999173  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:14:03.999178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999209  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999215  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999222  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999228  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:14:03.999234  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:14:03.999238  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999246  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999275  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999282  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.999288  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:14:03.999292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999308  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999332  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:14:03.999337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999343  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.999349  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.999353  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.999358  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.999362  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999369  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999376  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:14:03.999381  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:14:03.999387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999423  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999429  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999437  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999443  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:14:03.999449  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:14:03.999453  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999479  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999486  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999492  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999499  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999505  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:14:03.999511  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:14:03.999516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999547  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999554  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999561  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999567  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:14:03.999571  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:14:03.999576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999613  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999620  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999636  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:14:03.999650  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:14:03.999664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999701  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999707  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999714  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:14:03.999719  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:14:03.999724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999731  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999766  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999774  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.999780  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:14:03.999784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999825  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:14:03.999829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999836  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.999841  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.999846  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:03.999850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:03.999855  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999862  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:03.999868  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:14:03.999874  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:14:03.999879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999917  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:03.999925  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:03.999930  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:14:03.999934  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999975  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:14:03.999980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:03.999986  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:03.999992  1 15 json_gui_to_db() operator() begin
09-16 14:14:03.999996  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.000000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.000005  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000012  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000018  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:14:04.000023  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:14:04.000028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000036  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000045  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000075  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000082  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000088  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:14:04.000094  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:14:04.000099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000135  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000142  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000148  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:14:04.000153  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:14:04.000158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000181  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000195  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000202  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000208  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:14:04.000213  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:14:04.000218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000241  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000254  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000260  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000266  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:14:04.000272  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:14:04.000276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000284  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000312  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000319  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000325  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:14:04.000330  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:14:04.000335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000342  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000371  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000378  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000384  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:14:04.000389  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:14:04.000394  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000405  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000434  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000441  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000447  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:14:04.000453  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:14:04.000457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000512  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000519  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000525  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:14:04.000531  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:14:04.000536  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000573  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000579  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000586  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:14:04.000591  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:14:04.000596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000604  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000633  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000640  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000646  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:14:04.000652  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:14:04.000657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000694  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000701  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000707  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:14:04.000712  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:14:04.000717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000754  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000761  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000767  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:14:04.000773  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:14:04.000777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000814  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000821  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000827  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:14:04.000833  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:14:04.000838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000875  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000881  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000888  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:14:04.000893  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:14:04.000898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000935  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.000942  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.000948  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:14:04.000954  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:14:04.000958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.000995  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001002  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001009  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:14:04.001014  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:14:04.001019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001035  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001050  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001056  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001063  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001069  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:14:04.001074  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:14:04.001079  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001116  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001123  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001129  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:14:04.001135  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:14:04.001139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001155  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001170  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001176  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001183  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001189  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:14:04.001195  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:14:04.001200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001215  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001236  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001243  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001249  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:14:04.001255  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:14:04.001260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001296  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001303  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001309  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:14:04.001315  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:14:04.001319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001357  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001364  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001370  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:14:04.001375  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:14:04.001380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001407  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001420  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001428  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001434  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:14:04.001440  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:14:04.001445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001476  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001482  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001489  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001495  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:14:04.001501  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:14:04.001505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001513  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001543  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001550  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001556  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:14:04.001561  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:14:04.001566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001603  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001610  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001616  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:14:04.001621  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:14:04.001626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001663  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001670  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001676  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:14:04.001681  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:14:04.001686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001723  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001730  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001736  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:14:04.001741  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:14:04.001746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001763  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001784  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001791  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001797  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:14:04.001802  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:14:04.001807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001844  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001851  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001857  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:14:04.001863  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:14:04.001867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001904  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001911  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001917  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:14:04.001923  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:14:04.001928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001964  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.001971  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.001977  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:14:04.001983  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:14:04.001987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.001995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002024  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002031  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002037  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:14:04.002042  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:14:04.002047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002084  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002091  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002097  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:14:04.002102  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:14:04.002107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002145  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002152  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002158  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:14:04.002163  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:14:04.002168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002205  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002212  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002218  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:14:04.002223  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:14:04.002228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002265  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002272  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002278  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:14:04.002283  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:14:04.002288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002325  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002332  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002338  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:14:04.002343  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:14:04.002348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002356  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002364  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002379  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002385  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002392  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002401  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:14:04.002407  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:14:04.002411  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002443  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002449  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002456  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002463  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:14:04.002468  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:14:04.002473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002512  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002519  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.002525  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:14:04.002531  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.002536  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002574  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002581  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.002587  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:14:04.002593  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:14:04.002597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002613  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002635  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002641  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.002647  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:14:04.002653  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:14:04.002658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002666  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002695  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002707  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.002713  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:14:04.002719  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:04.002724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002761  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002768  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.002774  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.002780  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:14:04.002785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002822  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002829  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002835  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:14:04.002840  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.002845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002883  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002890  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.002896  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:14:04.002902  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.002907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002944  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.002951  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.002957  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:14:04.002963  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.002967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.002998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003005  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003012  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003018  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:14:04.003024  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.003028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003045  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003066  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003073  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.003079  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.003084  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:14:04.003090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003126  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003133  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003139  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:14:04.003145  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.003150  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003166  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003180  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003187  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003194  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003200  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:14:04.003205  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.003210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003241  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003247  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003254  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.003260  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:14:04.003266  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.003270  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003307  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003314  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003321  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:14:04.003326  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.003331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003366  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003372  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.003377  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.003382  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:14:04.003387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003429  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003436  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003442  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:14:04.003448  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.003453  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003491  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003497  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003504  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:14:04.003509  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.003514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003552  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003559  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.003565  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:14:04.003571  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.003575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003613  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003620  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003627  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:14:04.003633  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.003637  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003675  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003682  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.003688  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.003693  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:14:04.003698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003706  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003735  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003742  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003748  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:14:04.003754  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.003758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003766  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003795  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003802  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003808  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:14:04.003814  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.003819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003835  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003856  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003863  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.003869  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:14:04.003874  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.003879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003916  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003923  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.003930  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:14:04.003935  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.003940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003971  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.003977  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.003984  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.003990  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.003996  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:14:04.004001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004009  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004032  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004038  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004045  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004051  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:14:04.004056  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.004061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004092  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004098  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004105  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004111  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:14:04.004117  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.004122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004146  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004159  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004166  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.004172  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:14:04.004178  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.004182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004220  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004226  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004233  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:14:04.004238  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.004243  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004281  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004288  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.004294  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.004299  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:14:04.004304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004341  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004348  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004354  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:14:04.004359  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.004364  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004405  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004412  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004418  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:14:04.004442  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.004447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004472  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004479  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004485  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004492  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.004498  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:14:04.004503  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.004508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004545  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004552  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004559  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:14:04.004564  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.004569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004593  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004607  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004617  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.004632  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.004641  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:14:04.004646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004705  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004712  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004719  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:14:04.004724  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.004730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004767  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004774  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004781  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:14:04.004786  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.004791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004840  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004847  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004854  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.004860  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:14:04.004866  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.004871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004908  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004915  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.004922  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:14:04.004927  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.004932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004956  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004963  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.004969  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.004977  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.004983  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.004988  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:14:04.004993  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005009  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005031  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.005038  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.005044  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:14:04.005049  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.005055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005079  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005092  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.005108  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.005114  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:14:04.005129  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.005134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005150  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005171  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.005178  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.005184  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:14:04.005190  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.005194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005232  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.005239  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.005245  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:14:04.005251  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.005255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005294  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.005301  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.005307  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:14:04.005311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005352  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:14:04.005357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.005364  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.005370  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.005375  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.005380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.005406  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:14:04.005502  1 14 json_gui_to_db() created db_node
09-16 14:14:04.022219  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.13 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_006_t" end time: Sep 16 14:14 CDT
"Convert_GUIJson2DBJson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

37/137 Testing: RoundConvert_DBJson2GUIJson_001_t
37/137 Test: RoundConvert_DBJson2GUIJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_001_t.d
"RoundConvert_DBJson2GUIJson_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:04.084697  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:04.086333  1 10 json_db_to_gui() begin
09-16 14:14:04.090603  1 10 json_db_to_gui() read dbAST
09-16 14:14:04.090851  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.090926  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.090990  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.091040  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.091191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.091230  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:04.091274  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:04.091280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.091335  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:04.091347  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.091365  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.091374  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.091476  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.091574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.091633  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.091642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.091685  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.091744  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.091753  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.091759  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.091767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.091782  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.091790  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:14:04.091798  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:14:04.091804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.091978  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:14:04.091991  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.091999  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.092005  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.092020  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.092041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.092064  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.092075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.092101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.092119  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.092126  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.092132  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.092140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.092155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.092162  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:14:04.092170  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:14:04.092176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.092204  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:14:04.092213  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.092219  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.092226  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.092238  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.092250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.092263  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.092269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.092280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.092314  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.092322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.092337  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.092345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.092384  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.092391  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.092408  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.092415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.092445  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:14:04.092480  1 10 json_db_to_gui() created gui_node
09-16 14:14:04.095310  1 10 json_db_to_gui() created gui_json
09-16 14:14:04.095338  1 14 json_gui_to_db() begin
09-16 14:14:04.096769  1 14 json_gui_to_db() read guiAST
09-16 14:14:04.096816  1 14 json_gui_to_db() created dbAST
09-16 14:14:04.096853  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.096881  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.096890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.096941  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.096963  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.096975  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.096984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097009  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097022  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097049  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097061  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.097067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097077  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.097084  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.097092  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.097097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.097104  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.097113  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.097120  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:04.097127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097183  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:04.097190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097199  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.097207  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.097213  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.097218  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.097224  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.097235  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.097265  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:14:04.097287  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:14:04.097294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097309  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.097385  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:14:04.097422  1 14 json_gui_to_db() created db_node
09-16 14:14:04.098009  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.04 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_001_t" end time: Sep 16 14:14 CDT
"RoundConvert_DBJson2GUIJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

38/137 Testing: RoundConvert_DBJson2GUIJson_002_t
38/137 Test: RoundConvert_DBJson2GUIJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_002_t.d
"RoundConvert_DBJson2GUIJson_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:04.123612  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:04.125324  1 10 json_db_to_gui() begin
09-16 14:14:04.135889  1 10 json_db_to_gui() read dbAST
09-16 14:14:04.136050  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.136097  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.136132  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.136168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.136235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136262  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:04.136287  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:04.136292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136328  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:04.136335  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.136348  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.136354  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.136409  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.136458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.136498  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.136503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.136575  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.136583  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.136588  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.136593  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.136604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136611  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:14:04.136617  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:14:04.136623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136780  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:14:04.136790  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.136795  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.136801  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.136811  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.136821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.136832  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.136837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.136857  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.136863  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.136868  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.136872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.136884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136890  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:14:04.136897  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:14:04.136902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136924  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:14:04.136931  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.136936  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.136942  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.136951  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.136961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.136971  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.136976  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.136985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137013  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.137019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137029  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137062  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:14:04.137070  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:14:04.137076  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137097  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:14:04.137104  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.137109  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.137114  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.137123  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.137133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137143  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.137148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137166  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.137172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137180  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137193  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:14:04.137200  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:14:04.137204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137223  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:14:04.137230  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.137235  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.137240  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.137249  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.137258  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137268  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.137273  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137291  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.137296  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137305  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137317  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:04.137324  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:04.137328  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137349  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:04.137356  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.137360  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.137366  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.137374  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.137383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137393  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.137403  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137421  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.137427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137435  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137440  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137447  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:14:04.137454  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:14:04.137459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137478  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:14:04.137485  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.137490  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.137495  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.137504  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.137513  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137529  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.137539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137577  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.137583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137592  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137605  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:14:04.137612  1 13 json_db_to_gui() child args name <use_art>
09-16 14:14:04.137616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137636  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:14:04.137644  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.137649  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.137654  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.137663  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.137673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137682  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.137688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137705  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.137711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137719  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137732  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:14:04.137738  1 13 json_db_to_gui() child args name <verbose>
09-16 14:14:04.137743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137763  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:14:04.137770  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.137775  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.137780  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.137789  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.137798  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137808  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.137813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137831  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.137836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137845  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137863  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137876  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:04.137883  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:04.137887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137906  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:04.137913  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.137918  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.137923  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.137932  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.137941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137951  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.137956  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137965  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.137974  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.137980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.137988  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.137993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138000  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:14:04.138007  1 13 json_db_to_gui() child args name <metrics>
09-16 14:14:04.138011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138030  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:14:04.138037  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138041  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.138047  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.138055  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.138065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138074  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.138079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138088  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138099  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138104  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.138109  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.138114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.138126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138132  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:14:04.138139  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:14:04.138144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138163  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:14:04.138170  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138175  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.138180  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.138188  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.138198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138208  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.138213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138232  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138238  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.138243  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.138247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.138259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138265  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:14:04.138271  1 13 json_db_to_gui() child args name <fileName>
09-16 14:14:04.138277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138297  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:14:04.138304  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138308  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.138314  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.138323  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.138332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138342  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.138348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138375  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.138380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138389  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.138398  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138407  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:14:04.138413  1 13 json_db_to_gui() child args name <level>
09-16 14:14:04.138418  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138438  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:14:04.138445  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138450  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.138455  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.138464  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.138474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138484  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.138489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138507  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.138512  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138520  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.138526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138533  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:14:04.138540  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:14:04.138544  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138564  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:14:04.138571  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138576  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.138581  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.138590  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.138599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138609  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.138614  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138632  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.138637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138646  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.138651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138658  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:14:04.138665  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:14:04.138669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138690  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:14:04.138697  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138701  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.138707  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.138715  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.138725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138734  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.138739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138757  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.138763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138771  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.138776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138786  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.138791  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138799  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.138804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138812  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.138818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138824  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:14:04.138831  1 13 json_db_to_gui() child args name <outputs>
09-16 14:14:04.138837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138842  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:14:04.138849  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138854  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.138859  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.138868  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.138877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138886  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.138892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.138911  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138916  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.138921  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.138925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.138937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138943  1 11 json_db_to_gui() operator() switch OBJECT child name=<netMonOutput>
09-16 14:14:04.138950  1 13 json_db_to_gui() child args name <netMonOutput>
09-16 14:14:04.138955  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.138974  1 13 json_db_to_gui() metadata node was found, name=<netMonOutput>
09-16 14:14:04.138981  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.138985  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.138991  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.138999  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.139009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139019  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.139024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139043  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139049  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.139053  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.139058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.139070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139076  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:14:04.139082  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:14:04.139087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139106  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:14:04.139113  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139118  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.139124  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.139132  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.139142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139152  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.139157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139166  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139176  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139182  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.139187  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.139191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.139203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139209  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:14:04.139215  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:14:04.139221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139241  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:14:04.139248  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139252  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.139257  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.139266  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.139276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139286  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.139291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139338  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139350  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.139356  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.139361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.139379  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139386  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.139400  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.139407  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.139415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.139455  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:14:04.139477  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139489  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.139495  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.139501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.139526  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:14:04.139534  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139538  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.139544  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.139548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.139558  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.139564  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139574  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.139580  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139586  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.139593  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.139597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139619  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.139626  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139631  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.139637  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.139646  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.139656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139666  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.139672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139690  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.139696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139704  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.139709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139718  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.139724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139732  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.139737  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139744  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:14:04.139750  1 13 json_db_to_gui() child args name <physics>
09-16 14:14:04.139756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139762  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:14:04.139768  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139773  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.139779  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.139787  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.139795  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139806  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.139811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139820  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139830  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139836  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.139841  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.139845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.139858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139864  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:14:04.139870  1 13 json_db_to_gui() child args name <filters>
09-16 14:14:04.139875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139894  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:14:04.139901  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139906  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.139911  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.139920  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.139930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139939  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.139945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139953  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.139964  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.139969  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.139974  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.139978  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.139989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.139995  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:14:04.140001  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:14:04.140006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140026  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:14:04.140033  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140037  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.140043  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.140052  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.140061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140071  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.140076  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140095  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140101  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.140106  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.140110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.140121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140127  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.140133  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.140138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140159  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.140166  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140170  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.140176  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.140184  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.140194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140204  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.140209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140218  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140227  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.140233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140241  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.140246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140254  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:14:04.140261  1 13 json_db_to_gui() child args name <nth>
09-16 14:14:04.140265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140286  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:14:04.140293  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140297  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.140303  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.140311  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.140321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140330  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.140336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140344  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140354  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.140359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140367  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.140373  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140382  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.140387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140397  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:14:04.140404  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:14:04.140410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140429  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:14:04.140436  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140441  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.140446  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.140455  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.140465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140474  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.140480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140499  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140505  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.140510  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.140514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.140526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140532  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.140539  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.140544  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140564  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.140571  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140575  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.140581  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.140590  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.140599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140609  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.140615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140632  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.140640  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140656  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.140662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140670  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:14:04.140678  1 13 json_db_to_gui() child args name <nth>
09-16 14:14:04.140682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140703  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:14:04.140710  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140715  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.140720  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.140729  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.140739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140749  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.140754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140773  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.140778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140786  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.140792  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140801  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.140806  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140814  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.140820  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140826  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:14:04.140833  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:14:04.140838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140856  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:14:04.140863  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140867  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.140873  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.140882  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.140891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140901  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.140906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.140915  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.140926  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140931  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.140937  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.140942  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.140955  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140961  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.140966  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.140970  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.140978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.140985  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(netMonOutput)
09-16 14:14:04.140992  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.140998  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.141002  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141008  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.141018  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.141024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141032  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:14:04.141039  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:14:04.141043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141063  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:14:04.141070  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141075  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.141081  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141089  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.141099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141109  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.141115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141134  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141140  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.141145  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.141149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.141163  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141169  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.141173  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.141178  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.141192  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:04.141199  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141205  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.141209  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.141225  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.141230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141238  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:14:04.141245  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:14:04.141249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141268  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:14:04.141275  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141280  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.141285  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141294  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.141304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141316  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.141322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141342  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141347  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.141352  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.141357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.141370  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141377  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.141381  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.141386  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.141404  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:04.141411  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141417  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.141422  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.141438  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.141443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141453  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.141458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141465  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:14:04.141472  1 13 json_db_to_gui() child args name <process_name>
09-16 14:14:04.141476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141482  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:14:04.141488  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141493  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.141499  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141507  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.141517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141527  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.141533  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141551  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.141556  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141565  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.141570  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141577  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:14:04.141584  1 13 json_db_to_gui() child args name <services>
09-16 14:14:04.141588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141594  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:14:04.141601  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141605  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.141610  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141619  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.141628  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141637  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.141643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141662  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141667  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.141672  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.141677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.141689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141695  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:14:04.141701  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:14:04.141706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141726  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:14:04.141733  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141738  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.141743  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141752  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.141761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141772  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.141777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141785  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141796  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141801  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.141806  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.141811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.141823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141829  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:14:04.141835  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:14:04.141840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141860  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:14:04.141867  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.141872  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.141877  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.141886  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.141896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141905  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.141911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.141929  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.141935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141943  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.141948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141957  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.141962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.141969  1 11 json_db_to_gui() operator() switch OBJECT child name=<user>
09-16 14:14:04.141976  1 13 json_db_to_gui() child args name <user>
09-16 14:14:04.141980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142000  1 13 json_db_to_gui() metadata node was found, name=<user>
09-16 14:14:04.142007  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142012  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.142017  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.142025  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.142035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142045  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.142050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142069  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142074  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.142079  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.142084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.142096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142102  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:14:04.142108  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:14:04.142113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142133  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:14:04.142140  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142145  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.142150  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.142159  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.142169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142179  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.142184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142203  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142209  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.142214  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.142218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.142230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142236  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:14:04.142242  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:14:04.142248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142268  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:14:04.142275  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142279  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.142285  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.142293  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.142303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142313  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.142318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142336  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.142342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142350  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.142355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142363  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:14:04.142370  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:14:04.142374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142393  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:14:04.142405  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142410  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.142415  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.142424  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.142434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142444  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.142449  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142471  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.142477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142485  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.142491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142498  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:04.142505  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:04.142509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142529  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:04.142536  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142541  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.142546  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.142555  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.142565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142575  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.142580  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142598  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.142603  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142611  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.142616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142624  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:04.142630  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:04.142635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142655  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:04.142662  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142667  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.142673  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.142681  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.142690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142700  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.142705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142714  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142723  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.142729  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142737  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.142742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142749  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:14:04.142756  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:14:04.142760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142780  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:14:04.142787  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142792  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.142797  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.142805  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.142815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142824  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.142828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142846  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.142850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142858  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.142863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142873  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.142878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142886  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.142891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142900  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.142905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142911  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:14:04.142918  1 13 json_db_to_gui() child args name <source>
09-16 14:14:04.142924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142930  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:14:04.142936  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.142941  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.142946  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.142955  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.142964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142974  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.142979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.142987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.142998  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.143004  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.143009  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.143013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.143025  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143031  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.143037  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.143043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143062  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.143069  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.143073  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.143079  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.143087  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.143097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.143107  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.143112  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.143130  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.143135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143144  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.143149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143156  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:14:04.143163  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:14:04.143167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143185  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:14:04.143192  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.143197  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.143203  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.143211  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.143221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.143231  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.143236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143244  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.143254  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.143259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143267  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.143272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143279  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:14:04.143286  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:14:04.143291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143310  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:14:04.143317  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.143321  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.143327  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.143335  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.143344  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.143354  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.143360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.143378  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.143383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143391  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.143400  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143410  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.143416  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.143439  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:14:04.143468  1 10 json_db_to_gui() created gui_node
09-16 14:14:04.158711  1 10 json_db_to_gui() created gui_json
09-16 14:14:04.158799  1 14 json_gui_to_db() begin
09-16 14:14:04.172740  1 14 json_gui_to_db() read guiAST
09-16 14:14:04.172780  1 14 json_gui_to_db() created dbAST
09-16 14:14:04.172794  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.172811  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.172818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.172831  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.172845  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.172854  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.172860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172901  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172910  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.172915  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172922  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.172929  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.172935  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.172939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.172945  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.172953  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.172959  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:04.172964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.172992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173002  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173010  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:04.173015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173023  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.173029  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.173033  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.173038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.173043  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173051  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.173075  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:14:04.173083  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:14:04.173088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173108  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173132  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173140  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.173147  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:14:04.173153  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:14:04.173159  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173200  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173208  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.173215  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:14:04.173220  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:14:04.173226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173267  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173274  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.173281  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:04.173287  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:04.173293  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173333  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173341  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.173351  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:14:04.173357  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:14:04.173361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173389  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173408  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173416  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.173422  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:14:04.173427  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:14:04.173432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173451  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173473  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173481  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.173487  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:14:04.173492  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:14:04.173498  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173540  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173548  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.173555  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:04.173562  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:04.173566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173608  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173616  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.173622  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:04.173626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173670  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:04.173676  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173683  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.173689  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.173694  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.173698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.173703  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173710  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.173716  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:14:04.173721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173731  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173766  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:14:04.173772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173779  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.173785  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.173789  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.173794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.173799  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173807  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.173814  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:14:04.173820  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:14:04.173825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173866  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173874  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.173881  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:14:04.173887  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:14:04.173893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173934  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.173942  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.173949  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:14:04.173954  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:14:04.173960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173977  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.173994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174019  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174027  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.174032  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:14:04.174038  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:14:04.174043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174086  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174093  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.174099  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:04.174104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174148  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:04.174154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174161  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.174167  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.174172  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.174176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.174181  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174188  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.174194  1 16 json_node_t() makeChild() node_name=<netMonOutput>
09-16 14:14:04.174199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174209  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174244  1 16 json_node_t() makeChild() node_name=<netMonOutput>
09-16 14:14:04.174249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174256  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.174263  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.174267  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.174272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.174276  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174283  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.174289  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:04.174294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174313  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174338  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:04.174343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174350  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.174357  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.174361  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.174365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.174370  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174378  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.174386  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:04.174391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174407  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:04.174414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174476  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.174482  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.174488  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.174493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.174498  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:14:04.174504  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.174510  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:14:04.174515  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.174523  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174531  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.174537  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonOutput)
09-16 14:14:04.174544  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.174549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174593  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174600  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.174606  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:04.174611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174637  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174654  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:04.174660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174667  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.174673  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.174677  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.174682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.174687  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174694  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.174700  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:04.174705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174723  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174731  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174748  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:04.174754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174760  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.174766  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.174771  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.174775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.174780  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174788  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.174794  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:04.174798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174842  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:04.174847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174854  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.174860  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.174864  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.174869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.174874  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174881  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.174888  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:04.174894  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.174899  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174908  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174926  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174940  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.174947  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.174954  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:14:04.174960  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:04.174965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.174999  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175006  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175014  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.175020  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:04.175024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175050  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175067  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:04.175072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175079  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.175085  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.175089  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.175094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.175099  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175106  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.175113  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:04.175119  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.175124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175159  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175165  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175173  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.175180  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:14:04.175186  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:04.175191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175224  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175232  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175240  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.175246  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:14:04.175252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175262  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:14:04.175267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175285  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175314  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.175320  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.175325  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.175330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.175335  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(netMonOutput)
09-16 14:14:04.175340  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.175348  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175356  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.175363  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:04.175369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175379  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:04.175384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175393  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175407  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175435  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.175442  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.175447  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.175451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.175457  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:04.175462  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.175470  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175478  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.175485  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:04.175490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175501  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:04.175506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175552  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.175559  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.175563  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.175568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.175573  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:04.175579  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.175587  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175595  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.175602  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:14:04.175608  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:14:04.175613  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175622  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175654  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175662  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.175668  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:04.175673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175716  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:04.175722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175728  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.175735  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.175739  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.175743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.175748  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175755  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.175761  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:04.175765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175808  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:04.175813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175820  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.175826  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.175831  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.175835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.175840  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175848  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.175854  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:14:04.175860  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:14:04.175865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175900  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175908  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.175915  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.175921  1 16 json_node_t() makeChild() node_name=<user>
09-16 14:14:04.175926  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175969  1 16 json_node_t() makeChild() node_name=<user>
09-16 14:14:04.175974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.175981  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.175987  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.175991  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.175996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.176000  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176008  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.176014  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:04.176019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176045  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176062  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:04.176067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176074  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.176080  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.176084  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.176088  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.176093  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176100  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.176107  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:14:04.176113  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:14:04.176119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176136  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176159  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176166  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.176173  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(6)
09-16 14:14:04.176179  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:14:04.176184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176201  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176224  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176231  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.176238  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:04.176244  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:04.176249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176266  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176288  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176296  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.176302  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:14:04.176308  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:04.176313  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176353  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176360  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.176366  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:14:04.176371  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:14:04.176376  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176397  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176423  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176431  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.176437  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:04.176441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176451  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176468  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176485  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:04.176490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176497  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.176503  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.176508  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.176512  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.176517  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176524  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.176531  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:14:04.176537  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.176542  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176583  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176591  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.176596  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:14:04.176601  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:14:04.176606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176646  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.176653  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.176660  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(900)
09-16 14:14:04.176666  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:14:04.176671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.176723  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:14:04.176768  1 14 json_gui_to_db() created db_node
09-16 14:14:04.182616  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_002_t" end time: Sep 16 14:14 CDT
"RoundConvert_DBJson2GUIJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

39/137 Testing: RoundConvert_DBJson2GUIJson_003_t
39/137 Test: RoundConvert_DBJson2GUIJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_003_t.d
"RoundConvert_DBJson2GUIJson_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:04.217633  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:04.221804  1 10 json_db_to_gui() begin
09-16 14:14:04.241248  1 10 json_db_to_gui() read dbAST
09-16 14:14:04.241386  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.241432  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.241467  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.241501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.241563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.241591  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:14:04.241619  1 13 json_db_to_gui() child args name <prolog>
09-16 14:14:04.241626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.241662  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:14:04.241671  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.241686  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.241694  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.241741  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.241786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.241824  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.241832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.241856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.241902  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.241910  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.241917  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.241924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.241940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.241948  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:14:04.241957  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:14:04.241965  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242103  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:14:04.242114  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.242121  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.242128  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.242141  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.242155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242170  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.242177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242220  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.242227  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242242  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.242249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242277  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:14:04.242287  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:14:04.242295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242320  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:14:04.242329  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.242336  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.242344  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.242358  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.242370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242385  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.242392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242426  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.242433  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.242440  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.242447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.242464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242471  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:14:04.242480  1 13 json_db_to_gui() child args name <metrics>
09-16 14:14:04.242488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242510  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:14:04.242519  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.242526  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.242534  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.242548  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.242561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242576  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.242583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242611  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.242618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242632  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.242638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242650  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:04.242660  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:04.242667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242690  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:04.242699  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.242706  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.242714  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.242727  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.242740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242755  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.242762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242797  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.242804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242818  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.242825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242836  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:14:04.242846  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:14:04.242854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242876  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:14:04.242885  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.242893  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.242901  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.242914  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.242926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242942  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.242949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.242963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.242977  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.242985  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.242992  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.242999  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.243016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243023  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:04.243032  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:04.243039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243062  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:04.243071  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.243078  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.243085  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.243099  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.243112  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243126  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.243133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243161  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.243168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243182  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.243188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243199  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:14:04.243209  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:14:04.243217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243240  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:14:04.243249  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.243256  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.243263  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.243276  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.243288  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243303  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.243310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243338  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.243345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243358  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.243365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243376  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:14:04.243386  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:14:04.243393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243420  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:14:04.243429  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.243436  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.243444  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.243456  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.243469  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243484  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.243491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243518  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.243526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243540  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.243546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243558  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:14:04.243567  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:14:04.243575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243599  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:14:04.243608  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.243615  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.243623  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.243636  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.243648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243664  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.243670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243684  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243698  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.243705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243719  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.243726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243737  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:14:04.243746  1 13 json_db_to_gui() child args name <generator>
09-16 14:14:04.243754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243777  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:14:04.243786  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.243792  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.243800  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.243812  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.243824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243839  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.243846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.243874  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.243881  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243894  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.243901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243912  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:14:04.243922  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:14:04.243930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.243953  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:14:04.243962  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.243968  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.243976  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.243988  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.244002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244017  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.244024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244037  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244052  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.244059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244073  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.244079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244090  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:14:04.244100  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:14:04.244108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244131  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:14:04.244140  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.244147  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.244154  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.244167  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.244180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244195  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.244202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244230  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.244237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244250  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.244257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244268  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:14:04.244277  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:14:04.244285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244308  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:14:04.244317  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.244324  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.244332  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.244345  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.244357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244373  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.244379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244411  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.244418  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244432  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.244438  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244450  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:14:04.244460  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:14:04.244468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244491  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:14:04.244500  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.244506  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.244515  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.244528  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.244540  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244555  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.244562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244591  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.244598  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.244607  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.244613  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.244633  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244641  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:14:04.244652  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:14:04.244660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244693  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:14:04.244702  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.244718  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.244726  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.244738  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.244767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244783  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.244789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244834  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.244841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244855  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.244862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244873  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:14:04.244883  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:14:04.244891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244913  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:14:04.244922  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.244929  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.244937  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.244951  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.244963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.244979  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.244985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.244999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245013  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.245020  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245034  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.245040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245052  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:14:04.245061  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:14:04.245069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245093  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:14:04.245103  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.245109  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.245117  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.245130  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.245143  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245158  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.245165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245193  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.245200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245214  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.245220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245231  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:14:04.245241  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:14:04.245249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245272  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:14:04.245281  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.245288  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.245295  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.245308  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.245321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245336  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.245342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245371  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.245378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245391  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.245401  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245413  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:14:04.245423  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:14:04.245430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245454  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:14:04.245462  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.245469  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.245477  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.245490  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.245503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245518  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.245525  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245552  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.245560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245573  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.245580  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245591  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:14:04.245601  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:14:04.245609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245632  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:14:04.245641  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.245648  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.245656  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.245669  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.245682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245697  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.245704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245732  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.245739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245752  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.245759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245777  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.245784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245794  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:14:04.245804  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:14:04.245812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245835  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:14:04.245844  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.245851  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.245858  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.245871  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.245884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245899  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.245906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.245934  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.245942  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.245949  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.245956  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.245972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.245980  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:14:04.245989  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:14:04.245997  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246020  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:14:04.246029  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.246036  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.246044  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.246057  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.246070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246085  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.246092  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246106  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246120  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.246127  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246141  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.246147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246158  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:14:04.246168  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:14:04.246176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246204  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:14:04.246213  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.246220  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.246228  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.246241  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.246254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246269  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.246276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246304  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.246311  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.246318  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.246326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.246342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246349  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:14:04.246358  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:14:04.246366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246392  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:14:04.246404  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.246411  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.246419  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.246432  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.246445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246461  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.246468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246495  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.246502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246515  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.246522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246533  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:14:04.246543  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:14:04.246551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246577  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:14:04.246586  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.246594  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.246602  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.246615  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.246627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246642  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.246649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246677  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.246684  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246698  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.246704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246725  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:14:04.246743  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:14:04.246751  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246775  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:14:04.246784  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.246791  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.246799  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.246812  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.246825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246840  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.246847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.246875  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.246882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246895  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.246902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246916  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.246923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246934  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:14:04.246944  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:14:04.246951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.246974  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:14:04.246983  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.246990  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.246998  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.247011  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.247024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247039  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.247046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247073  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.247080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247094  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.247100  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247111  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:14:04.247121  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:14:04.247129  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247152  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:14:04.247161  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.247168  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.247176  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.247189  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.247202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247217  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.247224  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247251  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.247258  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247272  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.247278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247290  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:14:04.247299  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:14:04.247307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247331  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:14:04.247340  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.247347  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.247355  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.247368  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.247381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247399  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.247406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247434  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.247441  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247455  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.247462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247473  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:14:04.247483  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:14:04.247490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247515  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:14:04.247524  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.247531  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.247539  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.247553  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.247566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247580  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.247587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247615  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.247622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247636  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.247643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247653  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:14:04.247663  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:14:04.247671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247695  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:14:04.247703  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.247710  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.247718  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.247731  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.247744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247759  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.247766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247779  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247794  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.247801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247814  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.247821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247832  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:14:04.247842  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:14:04.247858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247891  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:14:04.247900  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.247916  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.247924  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.247945  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.247958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.247972  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.247979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.247993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248007  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.248014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248027  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.248034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248045  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:14:04.248055  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:14:04.248062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248087  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:14:04.248096  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.248103  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.248111  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.248124  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.248137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248152  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.248159  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248186  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.248194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248207  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.248214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248225  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:14:04.248236  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:14:04.248244  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248267  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:14:04.248275  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.248282  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.248290  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.248303  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.248316  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248331  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.248337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248365  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.248372  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248386  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.248393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248416  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:14:04.248427  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:14:04.248434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248467  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:14:04.248476  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.248483  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.248491  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.248504  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.248517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248532  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.248539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248553  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248567  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.248574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248587  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.248594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248605  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:14:04.248615  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:14:04.248623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248647  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:14:04.248656  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.248662  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.248670  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.248701  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.248714  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248728  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.248743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248780  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.248804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248817  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.248824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248835  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:14:04.248854  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:14:04.248870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248894  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:14:04.248903  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.248909  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.248918  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.248930  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.248942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248957  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.248964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.248977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.248992  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.248999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249012  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.249018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249030  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:14:04.249039  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:14:04.249048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249072  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:14:04.249081  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.249088  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.249096  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.249109  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.249122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249137  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.249144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249172  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.249179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249193  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.249199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249210  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:14:04.249220  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:14:04.249228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249252  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:14:04.249260  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.249267  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.249275  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.249287  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.249299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249314  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.249321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249335  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249349  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.249356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249370  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.249376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249387  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:14:04.249400  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:14:04.249409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249442  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:14:04.249451  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.249458  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.249467  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.249480  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.249493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249509  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.249516  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249544  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.249552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249566  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.249572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249584  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:14:04.249594  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:14:04.249601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249627  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:14:04.249636  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.249643  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.249652  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.249666  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.249697  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249713  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.249720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249748  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.249755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249769  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.249776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249787  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:14:04.249797  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:14:04.249805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249829  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:14:04.249838  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.249845  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.249854  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.249867  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.249880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249896  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.249903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249916  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.249931  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.249938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249953  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.249959  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.249971  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:14:04.249981  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:14:04.249989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250013  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:14:04.250022  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.250029  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.250037  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.250051  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.250063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250079  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.250086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250100  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250114  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.250122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250136  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.250143  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250154  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:14:04.250164  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:14:04.250172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250196  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:14:04.250205  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.250212  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.250220  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.250234  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.250246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250262  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.250269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250297  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.250304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250318  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.250325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250337  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:14:04.250347  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:14:04.250355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250381  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:14:04.250391  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.250401  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.250410  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.250423  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.250436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250452  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.250458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250487  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.250493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250507  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.250514  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250525  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:14:04.250535  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:14:04.250543  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250568  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:14:04.250577  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.250584  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.250592  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.250605  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.250618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250634  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.250640  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250668  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.250675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250691  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.250698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250709  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:14:04.250720  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:14:04.250728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250753  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:14:04.250762  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.250769  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.250777  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.250790  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.250803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250818  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.250825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.250853  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.250860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250874  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.250880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250892  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:14:04.250902  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:14:04.250910  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.250935  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:14:04.250944  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.250951  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.250960  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.250974  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.250987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251002  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.251009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251037  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.251044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251058  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.251065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251077  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:14:04.251088  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:14:04.251096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251120  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:14:04.251129  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.251136  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.251144  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.251158  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.251171  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251186  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.251193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251207  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251221  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.251229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251243  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.251249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251261  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:14:04.251271  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:14:04.251280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251303  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:14:04.251313  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.251320  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.251328  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.251340  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.251353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251368  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.251375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251407  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.251415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251430  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.251436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251448  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:14:04.251458  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:14:04.251466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251492  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:14:04.251501  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.251508  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.251516  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.251530  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.251542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251558  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.251565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251593  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.251601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251615  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.251621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251633  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:14:04.251643  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:14:04.251651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251675  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:14:04.251684  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.251691  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.251701  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.251715  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.251729  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251746  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.251754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251785  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.251793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251809  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.251817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251831  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:14:04.251842  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:14:04.251852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251880  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:14:04.251891  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.251899  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.251908  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.251924  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.251939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251956  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.251964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.251980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.251998  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.252006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252021  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.252029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252044  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:14:04.252055  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:14:04.252063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252091  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:14:04.252102  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.252110  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.252118  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.252132  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.252146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252164  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.252172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252205  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.252213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252230  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.252237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252252  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:14:04.252264  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:14:04.252273  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252300  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:14:04.252311  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.252319  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.252329  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.252345  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.252360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252378  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.252386  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252424  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.252432  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252449  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.252455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252468  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:14:04.252481  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:14:04.252489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252514  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:14:04.252523  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.252530  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.252539  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.252552  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.252565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252581  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.252588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252616  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.252624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252638  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.252653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252666  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:14:04.252685  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:14:04.252693  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252717  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:14:04.252727  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.252733  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.252742  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.252755  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.252768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252783  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.252790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252818  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.252825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252845  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.252853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252865  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:14:04.252875  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:14:04.252882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252909  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:14:04.252918  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.252925  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.252934  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.252947  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.252960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.252976  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.252983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.252997  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253012  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.253019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253033  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.253040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253052  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:14:04.253062  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:14:04.253070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253095  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:14:04.253104  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.253111  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.253120  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.253133  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.253146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253161  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.253168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253197  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.253204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253218  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.253224  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253236  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:14:04.253246  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:14:04.253254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253280  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:14:04.253289  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.253296  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.253305  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.253318  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.253331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253346  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.253353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253390  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.253402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253418  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.253434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253445  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:14:04.253455  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:14:04.253464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253488  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:14:04.253497  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.253504  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.253512  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.253526  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.253538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253554  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.253561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253589  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.253597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253611  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.253618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253629  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:14:04.253640  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:14:04.253648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253673  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:14:04.253682  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.253690  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.253698  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.253712  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.253726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253743  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.253750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253781  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.253788  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253805  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.253812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253825  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:14:04.253835  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:14:04.253843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253871  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:14:04.253881  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.253889  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.253898  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.253913  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.253927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253944  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.253952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.253968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.253985  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.253992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254009  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.254016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254029  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:14:04.254041  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:14:04.254049  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254077  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:14:04.254086  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.254094  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.254102  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.254117  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.254130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.254147  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.254155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.254185  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.254193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254208  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.254216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254235  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.254242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254260  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.254267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254285  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.254293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254307  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:04.254318  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:04.254327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254354  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:04.254363  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.254371  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.254380  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.254400  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.254415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.254432  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.254439  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254454  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.254471  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.254478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254493  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.254501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254512  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:14:04.254522  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:14:04.254530  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254553  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:14:04.254562  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.254569  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.254577  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.254591  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.254604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.254634  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.254649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.254681  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.254689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254703  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.254710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254722  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:14:04.254733  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:14:04.254741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254764  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:14:04.254773  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.254780  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.254788  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.254802  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.254815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.254831  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.254838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.254868  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.254875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254890  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.254897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254909  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:14:04.254918  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:14:04.254927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.254949  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:14:04.254958  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.254965  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.254973  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.254987  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.255000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255015  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.255022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255037  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255051  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.255058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255100  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:14:04.255114  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.255121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255134  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:14:04.255144  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:14:04.255152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255177  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:14:04.255186  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.255195  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.255204  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.255217  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.255231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255246  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.255253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255282  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.255289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255304  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.255311  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255323  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.255333  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.255341  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255364  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.255373  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.255380  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.255389  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.255404  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.255418  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255434  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.255441  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255470  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.255477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255491  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.255498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255510  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.255520  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.255528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255551  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.255561  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.255568  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.255576  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.255589  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.255602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255618  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.255624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255654  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.255661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255675  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.255682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255694  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.255704  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.255712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255735  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.255744  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.255751  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.255759  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.255773  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.255786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255801  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.255808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255837  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.255844  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255858  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.255865  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255876  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.255886  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.255895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.255918  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.255928  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.255934  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.255943  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.255956  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.255970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.255985  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.255992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256024  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.256031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256045  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.256052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256064  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:14:04.256074  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:14:04.256082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256104  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:14:04.256113  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.256121  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.256129  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.256143  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.256156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256172  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.256178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256207  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.256214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256229  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.256236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256247  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.256258  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.256265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256287  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.256297  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.256304  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.256312  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.256326  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.256339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256355  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.256362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256390  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.256401  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256417  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.256424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256436  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.256446  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.256453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256478  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.256487  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.256494  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.256503  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.256516  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.256529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256545  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.256552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256581  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.256588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256602  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.256609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256621  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.256631  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.256639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256661  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.256671  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.256677  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.256685  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.256699  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.256712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256728  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.256734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256763  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.256770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256784  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.256791  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256803  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.256813  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.256821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256843  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.256853  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.256860  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.256868  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.256882  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.256895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256919  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.256926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.256954  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.256961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256975  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.256982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.256993  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:14:04.257003  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:14:04.257011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257032  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:14:04.257042  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.257050  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.257058  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.257071  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.257084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257099  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.257106  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257134  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.257141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257155  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.257162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257173  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.257183  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.257191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257213  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.257223  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.257229  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.257238  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.257251  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.257264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257279  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.257285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257314  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.257320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257336  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.257343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257354  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.257364  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.257372  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257397  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.257407  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.257414  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.257421  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.257434  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.257447  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257462  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.257469  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257497  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.257504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257518  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.257525  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257537  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.257547  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.257554  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257576  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.257586  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.257592  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.257601  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.257622  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.257635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257659  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.257666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257695  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.257702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257718  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.257725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257737  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.257748  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.257756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257780  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.257790  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.257797  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.257805  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.257819  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.257834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257851  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.257858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.257889  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.257896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257912  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.257919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257931  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:14:04.257942  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:14:04.257950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.257973  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:14:04.257984  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.257991  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.258001  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.258015  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.258029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258048  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.258055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258071  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258088  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.258095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258112  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.258119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258132  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.258143  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.258152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258176  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.258186  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.258194  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.258202  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.258218  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.258233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258251  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.258260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258293  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.258301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258318  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.258325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258337  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.258348  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.258357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258388  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.258410  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.258418  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.258425  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.258439  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.258461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258477  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.258484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258521  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.258529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258543  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.258550  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258561  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.258571  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.258579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258601  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.258610  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.258617  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.258625  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.258637  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.258651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258667  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.258673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258702  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.258709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258723  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.258730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258741  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.258751  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.258759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258781  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.258791  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.258798  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.258805  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.258818  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.258832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258847  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.258854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.258883  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.258890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258906  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.258913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258925  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:14:04.258934  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:14:04.258942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.258965  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:14:04.258975  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.258981  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.258990  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.259003  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.259016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259031  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.259038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259051  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259067  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.259073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259087  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.259094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259106  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.259116  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.259123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259145  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.259154  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.259161  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.259169  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.259182  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.259195  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259210  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.259217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259244  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.259251  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259266  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.259272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259284  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.259294  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.259301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259323  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.259333  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.259339  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.259348  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.259362  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.259375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259391  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.259402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259434  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.259442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259456  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.259463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259475  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.259486  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.259495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259519  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.259528  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.259536  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.259545  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.259560  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.259573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259590  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.259597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259628  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.259635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259658  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.259665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259678  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.259689  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.259695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259738  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.259750  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.259758  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.259764  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.259776  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.259789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259804  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.259812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.259844  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.259851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259867  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.259875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259887  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:14:04.259898  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:14:04.259906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.259930  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:14:04.259941  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.259948  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.259956  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.259971  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.259985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260001  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.260009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260041  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.260048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260063  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.260070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260082  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.260093  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.260101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260127  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.260137  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.260144  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.260153  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.260167  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.260180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260196  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.260202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260231  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.260237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260252  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.260259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260270  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.260280  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.260287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260310  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.260319  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.260325  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.260333  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.260347  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.260359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260374  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.260381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260401  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260417  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.260424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260438  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.260445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260457  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.260466  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.260474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260496  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.260505  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.260512  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.260520  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.260534  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.260546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260562  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.260569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260597  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.260604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260618  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.260625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260640  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.260649  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.260656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260682  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.260691  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.260698  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.260706  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.260720  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.260733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260748  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.260763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260801  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.260809  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260822  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.260829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260840  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:14:04.260850  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:14:04.260866  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.260898  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:14:04.260915  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.260922  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.260930  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.260952  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.260965  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.260980  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.260987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261015  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.261022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261036  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.261042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261054  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.261063  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.261071  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261093  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.261102  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.261109  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.261117  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.261130  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.261143  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261158  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.261165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261193  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.261200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261214  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.261221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261232  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.261242  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.261249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261273  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.261282  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.261289  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.261297  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.261311  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.261323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261338  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.261347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261375  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.261382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261399  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.261406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261418  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.261429  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.261436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261459  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.261468  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.261475  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.261483  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.261496  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.261509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261524  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.261531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261560  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.261566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261580  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.261587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261598  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.261608  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.261616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261638  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.261647  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.261654  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.261662  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.261676  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.261688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261703  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.261710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261738  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.261745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261759  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.261765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261776  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:14:04.261786  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:14:04.261794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261816  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:14:04.261826  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.261832  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.261840  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.261852  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.261865  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261880  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.261887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.261935  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.261943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261956  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.261963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.261974  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.261985  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.261992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262015  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.262024  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.262031  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.262039  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.262053  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.262066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262081  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.262088  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262116  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.262123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262137  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.262144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262155  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.262165  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.262173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262195  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.262204  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.262211  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.262219  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.262231  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.262244  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262259  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.262266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262279  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262293  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.262300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262314  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.262320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262332  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.262342  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.262349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262373  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.262382  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.262389  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.262400  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.262412  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.262426  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262442  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.262449  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262477  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.262483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262497  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.262504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262515  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.262526  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.262533  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262556  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.262565  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.262572  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.262580  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.262593  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.262606  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262621  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.262628  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262641  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262656  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.262663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262677  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.262683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262699  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.262705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262718  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:14:04.262728  1 13 json_db_to_gui() child args name <main>
09-16 14:14:04.262735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262746  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:14:04.262755  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.262763  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.262771  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.262784  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.262796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262811  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.262818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262831  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.262849  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.262857  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.262865  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.262873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.262893  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262905  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.262913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.262983  1 10 json_db_to_gui() created gui_node
09-16 14:14:04.297083  1 10 json_db_to_gui() created gui_json
09-16 14:14:04.297243  1 14 json_gui_to_db() begin
09-16 14:14:04.331663  1 14 json_gui_to_db() read guiAST
09-16 14:14:04.331708  1 14 json_gui_to_db() created dbAST
09-16 14:14:04.331745  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.331765  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.331775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.331816  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.331839  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.331850  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:14:04.331861  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.331878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.331894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.331909  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.331926  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.331940  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:14:04.331949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.331961  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.331970  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.331979  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.331988  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.331998  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.332011  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.332039  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:14:04.332049  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:14:04.332057  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332089  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332129  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.332143  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.332153  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:04.332162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332224  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332238  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:04.332246  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332259  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.332268  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.332277  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.332285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.332293  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.332306  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.332318  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:14:04.332327  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:04.332336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332352  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332399  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332421  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.332443  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.332478  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:14:04.332489  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:04.332499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332558  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332570  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.332584  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.332594  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:04.332603  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332689  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:04.332698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332720  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.332729  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.332738  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.332754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.332763  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.332777  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.332789  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:04.332808  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:04.332826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332915  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.332929  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.332941  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:14:04.332951  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:14:04.332961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.332986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333016  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333041  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.333055  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.333066  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:14:04.333076  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:14:04.333086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333156  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.333170  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.333181  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:14:04.333191  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:14:04.333201  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333270  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.333284  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.333295  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:14:04.333305  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:14:04.333315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333385  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.333401  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.333414  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:14:04.333424  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:14:04.333433  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333466  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333493  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333504  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.333518  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.333529  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:14:04.333540  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:14:04.333549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333595  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333618  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.333633  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.333644  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:14:04.333654  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:14:04.333664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333734  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.333748  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.333758  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:14:04.333767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333828  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333841  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:14:04.333850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333863  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.333872  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.333881  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.333889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.333906  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.333919  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.333939  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:14:04.333950  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:14:04.333959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.333992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334030  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.334043  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.334055  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:14:04.334066  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:14:04.334075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334145  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.334158  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.334170  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:14:04.334180  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:14:04.334190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334260  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.334274  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.334285  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:14:04.334295  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:14:04.334304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334374  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.334388  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.334404  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:14:04.334415  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:14:04.334424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334456  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334495  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.334508  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.334520  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:14:04.334530  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:14:04.334540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334572  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334615  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.334628  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.334638  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:14:04.334648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334722  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:14:04.334731  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334744  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.334753  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.334762  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.334770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.334778  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.334792  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.334803  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:14:04.334813  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:14:04.334823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334892  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.334906  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.334916  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:14:04.334925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334970  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.334986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335000  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:14:04.335009  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335021  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.335030  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.335038  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.335046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.335054  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335068  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.335080  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:14:04.335090  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:14:04.335099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335146  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335159  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335170  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335183  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.335195  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:14:04.335205  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:14:04.335214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335284  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335297  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.335308  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:14:04.335318  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:14:04.335328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335402  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335415  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.335427  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:14:04.335438  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:14:04.335447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335479  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335518  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335531  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.335542  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:14:04.335552  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:14:04.335562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335578  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335632  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335646  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.335657  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:14:04.335668  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:14:04.335677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335746  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335760  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.335771  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:14:04.335781  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:14:04.335791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335822  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335849  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335861  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335874  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.335885  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:14:04.335896  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:14:04.335905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.335975  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.335988  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336000  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:14:04.336010  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:14:04.336018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336050  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336088  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.336102  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336113  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:14:04.336123  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:14:04.336133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336164  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336202  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.336216  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336227  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:14:04.336238  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:14:04.336247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336316  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.336329  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336341  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:14:04.336351  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:14:04.336360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336404  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336453  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.336467  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336479  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:14:04.336489  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:14:04.336499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336558  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336570  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.336583  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336595  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:14:04.336605  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:14:04.336615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336631  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336687  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.336700  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336712  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:14:04.336722  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:14:04.336732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336763  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336802  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.336816  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336827  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:14:04.336837  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:14:04.336847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336917  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.336930  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.336941  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:14:04.336952  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:14:04.336961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336977  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.336992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337031  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337045  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.337056  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:14:04.337066  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:14:04.337075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337145  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337158  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.337170  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:14:04.337180  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:14:04.337189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337260  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337274  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.337285  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:14:04.337295  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:14:04.337305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337374  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337388  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.337403  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:14:04.337414  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:14:04.337424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337456  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337494  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337507  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.337519  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:14:04.337529  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:14:04.337539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337555  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337609  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337622  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.337633  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:14:04.337644  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:14:04.337653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337669  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337733  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337746  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.337758  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:14:04.337768  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:14:04.337778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337859  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337873  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.337885  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:14:04.337895  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:14:04.337905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337936  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337963  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.337975  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.337988  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338000  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:14:04.338010  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:14:04.338020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338036  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338090  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.338103  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338115  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:14:04.338125  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:14:04.338135  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338206  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.338220  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338231  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:14:04.338242  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:14:04.338251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338309  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338321  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.338334  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338345  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:14:04.338355  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:14:04.338365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338399  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338439  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.338452  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338464  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:14:04.338474  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:14:04.338484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338500  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338542  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338553  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.338567  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338578  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:14:04.338588  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:14:04.338598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338613  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338667  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.338690  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338701  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:14:04.338720  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:14:04.338729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338799  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.338813  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338824  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:14:04.338835  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:14:04.338844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338915  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.338929  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.338940  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:14:04.338950  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:14:04.338960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.338991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339029  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339042  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.339054  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:14:04.339064  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:14:04.339072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339142  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339155  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.339166  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:14:04.339176  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:14:04.339186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339256  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339269  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.339281  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:14:04.339290  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:14:04.339300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339370  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339383  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.339398  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:14:04.339409  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:14:04.339418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339435  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339507  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339520  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.339532  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:14:04.339542  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:14:04.339551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339621  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339634  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.339646  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:14:04.339656  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:14:04.339665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339737  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339750  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.339761  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:14:04.339771  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:14:04.339781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339854  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339866  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.339878  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:14:04.339888  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.339898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.339968  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.339981  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.339992  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:14:04.340003  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:14:04.340012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340082  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.340095  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.340106  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:14:04.340117  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:14:04.340126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340196  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.340210  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.340222  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:14:04.340232  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:04.340241  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340313  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.340326  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.340337  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.340348  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:14:04.340357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340448  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.340461  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.340473  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:14:04.340483  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.340493  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340552  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340563  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.340577  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.340588  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:14:04.340598  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.340608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340666  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340677  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.340691  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.340702  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:14:04.340713  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.340722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340792  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.340806  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.340817  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:14:04.340827  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.340837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340906  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.340920  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.340932  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.340942  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:14:04.340952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.340997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341010  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341021  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341034  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.341045  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:14:04.341056  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.341065  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341136  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341149  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.341161  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:14:04.341171  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.341181  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341250  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341264  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.341275  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:14:04.341286  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.341295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341341  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341365  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341378  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.341390  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:14:04.341403  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.341413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341485  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341499  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.341510  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.341521  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:14:04.341530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341600  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341613  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.341625  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:14:04.341636  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.341645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341715  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341728  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.341740  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:14:04.341750  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.341760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341830  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341843  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.341854  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:14:04.341865  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.341874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341890  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.341944  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.341957  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.341968  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:14:04.341979  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.341988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342058  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.342071  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.342082  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.342093  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:14:04.342102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342173  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.342186  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.342197  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:14:04.342208  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.342217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342285  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.342298  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.342309  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:14:04.342320  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.342329  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342411  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.342426  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.342445  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:14:04.342456  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.342465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342535  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.342549  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.342560  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:14:04.342571  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.342580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342651  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.342664  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.342676  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.342686  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:14:04.342696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342742  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342766  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.342779  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.342791  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:14:04.342802  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.342812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342892  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.342906  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.342918  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:14:04.342937  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.342946  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342962  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342977  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.342992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343016  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343029  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.343040  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:14:04.343051  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.343060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343132  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343145  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.343156  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:14:04.343167  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.343176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343222  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343246  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343259  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.343270  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.343281  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:14:04.343290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343349  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343361  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343374  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.343386  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:14:04.343399  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.343409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343481  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343494  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.343506  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:14:04.343516  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.343525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343572  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343596  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343609  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.343620  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:14:04.343630  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.343639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343710  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343723  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.343734  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:14:04.343746  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.343755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343787  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343825  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343839  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.343850  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.343860  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:14:04.343870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343901  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.343940  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.343953  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.343964  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:14:04.343975  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.343984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344016  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344055  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.344068  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.344079  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:14:04.344090  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.344099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344169  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.344183  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.344194  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:14:04.344204  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.344213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344283  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.344296  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.344307  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:14:04.344318  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.344327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344411  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.344425  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.344445  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.344456  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:14:04.344466  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344498  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344536  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.344549  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.344561  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:14:04.344572  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.344581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344651  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.344664  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.344675  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:14:04.344686  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.344695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344765  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.344778  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.344789  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:14:04.344800  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.344808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344840  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344879  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.344892  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.344903  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:14:04.344914  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.344923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344955  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344970  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.344996  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.345009  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.345019  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:14:04.345028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.345044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.345060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.345074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.345090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.345104  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:14:04.345113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.345127  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.345136  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.345145  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.345153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.345168  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:14:04.345262  1 14 json_gui_to_db() created db_node
09-16 14:14:04.360643  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_003_t" end time: Sep 16 14:14 CDT
"RoundConvert_DBJson2GUIJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

40/137 Testing: RoundConvert_GUIJson2DBJson_001_t
40/137 Test: RoundConvert_GUIJson2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_001_t.d
"RoundConvert_GUIJson2DBJson_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:04.423382  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:04.425964  1 14 json_gui_to_db() begin
09-16 14:14:04.448522  1 14 json_gui_to_db() read guiAST
09-16 14:14:04.448731  1 14 json_gui_to_db() created dbAST
09-16 14:14:04.448859  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.448923  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.448947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.448992  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.449121  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.449164  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.449199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449355  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449376  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.449393  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449409  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.449417  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.449423  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.449429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.449435  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.449445  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.449453  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:04.449459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449491  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449511  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:14:04.449518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449526  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.449533  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.449538  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.449543  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.449549  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.449559  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.449594  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:14:04.449603  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:14:04.449610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449622  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449675  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.449685  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.449694  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:14:04.449701  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:14:04.449707  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449739  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449756  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.449765  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.449773  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:14:04.449780  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:14:04.449786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449796  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449833  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.449843  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.449851  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:04.449858  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:04.449865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449912  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.449921  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.449932  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:14:04.449939  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:14:04.449944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449955  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449976  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.449993  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450002  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.450009  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:14:04.450015  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:14:04.450021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450041  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450068  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450077  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.450084  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:14:04.450090  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:14:04.450096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450148  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450158  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.450166  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:04.450173  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:04.450180  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450228  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450238  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.450245  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:04.450250  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450302  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:04.450308  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450316  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.450323  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.450329  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.450334  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.450340  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450348  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.450355  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:14:04.450360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450382  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450407  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450418  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:14:04.450424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450433  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.450440  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.450445  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.450450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.450456  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450465  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.450488  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:14:04.450497  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:14:04.450502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450536  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450554  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450563  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.450571  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:14:04.450578  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:14:04.450584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450632  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450641  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.450649  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:14:04.450656  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:14:04.450663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450710  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450719  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.450726  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:14:04.450732  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:14:04.450738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450787  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450796  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.450803  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:04.450809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450820  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450840  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450851  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450860  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:04.450867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450875  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.450882  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.450887  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.450892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.450898  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.450906  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.450913  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:14:04.450918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450969  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:14:04.450975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.450983  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.450990  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.450996  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.451001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.451007  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.451016  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.451023  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:04.451028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451039  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451050  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451070  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451080  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:04.451086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451094  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.451101  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.451106  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.451111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.451117  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.451126  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.451136  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:04.451142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451175  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:14:04.451183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451444  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.451452  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.451459  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.451465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.451472  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:14:04.451490  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.451517  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:14:04.451523  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.451533  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.451543  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.451551  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:14:04.451559  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.451566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451618  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.451627  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.451634  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:04.451639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451691  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:04.451698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451706  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.451713  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.451718  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.451724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.451729  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.451738  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.451745  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:04.451750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451802  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:04.451808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451816  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.451823  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.451828  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.451834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.451841  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.451851  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.451858  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:04.451863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451914  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:04.451921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451929  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.451936  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.451941  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.451946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.451952  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.451961  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.451968  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:04.451973  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.451995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452016  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452025  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:04.452031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452040  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.452046  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.452052  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.452057  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.452063  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452072  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.452079  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:04.452086  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.452092  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452141  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452151  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.452159  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:14:04.452166  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:04.452173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452193  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452203  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452221  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452230  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.452237  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:04.452242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452284  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452293  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:04.452300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452308  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.452315  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.452320  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.452325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.452331  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452340  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.452348  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:04.452355  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.452362  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452393  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452415  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452424  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.452433  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:14:04.452440  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:04.452446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452468  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452478  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452486  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452496  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452505  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.452513  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:14:04.452520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452532  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:14:04.452539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452596  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.452603  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.452610  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.452615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.452622  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:14:04.452629  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.452638  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452647  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.452655  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:04.452662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452674  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:04.452681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452736  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.452743  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.452749  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.452754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.452762  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452772  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.452780  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:04.452787  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452800  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:04.452807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452828  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452861  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.452868  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.452874  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.452879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.452886  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:04.452892  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.452901  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.452909  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.452918  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:04.452924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452937  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:04.452944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452954  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.452998  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.453006  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.453012  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.453018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.453025  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:04.453032  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.453041  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453050  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.453059  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:04.453065  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453120  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:04.453127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453135  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.453142  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.453147  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.453153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.453161  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453171  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.453179  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:14:04.453186  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:14:04.453193  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453243  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453253  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.453261  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:04.453266  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453321  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:04.453327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453336  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.453343  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.453350  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.453356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.453362  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453372  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.453380  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:04.453386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453425  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453448  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:04.453454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453463  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.453471  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.453477  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.453482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.453488  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453499  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.453509  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:14:04.453517  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:14:04.453522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453535  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453547  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453575  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453586  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.453595  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:14:04.453601  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:14:04.453608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453661  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453671  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.453680  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:04.453688  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:04.453695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453744  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453753  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.453761  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:14:04.453768  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:04.453775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453822  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453831  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.453839  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:14:04.453846  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:14:04.453851  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453901  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.453910  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.453917  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:04.453923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453953  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453974  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:04.453981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.453989  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.453996  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.454001  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.454007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.454012  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.454021  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.454028  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:14:04.454035  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:14:04.454041  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454052  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454089  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.454099  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.454107  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:14:04.454114  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:14:04.454121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454171  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.454180  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.454187  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:04.454192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454203  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454243  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:04.454250  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454258  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.454265  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.454270  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.454275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.454281  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.454291  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.454299  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:14:04.454305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454321  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:14:04.454328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454393  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.454406  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.454413  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.454419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.454437  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:04.454460  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.454472  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:04.454479  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.454486  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:04.454492  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.454499  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:04.454505  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.454512  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:04.454518  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.454525  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:14:04.454531  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.454541  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.454551  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.454560  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:14:04.454567  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.454573  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454624  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.454633  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.454640  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:14:04.454647  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:14:04.454653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454701  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.454710  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.454718  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:14:04.454725  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:14:04.454730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.454796  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:14:04.454871  1 14 json_gui_to_db() created db_node
09-16 14:14:04.464959  1 14 json_gui_to_db() created db_json
09-16 14:14:04.465095  1 10 json_db_to_gui() begin
09-16 14:14:04.473855  1 10 json_db_to_gui() read dbAST
09-16 14:14:04.473912  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.473932  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.473938  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.473945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.473961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.473983  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:04.474014  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:04.474019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474027  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:04.474033  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474047  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.474053  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.474069  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.474086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474119  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.474125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474134  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474173  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474180  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.474186  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.474190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.474201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474207  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:14:04.474213  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:14:04.474219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474253  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:14:04.474261  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474265  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.474271  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.474280  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.474290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474300  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.474305  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474324  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474330  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.474334  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.474339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.474350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474357  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:14:04.474363  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:14:04.474368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474389  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:14:04.474400  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474405  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.474410  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.474419  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.474429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474439  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.474444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474484  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.474489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474500  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.474505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474524  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:14:04.474531  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:14:04.474537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474557  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:14:04.474564  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474568  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.474574  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.474583  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.474592  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474602  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.474607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474625  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.474630  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474639  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.474644  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474651  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:14:04.474658  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:14:04.474662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474680  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:14:04.474687  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474692  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.474697  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.474706  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.474715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474724  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.474730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474738  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474747  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.474752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474761  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.474766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474773  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:04.474780  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:04.474784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474802  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:04.474809  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474813  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.474819  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.474827  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.474836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474846  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.474851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474868  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.474874  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474882  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.474887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474895  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:14:04.474901  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:14:04.474905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474924  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:14:04.474930  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.474935  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.474940  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.474948  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.474957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.474967  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.474972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.474981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475005  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.475011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475020  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.475025  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475033  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:14:04.475039  1 13 json_db_to_gui() child args name <use_art>
09-16 14:14:04.475044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475063  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:14:04.475070  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475075  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.475080  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.475089  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.475098  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475107  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.475112  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475130  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.475135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475143  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.475149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475156  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:14:04.475162  1 13 json_db_to_gui() child args name <verbose>
09-16 14:14:04.475167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475186  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:14:04.475193  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475197  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.475203  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.475211  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.475220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475229  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.475234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475252  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.475257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475265  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.475271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475280  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.475285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475292  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:04.475298  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:04.475302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475320  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:04.475327  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475331  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.475337  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.475345  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.475354  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475364  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.475369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475386  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.475392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475404  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.475410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475418  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:14:04.475433  1 13 json_db_to_gui() child args name <metrics>
09-16 14:14:04.475447  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475465  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:14:04.475471  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475475  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.475480  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.475488  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.475498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475508  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.475513  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475532  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475537  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.475542  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.475546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.475558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475564  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:14:04.475570  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:14:04.475574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475593  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:14:04.475600  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475605  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.475610  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.475619  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.475628  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475638  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.475643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475662  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475667  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.475672  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.475677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.475688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475694  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:14:04.475700  1 13 json_db_to_gui() child args name <fileName>
09-16 14:14:04.475705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475724  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:14:04.475731  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475736  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.475741  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.475750  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.475759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475769  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.475774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475798  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.475803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475812  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.475817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475825  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:14:04.475831  1 13 json_db_to_gui() child args name <level>
09-16 14:14:04.475835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475854  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:14:04.475861  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.475865  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.475871  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.475879  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.475889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475899  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.475904  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.475922  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.475927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475935  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.475949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475966  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:14:04.475973  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:14:04.475978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.475997  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:14:04.476022  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476027  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.476032  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476041  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.476050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476060  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.476065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476082  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.476087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476096  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.476101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476108  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:14:04.476115  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:14:04.476119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476140  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:14:04.476146  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476151  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.476156  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476165  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.476174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476183  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.476188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476206  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.476211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476219  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.476225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476234  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.476239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476247  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.476252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476261  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.476266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476272  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:14:04.476279  1 13 json_db_to_gui() child args name <outputs>
09-16 14:14:04.476283  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476290  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:14:04.476297  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476302  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.476306  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476315  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.476323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476333  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.476338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476357  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476362  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.476367  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.476371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.476383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476389  1 11 json_db_to_gui() operator() switch OBJECT child name=<rootMPIOutput>
09-16 14:14:04.476398  1 13 json_db_to_gui() child args name <rootMPIOutput>
09-16 14:14:04.476404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476423  1 13 json_db_to_gui() metadata node was found, name=<rootMPIOutput>
09-16 14:14:04.476430  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476434  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.476440  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476448  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.476458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476468  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.476473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476492  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476497  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.476502  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.476506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.476517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476523  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:14:04.476529  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:14:04.476534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476553  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:14:04.476560  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476564  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.476569  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476578  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.476587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476597  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.476602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476620  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476626  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.476630  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.476635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.476646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476652  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:14:04.476658  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:14:04.476663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476683  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:14:04.476690  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476694  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.476700  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476708  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.476717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476727  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.476732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.476765  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476771  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.476776  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.476781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.476800  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476806  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.476819  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.476825  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.476840  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:14:04.476866  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476880  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.476885  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.476921  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:14:04.476927  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.476932  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.476937  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.476942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.476952  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.476957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476967  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.476972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.476979  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.476985  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.476989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477010  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.477017  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477022  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.477027  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.477036  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.477046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477055  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.477061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477079  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.477084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477092  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.477097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477107  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.477112  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477120  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.477125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477131  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:14:04.477138  1 13 json_db_to_gui() child args name <physics>
09-16 14:14:04.477143  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477149  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:14:04.477154  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477159  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.477163  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.477171  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.477180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477189  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.477195  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477213  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477218  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.477223  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.477227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.477239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477245  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:14:04.477251  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:14:04.477256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477275  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:14:04.477282  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477286  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.477292  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.477300  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.477309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477319  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.477324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477343  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477348  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.477353  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.477357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.477369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477377  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.477382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477390  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:14:04.477400  1 13 json_db_to_gui() child args name <filters>
09-16 14:14:04.477406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477424  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:14:04.477431  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477436  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.477441  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.477450  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.477459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477469  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.477474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477493  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477498  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.477503  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.477507  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.477519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477525  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:14:04.477531  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:14:04.477536  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477554  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:14:04.477561  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477565  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.477571  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.477579  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.477589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477598  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.477603  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477622  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477627  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.477632  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.477636  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.477648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477654  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.477660  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.477664  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477684  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.477691  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477695  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.477701  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.477709  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.477718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477728  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.477733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477751  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.477756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477765  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.477770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477777  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:14:04.477784  1 13 json_db_to_gui() child args name <nth>
09-16 14:14:04.477788  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477808  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:14:04.477815  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477819  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.477825  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.477833  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.477842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477852  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.477857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477865  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477874  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.477879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477888  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.477893  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477902  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.477907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477914  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:14:04.477920  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:14:04.477924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.477943  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:14:04.477950  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.477954  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.477960  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.477968  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.477977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.477987  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.477992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478010  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478016  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.478020  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.478025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.478036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478042  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.478048  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.478053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478073  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.478080  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478084  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.478089  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478098  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.478107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478117  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.478122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478140  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.478145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478153  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.478158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478165  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:14:04.478172  1 13 json_db_to_gui() child args name <nth>
09-16 14:14:04.478176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478196  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:14:04.478203  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478207  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.478213  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478221  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.478230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478240  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.478245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478262  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.478267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478276  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.478281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478290  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.478295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478303  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.478308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478315  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:14:04.478321  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:14:04.478326  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478344  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:14:04.478350  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478355  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.478360  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478368  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.478378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478387  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.478392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478417  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478423  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.478436  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.478452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.478465  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478471  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.478476  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.478482  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.478495  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:14:04.478501  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478506  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.478511  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.478526  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.478532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478540  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:14:04.478546  1 13 json_db_to_gui() child args name <p1>
09-16 14:14:04.478552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478570  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:14:04.478577  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478582  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.478588  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478596  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.478606  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478616  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.478621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478640  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478645  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.478650  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.478654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.478666  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478672  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.478677  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.478681  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.478697  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.478702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478710  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:14:04.478717  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:14:04.478722  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478740  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:14:04.478747  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478753  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.478758  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478767  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.478777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478786  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.478791  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478810  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478816  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.478820  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.478826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.478838  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478844  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.478848  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.478853  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.478867  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:04.478874  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478879  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.478883  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478888  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.478899  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.478904  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478912  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:14:04.478918  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:14:04.478924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.478942  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:14:04.478949  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.478954  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.478959  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.478968  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.478977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.478987  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.478992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479011  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479016  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.479021  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.479025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.479037  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479043  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.479048  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.479052  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.479066  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:04.479073  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479078  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.479083  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.479097  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.479103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479111  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:14:04.479117  1 13 json_db_to_gui() child args name <producers>
09-16 14:14:04.479123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479141  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:14:04.479148  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479153  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.479158  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479167  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.479176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479186  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.479191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479210  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479215  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.479220  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.479226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.479237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479245  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.479250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479259  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.479264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479271  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:14:04.479278  1 13 json_db_to_gui() child args name <process_name>
09-16 14:14:04.479283  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479289  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:14:04.479295  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479300  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.479305  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479313  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.479322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479332  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.479337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479354  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.479360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479368  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.479373  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479380  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:14:04.479386  1 13 json_db_to_gui() child args name <services>
09-16 14:14:04.479391  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479402  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:14:04.479409  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479414  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.479419  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479436  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.479446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479455  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.479460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479478  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479483  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.479488  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.479492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.479503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479509  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:14:04.479515  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:14:04.479520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479538  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:14:04.479545  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479549  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.479554  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479563  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.479571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479581  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.479586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479604  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479610  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.479614  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.479618  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.479629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479635  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:14:04.479641  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:14:04.479646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479664  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:14:04.479671  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479675  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.479680  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479689  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.479698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479707  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.479712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479730  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.479735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479743  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.479748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479755  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:14:04.479762  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:14:04.479766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479785  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:14:04.479792  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479796  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.479801  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479809  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.479818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479827  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.479832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479849  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.479854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479863  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.479868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479875  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:04.479881  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:04.479885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479904  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:04.479910  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.479915  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.479920  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.479928  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.479937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479946  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.479951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479959  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.479968  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.479973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479981  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.479986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.479993  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:04.479999  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:04.480003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480022  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:04.480029  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480033  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.480038  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480047  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.480056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480065  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.480070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480087  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.480092  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480100  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.480105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480112  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:14:04.480118  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:14:04.480122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480141  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:14:04.480148  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480152  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.480157  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480165  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.480174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480183  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.480188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480205  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.480210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480218  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.480223  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480232  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.480237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480243  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:14:04.480249  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:14:04.480253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480272  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:14:04.480278  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480283  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.480288  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480296  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.480305  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480314  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.480319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480337  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480342  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.480347  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.480351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.480362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480368  1 11 json_db_to_gui() operator() switch OBJECT child name=<errorOnFailureToPut>
09-16 14:14:04.480374  1 13 json_db_to_gui() child args name <errorOnFailureToPut>
09-16 14:14:04.480378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480401  1 13 json_db_to_gui() metadata node was found, name=<errorOnFailureToPut>
09-16 14:14:04.480408  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480413  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.480418  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480427  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.480436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480445  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.480450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480468  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.480473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480481  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.480486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480493  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:14:04.480499  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:14:04.480504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480522  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:14:04.480529  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480533  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.480538  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480546  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.480555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480564  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.480569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480586  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.480591  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480599  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.480604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480613  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.480618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480626  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.480631  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480638  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:14:04.480644  1 13 json_db_to_gui() child args name <source>
09-16 14:14:04.480648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480655  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:14:04.480661  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480665  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.480670  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480678  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.480687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480696  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.480701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480719  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480724  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.480729  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.480733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.480744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480750  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type_map>
09-16 14:14:04.480756  1 13 json_db_to_gui() child args name <fragment_type_map>
09-16 14:14:04.480760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480778  1 13 json_db_to_gui() metadata node was found, name=<fragment_type_map>
09-16 14:14:04.480785  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480789  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.480794  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480801  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.480810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480820  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.480825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.480833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.480843  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480848  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.480853  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.480857  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.480869  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480875  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.480879  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.480884  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.480896  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:04.480902  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480907  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.480911  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480916  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.480925  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:04.480932  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480936  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.480941  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.480954  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:04.480960  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480964  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.480970  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.480974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.480983  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:04.480989  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.480993  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.480998  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.481003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.481011  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:04.481017  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.481021  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.481026  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.481031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.481039  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:14:04.481045  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.481049  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.481053  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.481059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.481068  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.481074  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481082  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.481088  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.481093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481111  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.481118  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.481122  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.481128  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.481136  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.481146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.481155  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.481160  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.481178  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.481183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481191  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.481196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481203  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:14:04.481209  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:14:04.481214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481232  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:14:04.481239  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.481243  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.481248  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.481256  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.481265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.481274  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.481279  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.481296  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.481301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481309  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.481314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481322  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:14:04.481328  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:14:04.481332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481349  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:14:04.481355  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.481359  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.481363  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.481371  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.481379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.481387  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.481391  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.481414  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.481428  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481445  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.481451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481460  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.481465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.481487  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:14:04.481503  1 10 json_db_to_gui() created gui_node
09-16 14:14:04.496056  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.13 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_001_t" end time: Sep 16 14:14 CDT
"RoundConvert_GUIJson2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

41/137 Testing: RoundConvert_GUIJson2DBJson_002_t
41/137 Test: RoundConvert_GUIJson2DBJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_002_t.d
"RoundConvert_GUIJson2DBJson_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:04.548289  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:04.550049  1 14 json_gui_to_db() begin
09-16 14:14:04.565183  1 14 json_gui_to_db() read guiAST
09-16 14:14:04.565299  1 14 json_gui_to_db() created dbAST
09-16 14:14:04.565371  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.565412  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.565434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.565470  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.565544  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.565580  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.565604  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565728  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.565737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565752  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.565761  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.565770  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.565778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.565787  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.565801  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.565811  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:14:04.565820  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565851  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565893  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:14:04.565902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.565915  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.565924  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.565931  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.565939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.565947  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.565959  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.565986  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:14:04.565997  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:14:04.566006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566022  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566052  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566086  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.566098  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.566110  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_depth, value=int(2)
09-16 14:14:04.566120  1 16 json_node_t() makeChild() node_name=<event_queue_depth>
09-16 14:14:04.566130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566160  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566187  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566199  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.566211  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.566223  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_wait_time, value=int(1)
09-16 14:14:04.566233  1 16 json_node_t() makeChild() node_name=<event_queue_wait_time>
09-16 14:14:04.566242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566311  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.566324  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.566336  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_events_per_bunch, value=int(1)
09-16 14:14:04.566346  1 16 json_node_t() makeChild() node_name=<expected_events_per_bunch>
09-16 14:14:04.566355  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566370  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566403  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566447  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.566460  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.566471  1 15 json_gui_to_db() operator() switch ARRAY child name= file_duration, value=int(0)
09-16 14:14:04.566481  1 16 json_node_t() makeChild() node_name=<file_duration>
09-16 14:14:04.566490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566521  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566536  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566559  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.566572  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.566583  1 15 json_gui_to_db() operator() switch ARRAY child name= file_event_count, value=int(0)
09-16 14:14:04.566593  1 16 json_node_t() makeChild() node_name=<file_event_count>
09-16 14:14:04.566602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566617  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566670  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.566684  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.566695  1 15 json_gui_to_db() operator() switch ARRAY child name= file_size_MB, value=int(8000)
09-16 14:14:04.566705  1 16 json_node_t() makeChild() node_name=<file_size_MB>
09-16 14:14:04.566714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566759  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566784  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.566797  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.566808  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:14:04.566819  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:14:04.566828  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566896  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.566909  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.566920  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:14:04.566930  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:04.566940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566955  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566970  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.566996  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567008  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.567021  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.567032  1 15 json_gui_to_db() operator() switch ARRAY child name= onmon_event_prescale, value=int(1)
09-16 14:14:04.567042  1 16 json_node_t() makeChild() node_name=<onmon_event_prescale>
09-16 14:14:04.567051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567108  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567119  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.567132  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.567146  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:14:04.567156  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:14:04.567166  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567197  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567234  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.567247  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.567268  1 15 json_gui_to_db() operator() switch ARRAY child name= xmlrpc_client_list, value=std::string(;http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5)
09-16 14:14:04.567279  1 16 json_node_t() makeChild() node_name=<xmlrpc_client_list>
09-16 14:14:04.567287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567360  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.567371  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.567383  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:04.567394  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:04.567406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567475  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.567489  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.567499  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:04.567507  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567523  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567580  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:04.567589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567602  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.567611  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.567619  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.567627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.567636  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.567649  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.567659  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:14:04.567668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567684  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567740  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:14:04.567749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567762  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.567771  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.567779  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.567787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.567796  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.567808  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.567819  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/aggregator/agg_%UID%_metrics.log)
09-16 14:14:04.567829  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:14:04.567838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567854  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567907  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.567919  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.567931  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:14:04.567950  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:14:04.567959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.567991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568038  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.568050  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.568062  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:14:04.568071  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:14:04.568081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568149  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.568162  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:14:04.568172  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:14:04.568181  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:14:04.568191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568262  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.568275  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.568285  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:04.568294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568367  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:14:04.568375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568389  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.568400  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.568409  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.568417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.568428  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.568441  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.568450  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:04.568459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568532  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:14:04.568541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568554  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.568563  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.568571  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.568579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.568589  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.568602  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.568612  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:04.568621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568637  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568694  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:14:04.568703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568716  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.568725  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.568733  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.568741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.568752  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.568764  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.568774  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:04.568783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568856  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:14:04.568865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568878  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.568887  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.568895  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.568903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.568911  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.568924  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.568934  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:04.568944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.568988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569017  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:14:04.569026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569040  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.569048  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.569057  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.569065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.569073  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.569086  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.569097  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:04.569107  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.569116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569184  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.569197  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.569208  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:14:04.569218  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:04.569227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569296  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.569309  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.569319  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:04.569328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569404  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:14:04.569413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569426  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.569435  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.569444  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.569451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.569459  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.569472  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.569483  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:14:04.569493  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.569503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569572  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.569585  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.569596  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:14:04.569606  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:14:04.569616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569631  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569686  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.569698  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.569712  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:04.569720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569752  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:14:04.569760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569790  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.569947  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.569957  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.569966  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.569974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.569986  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.569998  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.570010  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:14:04.570019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570037  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:14:04.570045  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570101  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570113  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.570123  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.570132  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.570140  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.570149  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:14:04.570166  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.570192  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.570205  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.570217  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:04.570226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570243  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:14:04.570251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570266  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570319  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.570329  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.570338  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.570346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.570355  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:04.570364  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.570377  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.570389  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:14:04.570405  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:04.570423  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570450  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:14:04.570460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570530  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:14:04.570540  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.570549  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.570557  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.570568  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:04.570577  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.570590  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.570603  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.570613  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:04.570623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570696  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:14:04.570705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570719  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.570728  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.570736  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.570744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.570752  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.570765  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.570775  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:14:04.570784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570828  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570866  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:14:04.570885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570906  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.570914  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.570921  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.570930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.570938  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.570952  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.570960  1 15 json_gui_to_db() operator() switch ARRAY child name= instance_name, value=std::string(ArtdaqDemo)
09-16 14:14:04.570966  1 16 json_node_t() makeChild() node_name=<instance_name>
09-16 14:14:04.570972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.570992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571014  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571022  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.571029  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(ArtdaqDemoBuildInfo)
09-16 14:14:04.571034  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.571038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571070  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571078  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571085  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.571091  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQAG)
09-16 14:14:04.571095  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:14:04.571100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571108  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571137  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571144  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.571150  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:04.571154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571187  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571195  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:14:04.571200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571207  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.571212  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.571217  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.571221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.571226  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571233  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.571239  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:04.571243  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571285  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:14:04.571290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571296  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.571302  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.571306  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.571310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.571315  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571322  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.571328  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:14:04.571334  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:04.571339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571356  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571364  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571378  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571385  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.571391  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:14:04.571400  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:14:04.571406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571446  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571454  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.571459  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:04.571463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571472  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571488  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571505  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:14:04.571510  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571516  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.571522  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.571526  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.571531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.571535  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571543  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.571549  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:14:04.571554  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:14:04.571560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571599  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571606  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.571612  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:04.571616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571625  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571657  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:14:04.571662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571669  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.571674  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.571678  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.571683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.571687  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.571694  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.571701  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonInput)
09-16 14:14:04.571706  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:14:04.571711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.571764  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:14:04.571809  1 14 json_gui_to_db() created db_node
09-16 14:14:04.578996  1 14 json_gui_to_db() created db_json
09-16 14:14:04.579091  1 10 json_db_to_gui() begin
09-16 14:14:04.585827  1 10 json_db_to_gui() read dbAST
09-16 14:14:04.585981  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586021  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.586031  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.586040  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.586060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586108  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:04.586163  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:04.586168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586188  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:04.586193  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586210  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.586217  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.586239  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.586259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586303  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.586309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586374  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586380  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.586385  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.586389  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.586404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586410  1 11 json_db_to_gui() operator() switch OBJECT child name=<aggregator>
09-16 14:14:04.586415  1 13 json_db_to_gui() child args name <aggregator>
09-16 14:14:04.586419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586461  1 13 json_db_to_gui() metadata node was found, name=<aggregator>
09-16 14:14:04.586467  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586471  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.586476  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.586484  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.586492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586501  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.586505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586513  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586522  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586526  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.586531  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.586534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.586544  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586548  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:14:04.586553  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:14:04.586558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586575  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:14:04.586581  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586585  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.586589  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.586596  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.586604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586613  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.586617  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586655  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.586660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586669  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.586673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586691  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_queue_depth>
09-16 14:14:04.586697  1 13 json_db_to_gui() child args name <event_queue_depth>
09-16 14:14:04.586701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586718  1 13 json_db_to_gui() metadata node was found, name=<event_queue_depth>
09-16 14:14:04.586724  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586727  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.586731  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.586739  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.586746  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586754  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.586759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586773  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.586778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586785  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.586789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586795  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_queue_wait_time>
09-16 14:14:04.586800  1 13 json_db_to_gui() child args name <event_queue_wait_time>
09-16 14:14:04.586803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586819  1 13 json_db_to_gui() metadata node was found, name=<event_queue_wait_time>
09-16 14:14:04.586825  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586829  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.586833  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.586840  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.586847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586856  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.586861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586875  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.586880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586887  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.586891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586897  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_events_per_bunch>
09-16 14:14:04.586902  1 13 json_db_to_gui() child args name <expected_events_per_bunch>
09-16 14:14:04.586905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586922  1 13 json_db_to_gui() metadata node was found, name=<expected_events_per_bunch>
09-16 14:14:04.586928  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.586932  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.586936  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.586943  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.586950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586958  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.586962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.586977  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.586982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586989  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.586993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.586999  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_duration>
09-16 14:14:04.587004  1 13 json_db_to_gui() child args name <file_duration>
09-16 14:14:04.587007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587023  1 13 json_db_to_gui() metadata node was found, name=<file_duration>
09-16 14:14:04.587029  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587033  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587037  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587044  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587051  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587058  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587077  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587087  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587097  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_event_count>
09-16 14:14:04.587102  1 13 json_db_to_gui() child args name <file_event_count>
09-16 14:14:04.587105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587121  1 13 json_db_to_gui() metadata node was found, name=<file_event_count>
09-16 14:14:04.587127  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587131  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587135  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587142  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587157  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587176  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587181  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587188  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587198  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_size_MB>
09-16 14:14:04.587202  1 13 json_db_to_gui() child args name <file_size_MB>
09-16 14:14:04.587206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587222  1 13 json_db_to_gui() metadata node was found, name=<file_size_MB>
09-16 14:14:04.587228  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587231  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587235  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587242  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587257  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587276  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587287  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587297  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:14:04.587301  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:14:04.587305  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587321  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:14:04.587327  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587331  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587334  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587341  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587357  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587376  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587387  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587391  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587409  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:04.587415  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:04.587419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587445  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:04.587451  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587455  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587459  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587466  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587482  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587502  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587514  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587524  1 11 json_db_to_gui() operator() switch OBJECT child name=<onmon_event_prescale>
09-16 14:14:04.587529  1 13 json_db_to_gui() child args name <onmon_event_prescale>
09-16 14:14:04.587532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587548  1 13 json_db_to_gui() metadata node was found, name=<onmon_event_prescale>
09-16 14:14:04.587554  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587557  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587561  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587568  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587583  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587602  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587614  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587617  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587624  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:14:04.587629  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:14:04.587632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587648  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:14:04.587654  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587658  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587662  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587669  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587676  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587683  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587717  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587722  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587730  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587740  1 11 json_db_to_gui() operator() switch OBJECT child name=<xmlrpc_client_list>
09-16 14:14:04.587745  1 13 json_db_to_gui() child args name <xmlrpc_client_list>
09-16 14:14:04.587748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587764  1 13 json_db_to_gui() metadata node was found, name=<xmlrpc_client_list>
09-16 14:14:04.587770  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587773  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587777  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587784  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587791  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587799  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587825  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587836  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587839  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587847  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587857  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:04.587862  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:04.587865  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587880  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:04.587886  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587890  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587894  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.587901  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.587908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587917  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.587920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.587935  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.587939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587946  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.587950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587956  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:14:04.587961  1 13 json_db_to_gui() child args name <metrics>
09-16 14:14:04.587964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.587979  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:14:04.587985  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.587989  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.587993  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588000  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588015  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588034  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588039  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.588043  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.588047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.588056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588062  1 11 json_db_to_gui() operator() switch OBJECT child name=<aggFile>
09-16 14:14:04.588067  1 13 json_db_to_gui() child args name <aggFile>
09-16 14:14:04.588071  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588086  1 13 json_db_to_gui() metadata node was found, name=<aggFile>
09-16 14:14:04.588092  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588096  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.588100  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588107  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588123  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588127  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588134  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588143  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588148  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.588152  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.588156  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.588164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588170  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:14:04.588174  1 13 json_db_to_gui() child args name <fileName>
09-16 14:14:04.588178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588195  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:14:04.588201  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588204  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.588208  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588215  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588231  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588251  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.588256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588263  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588273  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:14:04.588278  1 13 json_db_to_gui() child args name <level>
09-16 14:14:04.588281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588298  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:14:04.588304  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588307  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.588311  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588318  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588334  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588344  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588353  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.588358  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588365  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588376  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:14:04.588381  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:14:04.588385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588404  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:14:04.588421  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588425  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.588429  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588445  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588461  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588481  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.588485  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588492  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588501  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:14:04.588506  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:14:04.588510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588526  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:14:04.588532  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588536  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.588540  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588547  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588554  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588562  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588582  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.588586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588593  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588608  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588630  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588649  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588659  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:14:04.588664  1 13 json_db_to_gui() child args name <outputs>
09-16 14:14:04.588667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588673  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:14:04.588677  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588681  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.588685  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588692  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588708  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588728  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588733  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.588737  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.588741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.588750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588758  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588768  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:14:04.588773  1 13 json_db_to_gui() child args name <physics>
09-16 14:14:04.588776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588781  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:14:04.588786  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588789  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.588793  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588800  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588816  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588826  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588834  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588839  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.588843  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.588847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.588856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588861  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:14:04.588866  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:14:04.588869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588885  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:14:04.588891  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588895  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.588898  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.588906  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.588913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588920  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.588925  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.588941  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.588946  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.588950  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.588954  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.588963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588970  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.588973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.588980  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:14:04.588985  1 13 json_db_to_gui() child args name <filters>
09-16 14:14:04.588988  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589004  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:14:04.589010  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589013  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589017  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589025  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589041  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589045  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589060  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589065  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.589069  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.589073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.589082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589087  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:14:04.589092  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:14:04.589095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589111  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:14:04.589117  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589121  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589124  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589132  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589147  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589159  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589167  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589171  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.589176  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.589179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.589188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589194  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.589198  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.589202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589219  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.589225  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589229  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589232  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589240  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589255  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589274  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.589279  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589286  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.589291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589297  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:14:04.589302  1 13 json_db_to_gui() child args name <nth>
09-16 14:14:04.589305  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589322  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:14:04.589327  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589331  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589335  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589342  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589357  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589376  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.589381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589388  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.589392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589403  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.589408  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589414  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:14:04.589419  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:14:04.589422  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589438  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:14:04.589444  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589448  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589452  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589459  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589467  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589475  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589495  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589500  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.589504  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.589508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.589517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589522  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.589527  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.589530  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589547  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.589552  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589556  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589560  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589567  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589583  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589596  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589603  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.589607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589615  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.589618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589624  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:14:04.589629  1 13 json_db_to_gui() child args name <nth>
09-16 14:14:04.589633  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589649  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:14:04.589655  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589659  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589663  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589670  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589677  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589685  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589703  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.589708  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589715  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.589719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589726  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.589730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589737  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.589741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589747  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:14:04.589751  1 13 json_db_to_gui() child args name <p1>
09-16 14:14:04.589755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589770  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:14:04.589776  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589780  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589783  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589790  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589806  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589847  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589853  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.589858  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.589862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.589877  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589883  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.589895  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.589899  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.589915  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.589919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589926  1 11 json_db_to_gui() operator() switch OBJECT child name=<p2>
09-16 14:14:04.589931  1 13 json_db_to_gui() child args name <p2>
09-16 14:14:04.589935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589951  1 13 json_db_to_gui() metadata node was found, name=<p2>
09-16 14:14:04.589957  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.589961  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.589964  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.589971  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.589979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.589988  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.589992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.589999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590007  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590012  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.590016  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.590020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.590030  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590035  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.590039  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.590043  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.590054  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:14:04.590078  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590090  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.590095  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.590124  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.590129  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590136  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:14:04.590141  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:14:04.590145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590161  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:14:04.590167  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590171  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.590175  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590182  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.590189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590198  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.590203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590218  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590223  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.590227  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.590231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.590242  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590247  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.590250  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.590254  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.590264  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:14:04.590269  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590273  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.590277  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.590289  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.590292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590299  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:14:04.590305  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:14:04.590308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590324  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:14:04.590330  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590334  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.590338  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590345  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.590354  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590362  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.590366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590382  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590387  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.590391  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:14:04.590398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.590409  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590414  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:14:04.590418  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:14:04.590422  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.590432  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:14:04.590437  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590441  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:14:04.590444  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590448  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:14:04.590456  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.590462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590469  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:14:04.590474  1 13 json_db_to_gui() child args name <producers>
09-16 14:14:04.590477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590493  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:14:04.590499  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590503  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.590507  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590514  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.590521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590530  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.590534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590550  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590555  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.590559  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.590563  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.590572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590577  1 11 json_db_to_gui() operator() switch OBJECT child name=<BuildInfo>
09-16 14:14:04.590582  1 13 json_db_to_gui() child args name <BuildInfo>
09-16 14:14:04.590586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590602  1 13 json_db_to_gui() metadata node was found, name=<BuildInfo>
09-16 14:14:04.590607  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590611  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.590615  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590622  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.590630  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590638  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.590643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590659  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590664  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.590668  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.590672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.590681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590686  1 11 json_db_to_gui() operator() switch OBJECT child name=<instance_name>
09-16 14:14:04.590691  1 13 json_db_to_gui() child args name <instance_name>
09-16 14:14:04.590694  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590711  1 13 json_db_to_gui() metadata node was found, name=<instance_name>
09-16 14:14:04.590717  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590720  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.590724  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590732  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.590740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590748  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.590753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590767  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.590772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590779  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.590782  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590788  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.590793  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.590797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590813  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.590819  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590823  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.590827  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590834  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.590841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590848  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.590852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590867  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.590871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590878  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.590882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590889  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.590894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590901  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.590905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590911  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.590915  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590921  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:14:04.590925  1 13 json_db_to_gui() child args name <process_name>
09-16 14:14:04.590929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590934  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:14:04.590939  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.590942  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.590946  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.590953  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.590960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590968  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.590972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.590986  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.590991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.590998  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591008  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:14:04.591013  1 13 json_db_to_gui() child args name <services>
09-16 14:14:04.591016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591021  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:14:04.591026  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591029  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.591033  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.591039  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.591046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591054  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.591059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591074  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591079  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.591083  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.591086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.591096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591101  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:14:04.591106  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:14:04.591109  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591125  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:14:04.591131  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591134  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.591138  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.591146  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.591153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591161  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.591166  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591181  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591186  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.591190  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.591194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.591203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591208  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:04.591213  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:04.591217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591233  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:04.591238  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591242  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.591246  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.591253  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.591260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591269  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.591273  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591288  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.591292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591299  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591309  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:14:04.591314  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:14:04.591318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591333  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:14:04.591339  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591343  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.591347  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.591354  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.591362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591370  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.591374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591388  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.591393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591413  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591434  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591439  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591445  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:14:04.591449  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:14:04.591453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591469  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:14:04.591475  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591479  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.591482  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.591489  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.591497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591505  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.591510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591526  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591531  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.591535  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.591539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.591548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591553  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:14:04.591558  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:14:04.591561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591577  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:14:04.591583  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591587  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.591592  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.591599  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.591608  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591617  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.591621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591638  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.591642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591651  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591664  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591674  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591687  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591697  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:14:04.591713  1 13 json_db_to_gui() child args name <source>
09-16 14:14:04.591717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591723  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:14:04.591729  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591732  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.591737  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.591745  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.591754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591762  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.591766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591784  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591789  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.591793  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.591798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.591808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591814  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:14:04.591819  1 13 json_db_to_gui() child args name <module_type>
09-16 14:14:04.591823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591840  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:14:04.591846  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.591850  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.591855  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.591863  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.591873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591883  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.591887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.591904  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.591908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591916  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591929  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.591933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.591961  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:14:04.591984  1 10 json_db_to_gui() created gui_node
09-16 14:14:04.603932  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_002_t" end time: Sep 16 14:14 CDT
"RoundConvert_GUIJson2DBJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

42/137 Testing: RoundConvert_GUIJson2DBJson_003_t
42/137 Test: RoundConvert_GUIJson2DBJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_003_t.d
"RoundConvert_GUIJson2DBJson_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:04.652236  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:14:04.656715  1 14 json_gui_to_db() begin
09-16 14:14:04.704970  1 14 json_gui_to_db() read guiAST
09-16 14:14:04.705153  1 14 json_gui_to_db() created dbAST
09-16 14:14:04.705252  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.705301  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.705326  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.705373  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.705476  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.705518  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:14:04.705545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705666  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:14:04.705671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705680  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.705687  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.705692  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.705696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.705701  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.705710  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.705733  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:14:04.705741  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:14:04.705746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705806  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.705815  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.705821  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:04.705826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705856  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705875  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:04.705880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705888  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.705894  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.705899  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.705904  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.705910  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.705918  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.705926  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:14:04.705932  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:14:04.705937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705947  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.705982  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.705990  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706023  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:14:04.706031  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:14:04.706037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706082  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706091  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.706097  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:04.706102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706149  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:14:04.706155  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706162  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.706169  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.706174  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.706179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.706185  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706193  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706201  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:14:04.706207  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:14:04.706212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706222  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706250  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706257  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706265  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706273  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:14:04.706280  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:14:04.706286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706329  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706338  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706345  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:14:04.706351  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:14:04.706356  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706402  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706411  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706419  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:14:04.706426  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:14:04.706432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706476  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706485  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.706492  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:14:04.706499  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:14:04.706504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706523  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706547  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706556  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.706563  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:14:04.706569  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:14:04.706575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706603  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706618  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706626  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706634  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:14:04.706640  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:14:04.706646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706689  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706698  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706705  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:14:04.706711  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:14:04.706717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706736  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706759  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706768  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.706774  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:14:04.706779  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706827  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:14:04.706832  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706840  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.706847  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.706852  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.706857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.706862  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706869  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706877  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:14:04.706883  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:14:04.706890  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706900  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706935  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.706943  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.706950  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:14:04.706957  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:14:04.706962  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706971  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706990  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.706998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707005  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707013  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707021  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:14:04.707027  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:14:04.707033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707077  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707084  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707091  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:14:04.707096  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:14:04.707102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707111  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707145  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707153  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707160  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:14:04.707167  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:14:04.707172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707181  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707215  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707223  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707230  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:14:04.707236  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:14:04.707242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707291  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707300  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.707306  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:14:04.707311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707359  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:14:04.707365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707372  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.707379  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.707384  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.707389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.707397  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707406  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707413  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:14:04.707420  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:14:04.707426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707456  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707471  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707480  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.707487  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:14:04.707492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707539  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:14:04.707545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707552  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.707559  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.707563  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.707568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.707574  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707582  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707589  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:14:04.707596  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:14:04.707602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707647  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707655  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707663  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:14:04.707669  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:14:04.707675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707719  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707727  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707734  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:14:04.707740  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:14:04.707746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707790  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707798  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707805  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:14:04.707811  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:14:04.707817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707860  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707868  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707876  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:14:04.707882  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:14:04.707888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707897  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707915  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707930  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.707938  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.707946  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:14:04.707952  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:14:04.707957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707976  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.707993  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708000  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708008  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708015  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:14:04.708021  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:14:04.708027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708036  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708045  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708069  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708077  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708084  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:14:04.708091  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:14:04.708096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708139  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708146  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708154  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:14:04.708160  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:14:04.708165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708174  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708193  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708201  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708208  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708216  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708223  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:14:04.708229  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:14:04.708235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708270  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708277  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708285  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708292  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:14:04.708299  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:14:04.708304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708347  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708355  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708362  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:14:04.708369  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:14:04.708374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708393  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708422  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708430  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708437  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:14:04.708444  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:14:04.708449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708478  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708493  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708501  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708508  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:14:04.708514  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:14:04.708520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708547  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708555  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708562  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708569  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708576  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:14:04.708582  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:14:04.708587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708631  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708640  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708647  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:14:04.708653  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:14:04.708659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708669  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708679  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708703  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708710  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708718  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:14:04.708724  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:14:04.708729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708739  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708772  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708780  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708788  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:14:04.708794  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:14:04.708799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708835  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708842  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708850  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708857  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:14:04.708863  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:14:04.708868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708897  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708912  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708919  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708927  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:14:04.708933  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:14:04.708938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.708981  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.708989  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.708996  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:14:04.709003  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:14:04.709008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709036  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709051  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709059  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709066  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:14:04.709072  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:14:04.709078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709121  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709129  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709136  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:14:04.709143  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:14:04.709148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709191  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709199  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709206  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:14:04.709212  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:14:04.709218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709260  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709268  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709275  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:14:04.709282  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:14:04.709287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709331  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709339  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709346  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:14:04.709352  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:14:04.709358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709377  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709394  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709404  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709413  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709420  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:14:04.709427  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:14:04.709432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709476  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709484  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709491  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:14:04.709497  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:14:04.709503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709546  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709554  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709561  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:14:04.709567  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:14:04.709573  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709616  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709624  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709631  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:14:04.709638  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:14:04.709643  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709679  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709686  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709694  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709701  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:14:04.709707  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:14:04.709713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709756  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709764  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709771  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:14:04.709777  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:14:04.709783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709826  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709834  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709841  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:14:04.709847  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:14:04.709853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709895  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709903  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709910  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:14:04.709917  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:14:04.709922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.709965  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.709972  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.709979  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:14:04.709985  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:14:04.709991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710035  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710043  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.710050  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:14:04.710056  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:14:04.710062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710105  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710113  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.710120  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:14:04.710126  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:14:04.710132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710160  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710175  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710183  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.710190  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:14:04.710197  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:14:04.710202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710222  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710246  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710254  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.710261  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:14:04.710268  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:14:04.710273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710309  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710316  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710324  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.710331  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:14:04.710336  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:14:04.710342  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710377  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710384  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710392  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.710403  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:14:04.710409  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:14:04.710415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710425  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710435  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710444  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710461  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710470  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.710477  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:14:04.710484  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:14:04.710490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710533  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710542  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.710549  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:14:04.710556  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:14:04.710561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710605  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710613  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.710620  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:14:04.710627  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:14:04.710633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710651  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710675  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710688  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.710696  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:14:04.710703  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:14:04.710708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710752  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710760  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.710767  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.710774  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:14:04.710779  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710822  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710831  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.710838  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:14:04.710845  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.710850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710894  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710902  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.710909  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:14:04.710916  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.710921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.710964  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.710972  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.710980  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:14:04.710987  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.710991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711034  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711043  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711050  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:14:04.711057  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.711062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711106  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711114  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.711121  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.711128  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:14:04.711133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711143  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711169  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711176  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711185  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711192  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:14:04.711199  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.711205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711241  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711248  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711256  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711263  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:14:04.711270  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.711275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711285  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711318  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711327  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.711334  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:14:04.711341  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.711345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711355  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711382  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711389  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711401  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711409  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:14:04.711415  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.711421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711462  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711470  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.711477  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.711483  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:14:04.711489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711533  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711541  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711549  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:14:04.711555  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.711560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711604  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711612  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711619  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:14:04.711626  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.711632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711674  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711683  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.711690  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:14:04.711697  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.711702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711745  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711753  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711761  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:14:04.711768  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.711773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711817  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711825  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.711832  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.711839  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:14:04.711845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711854  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711888  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711896  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711903  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:14:04.711910  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.711915  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711934  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711958  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.711966  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.711974  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:14:04.711980  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.711985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.711995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712014  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712022  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712029  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712037  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.712044  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:14:04.712051  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.712056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712092  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712099  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712107  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.712114  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:14:04.712121  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.712126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712136  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712169  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712177  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.712185  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.712191  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:14:04.712197  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712240  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712248  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.712255  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:14:04.712262  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.712267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712310  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712318  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.712325  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:14:04.712332  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.712337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712356  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712380  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712388  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.712398  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:14:04.712405  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.712410  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712454  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712463  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.712470  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:14:04.712477  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.712482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712491  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712510  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712525  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712533  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.712540  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.712547  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:14:04.712552  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712588  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712595  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712603  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.712610  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:14:04.712617  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.712622  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712631  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712665  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712673  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.712680  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:14:04.712686  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.712692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712701  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712734  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712742  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.712749  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:14:04.712756  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.712761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712804  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712812  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.712820  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:14:04.712826  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.712831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712851  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712875  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712883  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.712890  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.712897  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:14:04.712902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712930  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712945  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.712953  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.712961  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:14:04.712967  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.712972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.712992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713009  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713016  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713024  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.713031  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:14:04.713037  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.713043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713052  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713079  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713086  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713094  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.713101  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:14:04.713107  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.713112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713156  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713164  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.713171  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:14:04.713178  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.713183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713226  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713235  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.713242  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:14:04.713248  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:14:04.713254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713297  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713306  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.713313  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:14:04.713319  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.713325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713334  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713353  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713368  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713376  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.713383  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:14:04.713389  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.713397  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713435  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713442  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713450  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:14:04.713457  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:14:04.713464  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.713469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713478  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713488  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713512  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713520  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:14:04.713528  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:14:04.713535  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.713539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713584  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:14:04.713592  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:14:04.713599  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:14:04.713604  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713651  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:14:04.713657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.713664  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:14:04.713671  1 15 json_gui_to_db() operator() begin
09-16 14:14:04.713677  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:14:04.713683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:14:04.713706  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:14:04.713807  1 14 json_gui_to_db() created db_node
09-16 14:14:04.732861  1 14 json_gui_to_db() created db_json
09-16 14:14:04.733030  1 10 json_db_to_gui() begin
09-16 14:14:04.750541  1 10 json_db_to_gui() read dbAST
09-16 14:14:04.750583  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.750598  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.750604  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.750609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.750640  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.750659  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:14:04.750682  1 13 json_db_to_gui() child args name <prolog>
09-16 14:14:04.750687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.750694  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:14:04.750699  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.750710  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.750716  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.750743  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.750757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.750785  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.750790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.750799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.750832  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.750838  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.750842  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.750846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.750856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.750861  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:14:04.750866  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:14:04.750870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751056  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:14:04.751064  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751069  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751073  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751081  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751090  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751099  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751138  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.751144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751153  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.751157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751168  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:14:04.751174  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:14:04.751178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751196  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:14:04.751203  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751207  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751211  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751218  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751234  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751255  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751260  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.751264  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.751268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.751277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751283  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:14:04.751288  1 13 json_db_to_gui() child args name <metrics>
09-16 14:14:04.751291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751309  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:14:04.751315  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751319  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751323  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751330  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751346  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751366  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.751371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751379  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.751383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751389  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:14:04.751398  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:14:04.751402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751419  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:14:04.751426  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751430  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751434  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751441  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751449  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751457  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751469  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751485  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.751490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751498  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.751502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751508  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:14:04.751513  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:14:04.751517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751533  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:14:04.751539  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751543  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751547  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751554  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751570  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751590  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751595  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.751599  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.751603  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.751612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751617  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:14:04.751622  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:14:04.751625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751643  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:14:04.751649  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751653  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751657  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751664  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751679  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751684  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751699  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.751703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751711  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.751715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751721  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:14:04.751726  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:14:04.751730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751747  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:14:04.751753  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751757  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751761  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751768  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751783  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751795  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751802  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.751807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751814  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.751818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751824  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:14:04.751829  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:14:04.751832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751849  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:14:04.751855  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751859  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751863  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751870  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751886  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751905  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.751909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751916  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.751920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751926  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:14:04.751931  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:14:04.751935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.751952  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:14:04.751958  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.751962  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.751966  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.751973  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.751980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.751988  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.751994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752008  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752020  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752030  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:14:04.752035  1 13 json_db_to_gui() child args name <generator>
09-16 14:14:04.752039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752056  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:14:04.752062  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752066  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752069  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752076  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752092  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752112  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752116  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752123  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752132  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:14:04.752138  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:14:04.752141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752158  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:14:04.752164  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752168  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752172  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752179  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752195  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752207  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752214  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752226  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752236  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:14:04.752241  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:14:04.752245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752262  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:14:04.752268  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752272  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752276  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752283  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752298  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752317  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752329  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752339  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:14:04.752344  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:14:04.752347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752364  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:14:04.752370  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752374  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752378  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752386  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752405  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752425  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752436  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752440  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752446  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:14:04.752451  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:14:04.752455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752472  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:14:04.752478  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752482  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752486  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752493  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752509  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752514  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752530  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752535  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.752539  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.752543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.752552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752558  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:14:04.752563  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:14:04.752567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752584  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:14:04.752590  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752594  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752598  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752606  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752623  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752642  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752647  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752655  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752665  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:14:04.752670  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:14:04.752673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752691  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:14:04.752697  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752701  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752705  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752712  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752728  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752748  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752760  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752770  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:14:04.752775  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:14:04.752778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752796  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:14:04.752802  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752806  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752810  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752817  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752832  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752852  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752864  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752874  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:14:04.752879  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:14:04.752883  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752900  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:14:04.752906  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.752910  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.752914  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.752921  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.752929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752938  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.752942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.752957  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.752962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752969  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.752974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.752981  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:14:04.752987  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:14:04.752991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753011  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:14:04.753018  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753022  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.753028  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.753036  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.753044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753053  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.753058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753075  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.753079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753087  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.753092  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753098  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:14:04.753105  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:14:04.753110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753129  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:14:04.753136  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753142  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.753146  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.753154  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.753163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753172  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.753177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753194  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.753199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753207  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.753212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753222  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.753226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753234  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:14:04.753240  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:14:04.753244  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753264  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:14:04.753271  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753275  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.753281  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.753289  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.753298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753308  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.753313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753332  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753338  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.753343  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.753348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.753360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753366  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:14:04.753372  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:14:04.753376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753401  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:14:04.753408  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753413  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.753418  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.753427  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.753437  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753447  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.753451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753469  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.753473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753482  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.753486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753494  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:14:04.753500  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:14:04.753505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753524  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:14:04.753531  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753535  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.753540  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.753549  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.753558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753568  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.753572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753592  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753598  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.753602  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.753607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.753619  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753626  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:14:04.753631  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:14:04.753636  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753659  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:14:04.753665  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753671  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.753676  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.753685  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.753694  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753705  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.753710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753731  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.753735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753743  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.753748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753755  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:14:04.753762  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:14:04.753765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753784  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:14:04.753790  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753794  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.753799  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.753806  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.753814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753822  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.753827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753843  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.753848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753855  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.753859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753866  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:14:04.753871  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:14:04.753876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753894  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:14:04.753901  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.753904  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.753908  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.753915  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.753923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753932  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.753937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753944  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.753952  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.753957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753964  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.753968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753977  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.753981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.753987  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:14:04.753993  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:14:04.753996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754014  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:14:04.754020  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754023  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754027  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754034  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754050  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754069  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754080  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754090  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:14:04.754096  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:14:04.754100  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754117  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:14:04.754123  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754128  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754132  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754139  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754156  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754160  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754176  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754188  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754192  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754198  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:14:04.754204  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:14:04.754208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754226  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:14:04.754232  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754236  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754240  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754248  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754264  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754285  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754297  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754308  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:14:04.754314  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:14:04.754318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754335  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:14:04.754341  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754345  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754350  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754357  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754373  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754393  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754414  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754434  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:14:04.754441  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:14:04.754444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754463  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:14:04.754469  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754473  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754478  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754485  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754501  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754513  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754520  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754525  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754532  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754536  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754543  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:14:04.754549  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:14:04.754552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754569  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:14:04.754575  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754579  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754584  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754591  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754607  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754619  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754626  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754630  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754637  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754648  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:14:04.754653  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:14:04.754657  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754674  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:14:04.754680  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754684  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754689  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754696  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754711  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754716  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754731  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754743  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754747  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754753  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:14:04.754759  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:14:04.754763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754779  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:14:04.754785  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754789  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754794  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754801  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754809  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754817  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754838  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754850  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754860  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:14:04.754866  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:14:04.754869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754887  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:14:04.754894  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.754898  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.754903  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.754911  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.754919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754927  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.754932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.754950  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.754955  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754963  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.754967  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.754974  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:14:04.754980  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:14:04.754983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755002  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:14:04.755008  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755012  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755017  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755024  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755042  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755064  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755068  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755076  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755087  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:14:04.755094  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:14:04.755097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755116  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:14:04.755122  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755126  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755131  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755140  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755157  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755178  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755190  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755201  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:14:04.755207  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:14:04.755211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755229  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:14:04.755235  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755240  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755244  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755252  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755270  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755274  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755290  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755303  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755314  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:14:04.755320  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:14:04.755325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755343  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:14:04.755350  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755353  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755358  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755365  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755383  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755399  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755408  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755413  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755421  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755432  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:14:04.755438  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:14:04.755444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755462  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:14:04.755469  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755474  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755478  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755486  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755504  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755525  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755530  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755538  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755543  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755550  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:14:04.755555  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:14:04.755559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755578  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:14:04.755585  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755589  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755594  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755601  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755617  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755637  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755649  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755660  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:14:04.755665  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:14:04.755669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755686  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:14:04.755692  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755696  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755699  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755706  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755722  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755741  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755746  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755753  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755763  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:14:04.755768  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:14:04.755771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755788  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:14:04.755794  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755798  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755802  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755809  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755825  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755844  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755855  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755866  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:14:04.755871  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:14:04.755874  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755892  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:14:04.755898  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.755902  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.755905  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.755912  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.755919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755927  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.755932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.755946  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.755950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755957  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.755962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755969  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:14:04.755974  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:14:04.755977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.755994  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:14:04.756000  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756004  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756008  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756015  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756030  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756049  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756060  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756070  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:14:04.756075  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:14:04.756079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756096  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:14:04.756102  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756106  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756110  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756116  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756132  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756152  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756163  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756173  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:14:04.756178  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:14:04.756182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756199  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:14:04.756205  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756209  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756213  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756220  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756236  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756256  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756266  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756278  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:14:04.756283  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:14:04.756286  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756304  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:14:04.756310  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756314  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756317  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756324  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756339  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756358  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756363  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756370  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756382  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:14:04.756387  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:14:04.756390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756411  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:14:04.756418  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756422  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756426  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756433  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756440  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756449  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756470  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756482  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756492  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:14:04.756497  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:14:04.756501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756518  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:14:04.756524  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756528  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756532  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756539  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756555  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756575  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756585  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756596  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:14:04.756601  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:14:04.756605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756622  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:14:04.756628  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756632  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756636  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756643  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756659  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756679  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756689  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756693  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756699  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:14:04.756704  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:14:04.756708  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756726  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:14:04.756732  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756736  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756740  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756746  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756762  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756781  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756785  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756792  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756802  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:14:04.756807  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:14:04.756811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756828  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:14:04.756834  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756838  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756841  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756848  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756855  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756863  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756867  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756882  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756886  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756893  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.756897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756903  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:14:04.756908  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:14:04.756912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756929  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:14:04.756935  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.756939  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.756943  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.756950  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.756958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756966  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.756970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.756986  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.756990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.756997  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757008  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:14:04.757013  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:14:04.757017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757034  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:14:04.757040  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757044  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757048  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757055  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757070  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757074  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757089  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757100  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757110  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:14:04.757117  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:14:04.757120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757138  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:14:04.757144  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757147  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757151  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757158  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757173  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757193  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757203  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757214  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:14:04.757219  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:14:04.757222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757240  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:14:04.757246  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757250  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757253  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757260  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757274  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757279  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757286  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757294  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757305  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757315  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:14:04.757320  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:14:04.757324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757341  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:14:04.757347  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757351  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757355  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757362  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757377  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757399  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757411  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757421  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:14:04.757426  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:14:04.757430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757448  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:14:04.757463  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757466  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757470  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757477  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757492  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757510  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757514  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757520  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757530  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:14:04.757535  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:14:04.757538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757554  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:14:04.757560  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757564  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757568  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757574  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757588  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757600  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757607  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757618  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757627  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:14:04.757632  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:14:04.757635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757652  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:14:04.757657  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757661  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757665  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757671  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757685  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757703  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757714  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757723  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:14:04.757728  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:14:04.757731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757748  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:14:04.757754  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757757  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757761  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757767  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757781  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757800  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757810  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757819  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:14:04.757824  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:14:04.757828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757844  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:14:04.757850  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757854  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757857  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757864  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757877  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757896  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757907  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.757911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757916  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:14:04.757921  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:14:04.757924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757941  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:14:04.757947  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.757950  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.757954  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.757960  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.757967  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757975  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.757979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.757986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.757994  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.757998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758005  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758017  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758028  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758039  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758050  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:14:04.758055  1 13 json_db_to_gui() child args name <daq>
09-16 14:14:04.758058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758073  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:14:04.758079  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758083  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758086  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758093  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758106  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758126  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758131  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758137  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758147  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:14:04.758151  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:14:04.758155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758169  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:14:04.758175  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758178  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758182  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758188  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758195  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758203  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758207  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758221  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758232  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758241  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:14:04.758246  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:14:04.758249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758264  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:14:04.758269  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758273  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758277  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758283  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758297  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758315  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758326  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758335  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:14:04.758340  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:14:04.758343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758358  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:14:04.758363  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758367  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758371  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758377  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758384  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758391  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758398  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758414  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758418  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758449  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:14:04.758456  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758466  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:14:04.758471  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:14:04.758474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758489  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:14:04.758495  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758498  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758502  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758509  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758515  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758524  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758535  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758542  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758553  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758557  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758563  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.758568  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.758571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758586  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:14:04.758592  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758596  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758599  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758606  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758621  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758639  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758650  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758659  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.758664  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.758667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758682  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:14:04.758688  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758691  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758695  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758711  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758726  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758737  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758744  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758755  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758765  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.758770  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.758774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758788  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:14:04.758794  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758798  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758802  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758808  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758824  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758843  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758854  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758863  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.758869  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.758872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758887  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.758893  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758897  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758901  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.758908  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.758914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758922  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.758926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.758940  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.758945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758953  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.758956  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758962  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:14:04.758967  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:14:04.758971  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.758986  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:14:04.758992  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.758995  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.758999  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759005  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759012  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759020  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759025  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759039  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759051  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759061  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.759066  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.759069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759084  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:14:04.759090  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759094  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759097  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759104  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759118  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759137  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759148  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759158  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.759163  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.759166  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759181  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:14:04.759187  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759191  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759195  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759201  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759215  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759227  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759234  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759244  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759254  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.759259  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.759262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759277  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:14:04.759283  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759287  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759291  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759297  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759313  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759316  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759331  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759335  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759341  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759352  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.759357  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.759361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759376  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.759382  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759386  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759390  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759399  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759431  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759450  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759454  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759461  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759470  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:14:04.759475  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:14:04.759478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759494  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:14:04.759499  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759503  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759507  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759513  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759527  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759545  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759556  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759566  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.759571  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.759574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759589  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:14:04.759595  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759598  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759602  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759608  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759622  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759640  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759645  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759652  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759655  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759661  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.759666  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.759669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759684  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:14:04.759690  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759694  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759697  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759704  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759719  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759737  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759749  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759758  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.759763  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.759766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759781  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:14:04.759786  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759790  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759794  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759800  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759814  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759831  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759843  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759852  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.759857  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.759861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759875  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.759881  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759885  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759888  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759895  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759909  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.759913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.759927  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.759931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759938  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.759941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759947  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:14:04.759952  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:14:04.759955  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.759970  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:14:04.759975  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.759979  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.759983  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.759989  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.759996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760004  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760008  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760021  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760033  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760037  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760042  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.760047  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.760050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760065  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:14:04.760071  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760075  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760078  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760085  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760099  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760118  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760128  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760132  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760138  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.760142  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.760146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760160  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:14:04.760166  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760170  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760173  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760180  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760195  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760213  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760224  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760234  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.760238  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.760242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760257  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:14:04.760263  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760266  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760270  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760276  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760283  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760291  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760309  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760320  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760329  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.760334  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.760338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760353  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.760358  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760362  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760366  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760372  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760386  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760401  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760408  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760420  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760423  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760429  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:14:04.760434  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:14:04.760437  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760452  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:14:04.760458  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760461  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760465  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760472  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760486  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760505  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760516  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760526  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.760530  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.760534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760549  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:14:04.760554  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760558  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760562  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760568  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760582  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760600  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760611  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760621  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.760626  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.760629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760644  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:14:04.760650  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760653  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760657  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760663  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760677  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760695  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760706  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760716  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.760720  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.760724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760738  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:14:04.760744  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760748  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760751  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760758  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760773  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760790  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760801  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760811  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.760816  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.760819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760834  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.760840  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760843  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760847  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760853  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760868  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760885  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760896  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760899  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760905  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:14:04.760910  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:14:04.760914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760928  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:14:04.760934  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.760938  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.760941  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.760948  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.760954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760962  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.760966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.760980  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.760985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.760992  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.760995  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761001  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.761006  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.761009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761024  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:14:04.761030  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761033  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761037  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761043  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761057  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761075  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761087  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761090  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761096  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.761101  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.761104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761119  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:14:04.761125  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761128  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761132  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761138  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761152  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761170  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761180  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761190  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.761195  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.761198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761213  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:14:04.761219  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761223  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761226  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761233  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761247  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761251  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761258  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761265  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761276  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761286  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.761290  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.761294  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761309  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.761315  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761318  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761322  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761329  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761344  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761362  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761374  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761383  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:14:04.761388  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:14:04.761391  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761419  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:14:04.761426  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761439  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761442  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761449  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761463  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761467  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761482  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761493  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761502  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.761507  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.761510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761525  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:14:04.761531  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761535  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761538  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761545  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761560  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761564  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761579  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761590  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761599  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.761604  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.761607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761622  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:14:04.761628  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761632  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761635  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761642  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761656  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761674  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761685  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761695  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.761700  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.761703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761728  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:14:04.761734  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761738  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761741  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761748  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761764  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761783  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761788  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761795  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761806  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.761812  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.761816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761833  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.761839  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761843  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761847  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761855  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761872  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761894  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.761898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761907  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.761911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761918  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:14:04.761924  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:14:04.761927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761945  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:14:04.761952  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.761956  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.761961  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.761969  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.761978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.761986  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.761991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.761999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762007  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.762011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762020  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.762024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762033  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.762039  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.762043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762062  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:14:04.762069  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.762073  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.762077  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.762085  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.762094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762102  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.762107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762124  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.762128  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762136  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.762140  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762147  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.762153  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.762156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762174  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:14:04.762181  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.762185  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.762190  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.762198  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.762207  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762218  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.762223  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762242  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.762246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762255  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.762260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762267  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.762273  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.762276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762295  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:14:04.762302  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.762306  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.762311  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.762320  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.762329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762338  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.762343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762360  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.762364  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762372  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.762377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762397  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.762404  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.762408  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762427  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:14:04.762434  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.762438  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.762442  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.762452  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.762460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762470  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.762475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762492  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:14:04.762496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762512  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.762517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762527  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.762532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762540  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:14:04.762545  1 13 json_db_to_gui() child args name <main>
09-16 14:14:04.762549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762555  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:14:04.762559  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.762563  1 11 json_db_to_gui() operator() switch DATA
09-16 14:14:04.762566  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:14:04.762573  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:14:04.762580  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762588  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:14:04.762592  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:14:04.762612  1 11 json_db_to_gui() operator() begin
09-16 14:14:04.762617  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:14:04.762623  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:14:04.762627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:14:04.762643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762651  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:14:04.762655  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:14:04.762701  1 10 json_db_to_gui() created gui_node
09-16 14:14:04.795539  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.23 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_003_t" end time: Sep 16 14:14 CDT
"RoundConvert_GUIJson2DBJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

43/137 Testing: Convert_Fhicl2DBJson_001_t
43/137 Test: Convert_Fhicl2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/Convert_Fhicl2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/test001.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/test001.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.fcl" "-c" "test001.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/Convert_Fhicl2DBJson_001_t.d
"Convert_Fhicl2DBJson_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:04.888255  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:14:04.888357  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:14:04.888375  1  0 artdaq::database::fhicljson trace_enable
09-16 14:14:04.888391  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:14:04.889644  1  2 fhicl_to_json: begin
09-16 14:14:04.889874  1  2 fhicl_to_json: Created root nodes
09-16 14:14:04.889943  1  2 read_comments begin
09-16 14:14:04.894422  1  2 read_comments end result=1
09-16 14:14:04.894432  1  2 read_data begin
09-16 14:14:04.894440  1  2 read_data() begin
09-16 14:14:04.921327  1  2 parse_document() returned 6 entries.
09-16 14:14:04.921544  1  2 fcl2jsondb() key=<services>
09-16 14:14:04.921630  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:14:04.921799  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.921875  1  2 fcl2jsondb() key=<scheduler>
09-16 14:14:04.921889  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:14:04.921914  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.921933  1  2 fcl2jsondb() key=<fileMode>
09-16 14:14:04.921939  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:14:04.921971  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.922094  1  2 fcl2jsondb() key=<user>
09-16 14:14:04.922122  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:14:04.922137  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.922158  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:14:04.922181  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:14:04.922204  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.922223  1  2 fcl2jsondb() key=<service_provider>
09-16 14:14:04.922238  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:14:04.922261  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.922283  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:14:04.922289  1  2 fcl2jsondb() value=<6>
09-16 14:14:04.922303  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.924167  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:04.924204  1  2 fcl2jsondb() value=<8>
09-16 14:14:04.924251  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.925340  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:04.925352  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:14:04.925381  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.927295  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:14:04.927307  1  2 fcl2jsondb() value=<1>
09-16 14:14:04.927425  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.929221  1  2 fcl2jsondb() key=<daq>
09-16 14:14:04.929280  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:14:04.929305  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.929341  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:04.929349  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:14:04.929373  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.930274  1  2 fcl2jsondb() key=<event_builder>
09-16 14:14:04.930321  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:14:04.930357  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.930400  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:04.930407  1  2 fcl2jsondb() value=<16>
09-16 14:14:04.930423  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.931175  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:14:04.931183  1  2 fcl2jsondb() value=<0>
09-16 14:14:04.931200  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.931960  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:14:04.931975  1  2 fcl2jsondb() value=<2>
09-16 14:14:04.931996  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.933081  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:14:04.933090  1  2 fcl2jsondb() value=<2>
09-16 14:14:04.933106  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.933825  1  2 fcl2jsondb() key=<use_art>
09-16 14:14:04.933832  1  2 fcl2jsondb() value=<true>
09-16 14:14:04.933848  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:04.933922  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:14:04.933928  1  2 fcl2jsondb() value=<true>
09-16 14:14:04.933942  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:04.933963  1  2 fcl2jsondb() key=<verbose>
09-16 14:14:04.933968  1  2 fcl2jsondb() value=<false>
09-16 14:14:04.933981  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:04.934023  1  2 fcl2jsondb() key=<metrics>
09-16 14:14:04.934042  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:14:04.934055  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.934075  1  2 fcl2jsondb() key=<evbFile>
09-16 14:14:04.934085  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:14:04.934097  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.934113  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:14:04.934118  1  2 fcl2jsondb() value=<"file">
09-16 14:14:04.934130  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.934149  1  2 fcl2jsondb() key=<level>
09-16 14:14:04.934154  1  2 fcl2jsondb() value=<3>
09-16 14:14:04.934167  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.934890  1  2 fcl2jsondb() key=<fileName>
09-16 14:14:04.934897  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:14:04.934966  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.934991  1  2 fcl2jsondb() key=<uniquify>
09-16 14:14:04.934996  1  2 fcl2jsondb() value=<true>
09-16 14:14:04.935057  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:04.935150  1  2 fcl2jsondb() key=<outputs>
09-16 14:14:04.935196  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:14:04.935212  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.935233  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:14:04.935249  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:14:04.935262  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.935280  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:04.935285  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:14:04.935297  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.935319  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:14:04.935331  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:14:04.935410  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.935433  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:14:04.935442  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:14:04.935512  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:04.935637  1  2 fcl2jsondb() key=<physics>
09-16 14:14:04.935668  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:14:04.935684  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.935706  1  2 fcl2jsondb() key=<filters>
09-16 14:14:04.935722  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:14:04.935736  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.935754  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:14:04.935763  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:14:04.935833  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.935853  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:04.935858  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:14:04.935929  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.935953  1  2 fcl2jsondb() key=<nth>
09-16 14:14:04.935958  1  2 fcl2jsondb() value=<2>
09-16 14:14:04.936029  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.936765  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:14:04.936777  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:14:04.936792  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.936808  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:04.936812  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:14:04.936825  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.936844  1  2 fcl2jsondb() key=<nth>
09-16 14:14:04.936848  1  2 fcl2jsondb() value=<3>
09-16 14:14:04.936919  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.937653  1  2 fcl2jsondb() key=<pmod2>
09-16 14:14:04.937663  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:14:04.937736  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:04.937771  1  2 fcl2jsondb() key=<pmod3>
09-16 14:14:04.937779  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:14:04.937849  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:04.937883  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:14:04.937892  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:14:04.937907  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:04.937961  1  2 fcl2jsondb() key=<source>
09-16 14:14:04.937972  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:14:04.937985  1  2 fcl2jsondb() value type=<table>
09-16 14:14:04.938002  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:04.938006  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:14:04.938075  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.938099  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:14:04.938104  1  2 fcl2jsondb() value=<900>
09-16 14:14:04.938173  1  2 fcl2jsondb() value type=<number>
09-16 14:14:04.938905  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:14:04.938912  1  2 fcl2jsondb() value=<true>
09-16 14:14:04.939034  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:04.939068  1  2 fcl2jsondb() key=<process_name>
09-16 14:14:04.939073  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:14:04.939087  1  2 fcl2jsondb() value type=<string>
09-16 14:14:04.939101  1  2 read_data() end
09-16 14:14:04.939125  1  2 read_data end result=1
09-16 14:14:04.939129  1  2 fhicl_to_json: write() begin
09-16 14:14:04.950247  1  2 fhicl_to_json: write() end
09-16 14:14:04.950257  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_001_t" end time: Sep 16 14:14 CDT
"Convert_Fhicl2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

44/137 Testing: Convert_DBJson2Fhicl_001_t
44/137 Test: Convert_DBJson2Fhicl_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/Convert_DBJson2Fhicl_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/test001.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/test001.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.json" "-c" "test001.fcl" "-t" "Convert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/Convert_DBJson2Fhicl_001_t.d
"Convert_DBJson2Fhicl_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:05.003061  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:14:05.003231  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:14:05.003266  1  0 artdaq::database::fhicljson trace_enable
09-16 14:14:05.003314  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:14:05.005464  1  3 json_to_fhicl: begin
09-16 14:14:05.005506  1  3 json_to_fhicl: Reading json root nodes
09-16 14:14:05.028092  1  2 write_data() begin
09-16 14:14:05.028322  1  2 json2fcldb() key=<services> type=<table>
09-16 14:14:05.028486  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:14:05.028516  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:14:05.028774  1  2 json2fcldb() key=<user> type=<table>
09-16 14:14:05.028802  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:14:05.028856  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:14:05.028891  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:14:05.029009  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:14:05.029055  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:14:05.029105  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:14:05.029170  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:14:05.029195  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:14:05.029225  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:14:05.029249  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:14:05.029278  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:14:05.029306  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:14:05.029335  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:14:05.029364  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:14:05.029444  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:14:05.029475  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:14:05.029518  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:14:05.029543  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:14:05.029566  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:14:05.029595  1  2 json2fcldb() key=<level> type=<number>
09-16 14:14:05.029625  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:14:05.029669  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:14:05.029752  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:14:05.029780  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:14:05.029813  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.029842  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:14:05.029865  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:14:05.030100  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:14:05.030127  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:14:05.030150  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:14:05.030172  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.030201  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:14:05.030238  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:14:05.030262  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.030290  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:14:05.030336  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:14:05.030375  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:14:05.030421  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:14:05.030484  1  2 json2fcldb() key=<source> type=<table>
09-16 14:14:05.030509  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.030538  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:14:05.030567  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:14:05.030605  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:14:05.040091  1  2 write_data() end
09-16 14:14:05.040141  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:14:05.040154  1  3 json_to_fhicl: end
Running test:<Convert_DBJson2Fhicl>
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2Fhicl_001_t" end time: Sep 16 14:14 CDT
"Convert_DBJson2Fhicl_001_t" time elapsed: 00:00:00
----------------------------------------------------------

45/137 Testing: RoundConvert_Fhicl2DBJson_001_t
45/137 Test: RoundConvert_Fhicl2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/RoundConvert_Fhicl2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/test001.fcl" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.fcl" "-c" "test001.fcl" "-t" "RoundConvert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/RoundConvert_Fhicl2DBJson_001_t.d
"RoundConvert_Fhicl2DBJson_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:05.064943  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:14:05.065077  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:14:05.065110  1  0 artdaq::database::fhicljson trace_enable
09-16 14:14:05.065141  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:14:05.066424  1  2 fhicl_to_json: begin
09-16 14:14:05.066727  1  2 fhicl_to_json: Created root nodes
09-16 14:14:05.066826  1  2 read_comments begin
09-16 14:14:05.070846  1  2 read_comments end result=1
09-16 14:14:05.070860  1  2 read_data begin
09-16 14:14:05.070876  1  2 read_data() begin
09-16 14:14:05.099994  1  2 parse_document() returned 6 entries.
09-16 14:14:05.100267  1  2 fcl2jsondb() key=<services>
09-16 14:14:05.100357  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:14:05.100510  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.100566  1  2 fcl2jsondb() key=<scheduler>
09-16 14:14:05.100582  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:14:05.100608  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.100635  1  2 fcl2jsondb() key=<fileMode>
09-16 14:14:05.100643  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:14:05.100667  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.100758  1  2 fcl2jsondb() key=<user>
09-16 14:14:05.100785  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:14:05.100809  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.100837  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:14:05.100858  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:14:05.100883  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.100918  1  2 fcl2jsondb() key=<service_provider>
09-16 14:14:05.100927  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:14:05.100952  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.100982  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:14:05.100991  1  2 fcl2jsondb() value=<6>
09-16 14:14:05.101016  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.102243  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:05.102259  1  2 fcl2jsondb() value=<8>
09-16 14:14:05.102290  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.103260  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:05.103270  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:14:05.103298  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.104405  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:14:05.104416  1  2 fcl2jsondb() value=<1>
09-16 14:14:05.104506  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.105579  1  2 fcl2jsondb() key=<daq>
09-16 14:14:05.105640  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:14:05.105669  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.105712  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:05.105722  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:14:05.105749  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.106729  1  2 fcl2jsondb() key=<event_builder>
09-16 14:14:05.106762  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:14:05.106791  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.106820  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:05.106828  1  2 fcl2jsondb() value=<16>
09-16 14:14:05.106851  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.107777  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:14:05.107792  1  2 fcl2jsondb() value=<0>
09-16 14:14:05.107822  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.108836  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:14:05.108846  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.108875  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.109858  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:14:05.109869  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.109897  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.110878  1  2 fcl2jsondb() key=<use_art>
09-16 14:14:05.110887  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.110916  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.111001  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:14:05.111010  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.111036  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.111068  1  2 fcl2jsondb() key=<verbose>
09-16 14:14:05.111076  1  2 fcl2jsondb() value=<false>
09-16 14:14:05.111101  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.111158  1  2 fcl2jsondb() key=<metrics>
09-16 14:14:05.111185  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:14:05.111210  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.111240  1  2 fcl2jsondb() key=<evbFile>
09-16 14:14:05.111261  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:14:05.111285  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.111312  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:14:05.111320  1  2 fcl2jsondb() value=<"file">
09-16 14:14:05.111344  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.111374  1  2 fcl2jsondb() key=<level>
09-16 14:14:05.111382  1  2 fcl2jsondb() value=<3>
09-16 14:14:05.111412  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.112350  1  2 fcl2jsondb() key=<fileName>
09-16 14:14:05.112360  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:14:05.112452  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.112486  1  2 fcl2jsondb() key=<uniquify>
09-16 14:14:05.112495  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.112520  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.112624  1  2 fcl2jsondb() key=<outputs>
09-16 14:14:05.112684  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:14:05.112711  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.112742  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:14:05.112769  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:14:05.112794  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.112823  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.112831  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:14:05.112855  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.112887  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:14:05.112909  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:14:05.112998  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.113030  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:14:05.113045  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:14:05.113139  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.113278  1  2 fcl2jsondb() key=<physics>
09-16 14:14:05.113321  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:14:05.113348  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.113382  1  2 fcl2jsondb() key=<filters>
09-16 14:14:05.113414  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:14:05.113441  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.113471  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:14:05.113488  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:14:05.113577  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.113608  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.113616  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:14:05.113708  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.113742  1  2 fcl2jsondb() key=<nth>
09-16 14:14:05.113750  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.113841  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.114803  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:14:05.114823  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:14:05.114849  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.114877  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.114885  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:14:05.114910  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.114939  1  2 fcl2jsondb() key=<nth>
09-16 14:14:05.114947  1  2 fcl2jsondb() value=<3>
09-16 14:14:05.115041  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.116017  1  2 fcl2jsondb() key=<pmod2>
09-16 14:14:05.116033  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:14:05.116060  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.116103  1  2 fcl2jsondb() key=<pmod3>
09-16 14:14:05.116116  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:14:05.116209  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.116255  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:14:05.116269  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:14:05.116295  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.116365  1  2 fcl2jsondb() key=<source>
09-16 14:14:05.116384  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:14:05.116413  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.116442  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.116450  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:14:05.116541  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.116575  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:14:05.116583  1  2 fcl2jsondb() value=<900>
09-16 14:14:05.116703  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.117744  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:14:05.117754  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.117848  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.117895  1  2 fcl2jsondb() key=<process_name>
09-16 14:14:05.117903  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:14:05.117929  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.117954  1  2 read_data() end
09-16 14:14:05.117988  1  2 read_data end result=1
09-16 14:14:05.117996  1  2 fhicl_to_json: write() begin
09-16 14:14:05.129637  1  2 fhicl_to_json: write() end
09-16 14:14:05.129651  1  2 fhicl_to_json: end
09-16 14:14:05.129731  1  3 json_to_fhicl: begin
09-16 14:14:05.129742  1  3 json_to_fhicl: Reading json root nodes
09-16 14:14:05.142135  1  2 write_data() begin
09-16 14:14:05.142241  1  2 json2fcldb() key=<services> type=<table>
09-16 14:14:05.142326  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:14:05.142338  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:14:05.142474  1  2 json2fcldb() key=<user> type=<table>
09-16 14:14:05.142488  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:14:05.142497  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:14:05.142509  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:14:05.142551  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:14:05.142565  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:14:05.142576  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:14:05.142611  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:14:05.142622  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:14:05.142633  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:14:05.142642  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:14:05.142653  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:14:05.142664  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:14:05.142675  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:14:05.142687  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:14:05.142722  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:14:05.142735  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:14:05.142754  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:14:05.142765  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:14:05.142773  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:14:05.142785  1  2 json2fcldb() key=<level> type=<number>
09-16 14:14:05.142797  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:14:05.142822  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:14:05.142862  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:14:05.142873  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:14:05.142882  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.142893  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:14:05.142902  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:14:05.143058  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:14:05.143071  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:14:05.143080  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:14:05.143089  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.143101  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:14:05.143118  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:14:05.143128  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.143140  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:14:05.143164  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:14:05.143184  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:14:05.143202  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:14:05.143237  1  2 json2fcldb() key=<source> type=<table>
09-16 14:14:05.143248  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.143260  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:14:05.143273  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:14:05.143290  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:14:05.148754  1  2 write_data() end
09-16 14:14:05.148765  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:14:05.148771  1  3 json_to_fhicl: end
Running test:<RoundConvert_Fhicl2DBJson>
fhicl_to_json succeeded.
json_to_fhicl succeeded.
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_Fhicl2DBJson_001_t" end time: Sep 16 14:14 CDT
"RoundConvert_Fhicl2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

46/137 Testing: RoundConvert_DBJson2Fhicl_004_t
46/137 Test: RoundConvert_DBJson2Fhicl_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/RoundConvert_DBJson2Fhicl_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/test004.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test004.json" "-c" "test004.json" "-t" "RoundConvert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/RoundConvert_DBJson2Fhicl_004_t.d
"RoundConvert_DBJson2Fhicl_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:05.177187  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:14:05.177385  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:14:05.177441  1  0 artdaq::database::fhicljson trace_enable
09-16 14:14:05.177490  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:14:05.180197  1  3 json_to_fhicl: begin
09-16 14:14:05.180245  1  3 json_to_fhicl: Reading json root nodes
09-16 14:14:05.206898  1  2 write_data() begin
09-16 14:14:05.207186  1  2 json2fcldb() key=<services> type=<table>
09-16 14:14:05.207372  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:14:05.207417  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:14:05.207716  1  2 json2fcldb() key=<user> type=<table>
09-16 14:14:05.207752  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:14:05.207779  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:14:05.207816  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:14:05.207935  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:14:05.207977  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:14:05.208013  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:14:05.208138  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:14:05.208171  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:14:05.208209  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:14:05.208240  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:14:05.208280  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:14:05.208318  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:14:05.208355  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:14:05.208400  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:14:05.208508  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:14:05.208547  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:14:05.208614  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:14:05.208646  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:14:05.208673  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:14:05.208711  1  2 json2fcldb() key=<level> type=<number>
09-16 14:14:05.208751  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:14:05.208816  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:14:05.208952  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:14:05.208984  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:14:05.209012  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.209051  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:14:05.209080  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:14:05.209478  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:14:05.209511  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:14:05.209539  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:14:05.209564  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.209603  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:14:05.209658  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:14:05.209689  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.209727  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:14:05.209808  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:14:05.209866  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:14:05.209925  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:14:05.210042  1  2 json2fcldb() key=<source> type=<table>
09-16 14:14:05.210076  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:14:05.210112  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:14:05.210149  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:14:05.210203  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:14:05.224328  1  2 write_data() end
09-16 14:14:05.224374  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:14:05.224384  1  3 json_to_fhicl: end
09-16 14:14:05.224500  1  2 fhicl_to_json: begin
09-16 14:14:05.224701  1  2 fhicl_to_json: Created root nodes
09-16 14:14:05.224843  1  2 read_comments begin
09-16 14:14:05.231202  1  2 read_comments end result=1
09-16 14:14:05.231229  1  2 read_data begin
09-16 14:14:05.231255  1  2 read_data() begin
09-16 14:14:05.269207  1  2 parse_document() returned 6 entries.
09-16 14:14:05.269405  1  2 fcl2jsondb() key=<services>
09-16 14:14:05.269479  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:14:05.269577  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.269628  1  2 fcl2jsondb() key=<scheduler>
09-16 14:14:05.269642  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:14:05.269661  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.269682  1  2 fcl2jsondb() key=<fileMode>
09-16 14:14:05.269688  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:14:05.269705  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.269778  1  2 fcl2jsondb() key=<user>
09-16 14:14:05.269800  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:14:05.269818  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.269840  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:14:05.269856  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:14:05.269874  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.269895  1  2 fcl2jsondb() key=<service_provider>
09-16 14:14:05.269900  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:14:05.269917  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.269942  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:14:05.269948  1  2 fcl2jsondb() value=<6>
09-16 14:14:05.269965  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.271128  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:05.271139  1  2 fcl2jsondb() value=<8>
09-16 14:14:05.271161  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.272209  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:05.272219  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:14:05.272240  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.273401  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:14:05.273411  1  2 fcl2jsondb() value=<1>
09-16 14:14:05.273503  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.274616  1  2 fcl2jsondb() key=<daq>
09-16 14:14:05.274656  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:14:05.274677  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.274703  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:05.274708  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:14:05.274725  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.275770  1  2 fcl2jsondb() key=<event_builder>
09-16 14:14:05.275790  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:14:05.275810  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.275833  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:05.275839  1  2 fcl2jsondb() value=<16>
09-16 14:14:05.275856  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.276874  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:14:05.276884  1  2 fcl2jsondb() value=<0>
09-16 14:14:05.276904  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.277913  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:14:05.277922  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.277943  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.278950  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:14:05.278960  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.278980  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.279996  1  2 fcl2jsondb() key=<use_art>
09-16 14:14:05.280005  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.280026  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.280080  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:14:05.280088  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.280106  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.280130  1  2 fcl2jsondb() key=<verbose>
09-16 14:14:05.280137  1  2 fcl2jsondb() value=<false>
09-16 14:14:05.280154  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.280204  1  2 fcl2jsondb() key=<metrics>
09-16 14:14:05.280224  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:14:05.280241  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.280263  1  2 fcl2jsondb() key=<evbFile>
09-16 14:14:05.280277  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:14:05.280295  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.280314  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:14:05.280320  1  2 fcl2jsondb() value=<"file">
09-16 14:14:05.280336  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.280359  1  2 fcl2jsondb() key=<level>
09-16 14:14:05.280365  1  2 fcl2jsondb() value=<3>
09-16 14:14:05.280381  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.281389  1  2 fcl2jsondb() key=<fileName>
09-16 14:14:05.281401  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:14:05.281490  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.281520  1  2 fcl2jsondb() key=<uniquify>
09-16 14:14:05.281527  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.281545  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.281651  1  2 fcl2jsondb() key=<outputs>
09-16 14:14:05.281699  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:14:05.281720  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.281745  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:14:05.281766  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:14:05.281784  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.281805  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.281812  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:14:05.281828  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.281854  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:14:05.281870  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:14:05.281964  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.281992  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:14:05.282003  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:14:05.282097  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.282213  1  2 fcl2jsondb() key=<physics>
09-16 14:14:05.282251  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:14:05.282271  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.282300  1  2 fcl2jsondb() key=<filters>
09-16 14:14:05.282320  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:14:05.282338  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.282360  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:14:05.282371  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:14:05.282481  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.282507  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.282514  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:14:05.282606  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.282635  1  2 fcl2jsondb() key=<nth>
09-16 14:14:05.282641  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.282732  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.283734  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:14:05.283750  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:14:05.283769  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.283789  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.283795  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:14:05.283810  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.283832  1  2 fcl2jsondb() key=<nth>
09-16 14:14:05.283839  1  2 fcl2jsondb() value=<3>
09-16 14:14:05.283933  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.284959  1  2 fcl2jsondb() key=<pmod2>
09-16 14:14:05.284973  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:14:05.284994  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.285030  1  2 fcl2jsondb() key=<pmod3>
09-16 14:14:05.285041  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:14:05.285135  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.285177  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:14:05.285188  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:14:05.285207  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.285274  1  2 fcl2jsondb() key=<source>
09-16 14:14:05.285289  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:14:05.285306  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.285326  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.285332  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:14:05.285429  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.285458  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:14:05.285464  1  2 fcl2jsondb() value=<900>
09-16 14:14:05.285555  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.286541  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:14:05.286550  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.286646  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.286687  1  2 fcl2jsondb() key=<process_name>
09-16 14:14:05.286694  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:14:05.286712  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.286729  1  2 read_data() end
09-16 14:14:05.286756  1  2 read_data end result=1
09-16 14:14:05.286761  1  2 fhicl_to_json: write() begin
09-16 14:14:05.299245  1  2 fhicl_to_json: write() end
09-16 14:14:05.299256  1  2 fhicl_to_json: end
Running test:<RoundConvert_DBJson2Fhicl>
json_to_fhicl succeeded.
fhicl_to_json succeeded.
<end of output>
Test time =   0.17 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2Fhicl_004_t" end time: Sep 16 14:14 CDT
"RoundConvert_DBJson2Fhicl_004_t" time elapsed: 00:00:00
----------------------------------------------------------

47/137 Testing: Convert_Fhicl2DBJson_005_t
47/137 Test: Convert_Fhicl2DBJson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/Convert_Fhicl2DBJson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/test005.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/test005.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test005.fcl" "-c" "test005.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/Convert_Fhicl2DBJson_005_t.d
"Convert_Fhicl2DBJson_005_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:05.350547  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:14:05.350715  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:14:05.350754  1  0 artdaq::database::fhicljson trace_enable
09-16 14:14:05.350779  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:14:05.352946  1  2 fhicl_to_json: begin
09-16 14:14:05.353362  1  2 fhicl_to_json: Created root nodes
09-16 14:14:05.353508  1  2 read_comments begin
09-16 14:14:05.360233  1  2 read_comments end result=1
09-16 14:14:05.360250  1  2 read_data begin
09-16 14:14:05.360265  1  2 read_data() begin
09-16 14:14:05.411464  1  2 parse_document() returned 6 entries.
09-16 14:14:05.411678  1  2 fcl2jsondb() key=<services>
09-16 14:14:05.411747  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE" errorOnFailureToPut:false} NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:4 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:14:05.411862  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.411915  1  2 fcl2jsondb() key=<scheduler>
09-16 14:14:05.411931  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE" errorOnFailureToPut:false}>
09-16 14:14:05.411951  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.411972  1  2 fcl2jsondb() key=<fileMode>
09-16 14:14:05.411978  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:14:05.411995  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.412067  1  2 fcl2jsondb() key=<errorOnFailureToPut>
09-16 14:14:05.412076  1  2 fcl2jsondb() value=<false>
09-16 14:14:05.412096  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.412184  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:14:05.412203  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:4 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:14:05.412223  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.412245  1  2 fcl2jsondb() key=<service_provider>
09-16 14:14:05.412253  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:14:05.412271  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.412297  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:14:05.412304  1  2 fcl2jsondb() value=<4>
09-16 14:14:05.412322  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.413752  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:05.413764  1  2 fcl2jsondb() value=<8>
09-16 14:14:05.413789  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.414903  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:05.414914  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:14:05.414936  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.416165  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:14:05.416175  1  2 fcl2jsondb() value=<1>
09-16 14:14:05.416268  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.417408  1  2 fcl2jsondb() key=<daq>
09-16 14:14:05.417462  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:14:05.417487  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.417515  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:05.417522  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:14:05.417540  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.418697  1  2 fcl2jsondb() key=<event_builder>
09-16 14:14:05.418720  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:14:05.418743  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.418767  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:05.418774  1  2 fcl2jsondb() value=<16>
09-16 14:14:05.418793  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.419917  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:14:05.419928  1  2 fcl2jsondb() value=<0>
09-16 14:14:05.419950  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.421188  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:14:05.421199  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.421222  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.422293  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:14:05.422303  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.422325  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.423440  1  2 fcl2jsondb() key=<use_art>
09-16 14:14:05.423450  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.423472  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.423499  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:14:05.423507  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.423525  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.423552  1  2 fcl2jsondb() key=<verbose>
09-16 14:14:05.423558  1  2 fcl2jsondb() value=<false>
09-16 14:14:05.423576  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.423628  1  2 fcl2jsondb() key=<metrics>
09-16 14:14:05.423649  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:14:05.423668  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.423692  1  2 fcl2jsondb() key=<evbFile>
09-16 14:14:05.423706  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:14:05.423723  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.423765  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:14:05.423772  1  2 fcl2jsondb() value=<"file">
09-16 14:14:05.423790  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.423814  1  2 fcl2jsondb() key=<level>
09-16 14:14:05.423821  1  2 fcl2jsondb() value=<3>
09-16 14:14:05.423839  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.424917  1  2 fcl2jsondb() key=<fileName>
09-16 14:14:05.424927  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:14:05.424949  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.424975  1  2 fcl2jsondb() key=<uniquify>
09-16 14:14:05.424982  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.425000  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.425112  1  2 fcl2jsondb() key=<outputs>
09-16 14:14:05.425162  1  2 fcl2jsondb() value=<{rootMPIOutput:{module_type:"RootMPIOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:14:05.425184  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.425212  1  2 fcl2jsondb() key=<rootMPIOutput>
09-16 14:14:05.425234  1  2 fcl2jsondb() value=<{module_type:"RootMPIOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:14:05.425253  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.425276  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.425283  1  2 fcl2jsondb() value=<"RootMPIOutput">
09-16 14:14:05.425300  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.425328  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:14:05.425344  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:14:05.425362  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.425384  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:14:05.425400  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:14:05.425421  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.425564  1  2 fcl2jsondb() key=<physics>
09-16 14:14:05.425610  1  2 fcl2jsondb() value=<{analyzers:{} producers:{} filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} p1:[] pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["rootMPIOutput"]}>
09-16 14:14:05.425631  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.425662  1  2 fcl2jsondb() key=<analyzers>
09-16 14:14:05.425672  1  2 fcl2jsondb() value=<{}>
09-16 14:14:05.425690  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.425727  1  2 fcl2jsondb() key=<producers>
09-16 14:14:05.425737  1  2 fcl2jsondb() value=<{}>
09-16 14:14:05.425754  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.425791  1  2 fcl2jsondb() key=<filters>
09-16 14:14:05.425813  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:14:05.425832  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.425855  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:14:05.425868  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:14:05.425888  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.425909  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.425916  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:14:05.425933  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.425957  1  2 fcl2jsondb() key=<nth>
09-16 14:14:05.425963  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.425981  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.427090  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:14:05.427108  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:14:05.427129  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.427151  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.427157  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:14:05.427175  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.427199  1  2 fcl2jsondb() key=<nth>
09-16 14:14:05.427206  1  2 fcl2jsondb() value=<3>
09-16 14:14:05.427224  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.428376  1  2 fcl2jsondb() key=<p1>
09-16 14:14:05.428389  1  2 fcl2jsondb() value=<[]>
09-16 14:14:05.428416  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.428455  1  2 fcl2jsondb() key=<pmod2>
09-16 14:14:05.428467  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:14:05.428487  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.428527  1  2 fcl2jsondb() key=<pmod3>
09-16 14:14:05.428538  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:14:05.428559  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.428597  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:14:05.428609  1  2 fcl2jsondb() value=<["rootMPIOutput"]>
09-16 14:14:05.428629  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.428754  1  2 fcl2jsondb() key=<source>
09-16 14:14:05.428822  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:2.5e6 resume_after_timeout:true fragment_type_map:[[1,"missed"],[3,"V1720"],[4,"V1724"],[6,"TOY1"],[7,"TOY2"],[8,"ASCII"]]}>
09-16 14:14:05.428859  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.428891  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.428909  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:14:05.428928  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.428969  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:14:05.428976  1  2 fcl2jsondb() value=<2.5e6>
09-16 14:14:05.428993  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.430108  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:14:05.430119  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.430140  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.430186  1  2 fcl2jsondb() key=<fragment_type_map>
09-16 14:14:05.430225  1  2 fcl2jsondb() value=<[[1,"missed"],[3,"V1720"],[4,"V1724"],[6,"TOY1"],[7,"TOY2"],[8,"ASCII"]]>
09-16 14:14:05.430247  1  2 fcl2jsondb() value type=<sequence>
09-16 14:14:05.436403  1  2 fcl2jsondb() key=<process_name>
09-16 14:14:05.436413  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:14:05.436434  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.436452  1  2 read_data() end
09-16 14:14:05.436483  1  2 read_data end result=1
09-16 14:14:05.436490  1  2 fhicl_to_json: write() begin
09-16 14:14:05.450946  1  2 fhicl_to_json: write() end
09-16 14:14:05.450960  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.16 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_005_t" end time: Sep 16 14:14 CDT
"Convert_Fhicl2DBJson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

48/137 Testing: Convert_Fhicl2DBJson_006_t
48/137 Test: Convert_Fhicl2DBJson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/Convert_Fhicl2DBJson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/test006.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/test006.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test006.fcl" "-c" "test006.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/Convert_Fhicl2DBJson_006_t.d
"Convert_Fhicl2DBJson_006_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:05.503694  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:14:05.503810  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:14:05.503830  1  0 artdaq::database::fhicljson trace_enable
09-16 14:14:05.503849  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:14:05.505196  1  2 fhicl_to_json: begin
09-16 14:14:05.505478  1  2 fhicl_to_json: Created root nodes
09-16 14:14:05.505556  1  2 read_comments begin
09-16 14:14:05.510140  1  2 read_comments end result=1
09-16 14:14:05.510150  1  2 read_data begin
09-16 14:14:05.510160  1  2 read_data() begin
09-16 14:14:05.531494  1  2 parse_document() returned 6 entries.
09-16 14:14:05.531688  1  2 fcl2jsondb() key=<OnlineMonitoring_standard>
09-16 14:14:05.531754  1  2 fcl2jsondb() value=<{module_type:"OnlineMonitoring" DataDirPath:"/storage/data/" MonitorSavePath:"/data2/lbnedaq/monitoring/" EVDSavePath:"/data2/lbnedaq/eventDisplay/" ChannelMapFile:"/data/lbnedaq/lbne-artdaq-standard/lbne-artdaq/lbne-artdaq/OnlineMonitoring/detailedMap.txt" ImageType:".png" InitialMonitoringUpdate:30 MonitoringRefreshRate:500 EventDisplayRefreshRate:30 DetailedMonitoring:false ScopeMonitoring:false DriftVelocity:9e-1 CollectionPedestal:550 MicroslicePreBuffer:5 MicrosliceTriggerLength:5}>
09-16 14:14:05.531856  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.531924  1  2 fcl2jsondb() key=<module_type>
09-16 14:14:05.531934  1  2 fcl2jsondb() value=<"OnlineMonitoring">
09-16 14:14:05.531961  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.532047  1  2 fcl2jsondb() key=<DataDirPath>
09-16 14:14:05.532057  1  2 fcl2jsondb() value=<"/storage/data/">
09-16 14:14:05.532251  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.532295  1  2 fcl2jsondb() key=<MonitorSavePath>
09-16 14:14:05.532306  1  2 fcl2jsondb() value=<"/data2/lbnedaq/monitoring/">
09-16 14:14:05.532485  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.532530  1  2 fcl2jsondb() key=<EVDSavePath>
09-16 14:14:05.532539  1  2 fcl2jsondb() value=<"/data2/lbnedaq/eventDisplay/">
09-16 14:14:05.532696  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.532725  1  2 fcl2jsondb() key=<ChannelMapFile>
09-16 14:14:05.532730  1  2 fcl2jsondb() value=<"/data/lbnedaq/lbne-artdaq-standard/lbne-artdaq/lbne-artdaq/OnlineMonitoring/detailedMap.txt">
09-16 14:14:05.532872  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.532915  1  2 fcl2jsondb() key=<ImageType>
09-16 14:14:05.532924  1  2 fcl2jsondb() value=<".png">
09-16 14:14:05.533063  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.533107  1  2 fcl2jsondb() key=<InitialMonitoringUpdate>
09-16 14:14:05.533117  1  2 fcl2jsondb() value=<30>
09-16 14:14:05.533308  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.535371  1  2 fcl2jsondb() key=<MonitoringRefreshRate>
09-16 14:14:05.535385  1  2 fcl2jsondb() value=<500>
09-16 14:14:05.535567  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.537374  1  2 fcl2jsondb() key=<EventDisplayRefreshRate>
09-16 14:14:05.537387  1  2 fcl2jsondb() value=<30>
09-16 14:14:05.537565  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.538622  1  2 fcl2jsondb() key=<DetailedMonitoring>
09-16 14:14:05.538653  1  2 fcl2jsondb() value=<false>
09-16 14:14:05.538875  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.539008  1  2 fcl2jsondb() key=<ScopeMonitoring>
09-16 14:14:05.539018  1  2 fcl2jsondb() value=<false>
09-16 14:14:05.539199  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.539243  1  2 fcl2jsondb() key=<DriftVelocity>
09-16 14:14:05.539253  1  2 fcl2jsondb() value=<9e-1>
09-16 14:14:05.539453  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.540681  1  2 fcl2jsondb() key=<CollectionPedestal>
09-16 14:14:05.540693  1  2 fcl2jsondb() value=<550>
09-16 14:14:05.540899  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.542682  1  2 fcl2jsondb() key=<MicroslicePreBuffer>
09-16 14:14:05.542695  1  2 fcl2jsondb() value=<5>
09-16 14:14:05.542854  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.544575  1  2 fcl2jsondb() key=<MicrosliceTriggerLength>
09-16 14:14:05.544586  1  2 fcl2jsondb() value=<5>
09-16 14:14:05.544733  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.546025  1  2 fcl2jsondb() key=<OnlineMonitoring_detailed>
09-16 14:14:05.546046  1  2 fcl2jsondb() value=<"@local::OnlineMonitoring_standard">
09-16 14:14:05.546075  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.546104  1  2 fcl2jsondb() key=<OnlineMonitoring_detailed.DetailedMonitoring>
09-16 14:14:05.546110  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.546134  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.546170  1  2 fcl2jsondb() key=<OnlineMonitoring_scope>
09-16 14:14:05.546176  1  2 fcl2jsondb() value=<"@local::OnlineMonitoring_standard">
09-16 14:14:05.546199  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.546216  1  2 fcl2jsondb() key=<OnlineMonitoring_scope.ScopeMonitoring>
09-16 14:14:05.546230  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.546253  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.546311  1  2 fcl2jsondb() key=<process_name>
09-16 14:14:05.546317  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:14:05.546338  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.546356  1  2 read_data() end
09-16 14:14:05.546377  1  2 read_data end result=1
09-16 14:14:05.546381  1  2 fhicl_to_json: write() begin
09-16 14:14:05.554184  1  2 fhicl_to_json: write() end
09-16 14:14:05.554204  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_006_t" end time: Sep 16 14:14 CDT
"Convert_Fhicl2DBJson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

49/137 Testing: Convert_Fhicl2DBJson_007_t
49/137 Test: Convert_Fhicl2DBJson_007_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/Convert_Fhicl2DBJson_007_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/test007.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/test007.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test007.fcl" "-c" "test007.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/Convert_Fhicl2DBJson_007_t.d
"Convert_Fhicl2DBJson_007_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:05.592818  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:14:05.592921  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:14:05.592938  1  0 artdaq::database::fhicljson trace_enable
09-16 14:14:05.592954  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:14:05.594711  1  2 fhicl_to_json: begin
09-16 14:14:05.594939  1  2 fhicl_to_json: Created root nodes
09-16 14:14:05.595006  1  2 read_comments begin
09-16 14:14:05.599805  1  2 read_comments end result=1
09-16 14:14:05.599814  1  2 read_data begin
09-16 14:14:05.599821  1  2 read_data() begin
09-16 14:14:05.642392  1  2 parse_document() returned 86 entries.
09-16 14:14:05.642574  1  2 fcl2jsondb() key=<fhicl_pound_include_0>
09-16 14:14:05.642590  1  2 fcl2jsondb() value=<"metrics.fcl">
09-16 14:14:05.642675  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.642741  1  2 fcl2jsondb() key=<rce_standard>
09-16 14:14:05.642795  1  2 fcl2jsondb() value=<{metrics:"@local::metrics" max_fragment_size_words:1.048576e6 fragment_receiver:{mpi_buffer_count:16 mpi_sync_interval:24000 first_event_builder_rank:-1 event_builder_count:-1 generator:"TpcRceReceiver" fragment_type:"TPC" sleep_on_stop_us:0 number_of_microslices_per_millislice:10 rce_client_host_port:8090 rce_client_timeout_usecs:500000 rce_xml_config_file:"config/defaults.xml" rce_daq_mode:"Trigger" rce_feb_emulation_mode:false receiver_debug_level:0 receiver_tick_period_usecs:10000 reporting_interval_fragments:100 reporting_interval_time:10 raw_buffer_size:1.6e7 raw_buffer_precommit:100 use_fragments_as_raw_buffer:true data_timeout_usecs:3e7}}>
09-16 14:14:05.642825  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.642864  1  2 fcl2jsondb() key=<metrics>
09-16 14:14:05.642869  1  2 fcl2jsondb() value=<"@local::metrics">
09-16 14:14:05.642883  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.642907  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:14:05.642912  1  2 fcl2jsondb() value=<1.048576e6>
09-16 14:14:05.642925  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.643947  1  2 fcl2jsondb() key=<fragment_receiver>
09-16 14:14:05.643971  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 mpi_sync_interval:24000 first_event_builder_rank:-1 event_builder_count:-1 generator:"TpcRceReceiver" fragment_type:"TPC" sleep_on_stop_us:0 number_of_microslices_per_millislice:10 rce_client_host_port:8090 rce_client_timeout_usecs:500000 rce_xml_config_file:"config/defaults.xml" rce_daq_mode:"Trigger" rce_feb_emulation_mode:false receiver_debug_level:0 receiver_tick_period_usecs:10000 reporting_interval_fragments:100 reporting_interval_time:10 raw_buffer_size:1.6e7 raw_buffer_precommit:100 use_fragments_as_raw_buffer:true data_timeout_usecs:3e7}>
09-16 14:14:05.643989  1  2 fcl2jsondb() value type=<table>
09-16 14:14:05.644010  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:14:05.644016  1  2 fcl2jsondb() value=<16>
09-16 14:14:05.644029  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.644766  1  2 fcl2jsondb() key=<mpi_sync_interval>
09-16 14:14:05.644774  1  2 fcl2jsondb() value=<24000>
09-16 14:14:05.644789  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.645528  1  2 fcl2jsondb() key=<first_event_builder_rank>
09-16 14:14:05.645535  1  2 fcl2jsondb() value=<-1>
09-16 14:14:05.645633  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.646362  1  2 fcl2jsondb() key=<event_builder_count>
09-16 14:14:05.646370  1  2 fcl2jsondb() value=<-1>
09-16 14:14:05.646397  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.647156  1  2 fcl2jsondb() key=<generator>
09-16 14:14:05.647163  1  2 fcl2jsondb() value=<"TpcRceReceiver">
09-16 14:14:05.647178  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.647198  1  2 fcl2jsondb() key=<fragment_type>
09-16 14:14:05.647204  1  2 fcl2jsondb() value=<"TPC">
09-16 14:14:05.647217  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.647237  1  2 fcl2jsondb() key=<sleep_on_stop_us>
09-16 14:14:05.647241  1  2 fcl2jsondb() value=<0>
09-16 14:14:05.647308  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.648040  1  2 fcl2jsondb() key=<number_of_microslices_per_millislice>
09-16 14:14:05.648047  1  2 fcl2jsondb() value=<10>
09-16 14:14:05.648063  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.648822  1  2 fcl2jsondb() key=<rce_client_host_port>
09-16 14:14:05.648829  1  2 fcl2jsondb() value=<8090>
09-16 14:14:05.648844  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.649598  1  2 fcl2jsondb() key=<rce_client_timeout_usecs>
09-16 14:14:05.649606  1  2 fcl2jsondb() value=<500000>
09-16 14:14:05.649621  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.650358  1  2 fcl2jsondb() key=<rce_xml_config_file>
09-16 14:14:05.650365  1  2 fcl2jsondb() value=<"config/defaults.xml">
09-16 14:14:05.650443  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.650468  1  2 fcl2jsondb() key=<rce_daq_mode>
09-16 14:14:05.650473  1  2 fcl2jsondb() value=<"Trigger">
09-16 14:14:05.650596  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.650621  1  2 fcl2jsondb() key=<rce_feb_emulation_mode>
09-16 14:14:05.650625  1  2 fcl2jsondb() value=<false>
09-16 14:14:05.650702  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.650760  1  2 fcl2jsondb() key=<receiver_debug_level>
09-16 14:14:05.650766  1  2 fcl2jsondb() value=<0>
09-16 14:14:05.650781  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.651587  1  2 fcl2jsondb() key=<receiver_tick_period_usecs>
09-16 14:14:05.651595  1  2 fcl2jsondb() value=<10000>
09-16 14:14:05.651620  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.652588  1  2 fcl2jsondb() key=<reporting_interval_fragments>
09-16 14:14:05.652598  1  2 fcl2jsondb() value=<100>
09-16 14:14:05.652635  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.653411  1  2 fcl2jsondb() key=<reporting_interval_time>
09-16 14:14:05.653419  1  2 fcl2jsondb() value=<10>
09-16 14:14:05.653435  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.654202  1  2 fcl2jsondb() key=<raw_buffer_size>
09-16 14:14:05.654209  1  2 fcl2jsondb() value=<1.6e7>
09-16 14:14:05.654225  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.655004  1  2 fcl2jsondb() key=<raw_buffer_precommit>
09-16 14:14:05.655011  1  2 fcl2jsondb() value=<100>
09-16 14:14:05.655027  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.655802  1  2 fcl2jsondb() key=<use_fragments_as_raw_buffer>
09-16 14:14:05.655810  1  2 fcl2jsondb() value=<true>
09-16 14:14:05.655826  1  2 fcl2jsondb() value type=<bool>
09-16 14:14:05.655849  1  2 fcl2jsondb() key=<data_timeout_usecs>
09-16 14:14:05.655854  1  2 fcl2jsondb() value=<3e7>
09-16 14:14:05.655868  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.656735  1  2 fcl2jsondb() key=<daq>
09-16 14:14:05.656748  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.656765  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.656783  1  2 fcl2jsondb() key=<fhicl_pound_include_1>
09-16 14:14:05.656788  1  2 fcl2jsondb() value=<"rce_expert_run_options.fcl">
09-16 14:14:05.656800  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.656814  1  2 fcl2jsondb() key=<fhicl_pound_include_2>
09-16 14:14:05.656818  1  2 fcl2jsondb() value=<"user_run_options.fcl">
09-16 14:14:05.656829  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.656843  1  2 fcl2jsondb() key=<rce_standard>
09-16 14:14:05.656847  1  2 fcl2jsondb() value=<"@local::daq">
09-16 14:14:05.656860  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.656875  1  2 fcl2jsondb() key=<rce00_standard>
09-16 14:14:05.656879  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.656891  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.656906  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.fragment_id>
09-16 14:14:05.656910  1  2 fcl2jsondb() value=<100>
09-16 14:14:05.656923  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.657694  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.board_id>
09-16 14:14:05.657701  1  2 fcl2jsondb() value=<0>
09-16 14:14:05.657716  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.658482  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.658490  1  2 fcl2jsondb() value=<"10.0.1.191">
09-16 14:14:05.658505  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.658520  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.receive_port>
09-16 14:14:05.658525  1  2 fcl2jsondb() value=<7991>
09-16 14:14:05.658538  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.659295  1  2 fcl2jsondb() key=<rce01_standard>
09-16 14:14:05.659302  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.659326  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.659341  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.fragment_id>
09-16 14:14:05.659346  1  2 fcl2jsondb() value=<101>
09-16 14:14:05.659358  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.660092  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.board_id>
09-16 14:14:05.660099  1  2 fcl2jsondb() value=<1>
09-16 14:14:05.660114  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.660845  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.660852  1  2 fcl2jsondb() value=<"10.0.1.192">
09-16 14:14:05.660867  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.660883  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.receive_port>
09-16 14:14:05.660887  1  2 fcl2jsondb() value=<7992>
09-16 14:14:05.660899  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.661630  1  2 fcl2jsondb() key=<rce02_standard>
09-16 14:14:05.661637  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.661652  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.661667  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.fragment_id>
09-16 14:14:05.661672  1  2 fcl2jsondb() value=<102>
09-16 14:14:05.661684  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.662412  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.board_id>
09-16 14:14:05.662419  1  2 fcl2jsondb() value=<2>
09-16 14:14:05.662444  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.663213  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.663220  1  2 fcl2jsondb() value=<"10.0.1.193">
09-16 14:14:05.663235  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.663250  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.receive_port>
09-16 14:14:05.663255  1  2 fcl2jsondb() value=<7993>
09-16 14:14:05.663267  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.664003  1  2 fcl2jsondb() key=<rce03_standard>
09-16 14:14:05.664010  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.664025  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.664040  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.fragment_id>
09-16 14:14:05.664045  1  2 fcl2jsondb() value=<103>
09-16 14:14:05.664058  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.664791  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.board_id>
09-16 14:14:05.664798  1  2 fcl2jsondb() value=<3>
09-16 14:14:05.664822  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.665576  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.665583  1  2 fcl2jsondb() value=<"10.0.1.194">
09-16 14:14:05.665598  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.665613  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.receive_port>
09-16 14:14:05.665618  1  2 fcl2jsondb() value=<7994>
09-16 14:14:05.665631  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.666360  1  2 fcl2jsondb() key=<rce04_standard>
09-16 14:14:05.666367  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.666382  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.666400  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:14:05.666406  1  2 fcl2jsondb() value=<104>
09-16 14:14:05.666419  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.667143  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.board_id>
09-16 14:14:05.667150  1  2 fcl2jsondb() value=<4>
09-16 14:14:05.667165  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.667888  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.667896  1  2 fcl2jsondb() value=<"10.0.1.195">
09-16 14:14:05.667911  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.667925  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.receive_port>
09-16 14:14:05.667930  1  2 fcl2jsondb() value=<7995>
09-16 14:14:05.667943  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.668693  1  2 fcl2jsondb() key=<rce05_standard>
09-16 14:14:05.668700  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.668714  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.668729  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:14:05.668734  1  2 fcl2jsondb() value=<105>
09-16 14:14:05.668746  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.669480  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.board_id>
09-16 14:14:05.669487  1  2 fcl2jsondb() value=<5>
09-16 14:14:05.669502  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.670225  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.670232  1  2 fcl2jsondb() value=<"10.0.1.196">
09-16 14:14:05.670247  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.670262  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.receive_port>
09-16 14:14:05.670267  1  2 fcl2jsondb() value=<7996>
09-16 14:14:05.670280  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.671015  1  2 fcl2jsondb() key=<rce06_standard>
09-16 14:14:05.671022  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.671037  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.671052  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.fragment_id>
09-16 14:14:05.671057  1  2 fcl2jsondb() value=<106>
09-16 14:14:05.671069  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.671798  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.board_id>
09-16 14:14:05.671805  1  2 fcl2jsondb() value=<6>
09-16 14:14:05.671821  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.672546  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.672553  1  2 fcl2jsondb() value=<"10.0.1.197">
09-16 14:14:05.672568  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.672583  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.receive_port>
09-16 14:14:05.672588  1  2 fcl2jsondb() value=<7997>
09-16 14:14:05.672601  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.673359  1  2 fcl2jsondb() key=<rce07_standard>
09-16 14:14:05.673367  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.673404  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.673432  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.fragment_id>
09-16 14:14:05.673437  1  2 fcl2jsondb() value=<107>
09-16 14:14:05.673451  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.674235  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.board_id>
09-16 14:14:05.674242  1  2 fcl2jsondb() value=<7>
09-16 14:14:05.674258  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.675094  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.675102  1  2 fcl2jsondb() value=<"10.0.1.198">
09-16 14:14:05.675117  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.675134  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.receive_port>
09-16 14:14:05.675138  1  2 fcl2jsondb() value=<7998>
09-16 14:14:05.675151  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.675926  1  2 fcl2jsondb() key=<rce08_standard>
09-16 14:14:05.675934  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.675950  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.675966  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.fragment_id>
09-16 14:14:05.675971  1  2 fcl2jsondb() value=<108>
09-16 14:14:05.675984  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.676754  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.board_id>
09-16 14:14:05.676762  1  2 fcl2jsondb() value=<8>
09-16 14:14:05.676778  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.677542  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.677549  1  2 fcl2jsondb() value=<"10.0.1.181">
09-16 14:14:05.677565  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.677581  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.receive_port>
09-16 14:14:05.677586  1  2 fcl2jsondb() value=<8991>
09-16 14:14:05.677599  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.678372  1  2 fcl2jsondb() key=<rce09_standard>
09-16 14:14:05.678380  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.678398  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.678415  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.fragment_id>
09-16 14:14:05.678420  1  2 fcl2jsondb() value=<109>
09-16 14:14:05.678433  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.679236  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.board_id>
09-16 14:14:05.679251  1  2 fcl2jsondb() value=<9>
09-16 14:14:05.679271  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.680072  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.680093  1  2 fcl2jsondb() value=<"10.0.1.182">
09-16 14:14:05.680113  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.680149  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.receive_port>
09-16 14:14:05.680154  1  2 fcl2jsondb() value=<8992>
09-16 14:14:05.680168  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.681013  1  2 fcl2jsondb() key=<rce10_standard>
09-16 14:14:05.681023  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.681041  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.681059  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.fragment_id>
09-16 14:14:05.681064  1  2 fcl2jsondb() value=<110>
09-16 14:14:05.681078  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.681872  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.board_id>
09-16 14:14:05.681881  1  2 fcl2jsondb() value=<10>
09-16 14:14:05.681898  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.682664  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.682672  1  2 fcl2jsondb() value=<"10.0.1.183">
09-16 14:14:05.682688  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.682704  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.receive_port>
09-16 14:14:05.682710  1  2 fcl2jsondb() value=<8993>
09-16 14:14:05.682723  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.683512  1  2 fcl2jsondb() key=<rce11_standard>
09-16 14:14:05.683519  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.683535  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.683551  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.fragment_id>
09-16 14:14:05.683556  1  2 fcl2jsondb() value=<111>
09-16 14:14:05.683569  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.684339  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.board_id>
09-16 14:14:05.684347  1  2 fcl2jsondb() value=<11>
09-16 14:14:05.684363  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.685112  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.685119  1  2 fcl2jsondb() value=<"10.0.1.184">
09-16 14:14:05.685135  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.685150  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.receive_port>
09-16 14:14:05.685155  1  2 fcl2jsondb() value=<8994>
09-16 14:14:05.685168  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.685978  1  2 fcl2jsondb() key=<rce12_standard>
09-16 14:14:05.685995  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.686020  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.686040  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.fragment_id>
09-16 14:14:05.686044  1  2 fcl2jsondb() value=<112>
09-16 14:14:05.686059  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.686842  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.board_id>
09-16 14:14:05.686851  1  2 fcl2jsondb() value=<12>
09-16 14:14:05.686869  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.687629  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.687638  1  2 fcl2jsondb() value=<"10.0.1.185">
09-16 14:14:05.687655  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.687673  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.receive_port>
09-16 14:14:05.687678  1  2 fcl2jsondb() value=<8995>
09-16 14:14:05.687692  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.688457  1  2 fcl2jsondb() key=<rce13_standard>
09-16 14:14:05.688464  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.688489  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.688506  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.fragment_id>
09-16 14:14:05.688510  1  2 fcl2jsondb() value=<113>
09-16 14:14:05.688523  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.689258  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.board_id>
09-16 14:14:05.689265  1  2 fcl2jsondb() value=<13>
09-16 14:14:05.689280  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.690057  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.690065  1  2 fcl2jsondb() value=<"10.0.1.186">
09-16 14:14:05.690081  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.690096  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.receive_port>
09-16 14:14:05.690101  1  2 fcl2jsondb() value=<8996>
09-16 14:14:05.690114  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.690873  1  2 fcl2jsondb() key=<rce14_standard>
09-16 14:14:05.690880  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.690895  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.690910  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.fragment_id>
09-16 14:14:05.690915  1  2 fcl2jsondb() value=<114>
09-16 14:14:05.690927  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.691664  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.board_id>
09-16 14:14:05.691671  1  2 fcl2jsondb() value=<14>
09-16 14:14:05.691686  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.692415  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.692422  1  2 fcl2jsondb() value=<"10.0.1.187">
09-16 14:14:05.692438  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.692453  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.receive_port>
09-16 14:14:05.692459  1  2 fcl2jsondb() value=<8997>
09-16 14:14:05.692471  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.693313  1  2 fcl2jsondb() key=<rce15_standard>
09-16 14:14:05.693320  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:14:05.693335  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.693351  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.fragment_id>
09-16 14:14:05.693355  1  2 fcl2jsondb() value=<115>
09-16 14:14:05.693368  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.694100  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.board_id>
09-16 14:14:05.694107  1  2 fcl2jsondb() value=<15>
09-16 14:14:05.694122  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.694847  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.rce_client_host_addr>
09-16 14:14:05.694854  1  2 fcl2jsondb() value=<"10.0.1.188">
09-16 14:14:05.694869  1  2 fcl2jsondb() value type=<string>
09-16 14:14:05.694885  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.receive_port>
09-16 14:14:05.694890  1  2 fcl2jsondb() value=<8998>
09-16 14:14:05.694902  1  2 fcl2jsondb() value type=<number>
09-16 14:14:05.695636  1  2 read_data() end
09-16 14:14:05.695674  1  2 read_data end result=1
09-16 14:14:05.695679  1  2 fhicl_to_json: write() begin
09-16 14:14:05.713126  1  2 fhicl_to_json: write() end
09-16 14:14:05.713137  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.19 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_007_t" end time: Sep 16 14:14 CDT
"Convert_Fhicl2DBJson_007_t" time elapsed: 00:00:00
----------------------------------------------------------

50/137 Testing: Convert_DBJson2Fhicl_008_t
50/137 Test: Convert_DBJson2Fhicl_008_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/Convert_DBJson2Fhicl_008_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/test008.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/test008.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test008.json" "-c" "test008.fcl" "-t" "Convert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/Convert_DBJson2Fhicl_008_t.d
"Convert_DBJson2Fhicl_008_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:05.784883  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:14:05.785032  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:14:05.785061  1  0 artdaq::database::fhicljson trace_enable
09-16 14:14:05.785086  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:14:05.786614  1  3 json_to_fhicl: begin
09-16 14:14:05.786645  1  3 json_to_fhicl: Reading json root nodes
09-16 14:14:05.796781  1  2 write_data() begin
09-16 14:14:05.796964  1  2 json2fcldb() key=<fhicl_pound_include_0> type=<string>
09-16 14:14:05.796982  1  2 json2fcldb() name override to #include
09-16 14:14:05.797146  1  2 json2fcldb() key=<rce_standard> type=<table>
09-16 14:14:05.797242  1  2 json2fcldb() key=<metrics> type=<string>
09-16 14:14:05.797276  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:14:05.797353  1  2 json2fcldb() key=<fragment_receiver> type=<table>
09-16 14:14:05.797372  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:14:05.797391  1  2 json2fcldb() key=<mpi_sync_interval> type=<number>
09-16 14:14:05.797482  1  2 json2fcldb() key=<daq> type=<string>
09-16 14:14:05.797505  1  2 json2fcldb() key=<fhicl_pound_include_1> type=<string>
09-16 14:14:05.797511  1  2 json2fcldb() name override to #include
09-16 14:14:05.797527  1  2 json2fcldb() key=<fhicl_pound_include_2> type=<string>
09-16 14:14:05.797534  1  2 json2fcldb() name override to #include
09-16 14:14:05.797549  1  2 json2fcldb() key=<rce_standard> type=<table>
09-16 14:14:05.797562  1  2 json2fcldb() type override to string
09-16 14:14:05.797589  1  2 json2fcldb() key=<rce04_standard> type=<string>
09-16 14:14:05.797609  1  2 json2fcldb() key=<rce04_standard.fragment_receiver.fragment_id> type=<number>
09-16 14:14:05.797630  1  2 json2fcldb() key=<rce04_standard.fragment_receiver.board_id> type=<number>
09-16 14:14:05.800691  1  2 json2fcldb() key=<rce05_standard> type=<string>
09-16 14:14:05.800720  1  2 json2fcldb() key=<rce05_standard.fragment_receiver.fragment_id> type=<number>
09-16 14:14:05.800741  1  2 json2fcldb() key=<rce05_standard.fragment_receiver.board_id> type=<number>
09-16 14:14:05.803601  1  2 write_data() end
09-16 14:14:05.803616  1  3 json_to_fhicl: fcl=<BEGIN_PROLOG
 
#include "metrics.fcl" 
rce_standard: {
 
metrics: @local::metrics  
 
max_fragment_size_words: 1048576  
 
fragment_receiver: {
 
mpi_buffer_count: 16  
 
mpi_sync_interval: 24000  

}
} 
daq: @local::rce_standard  
 
#include "rce_expert_run_options.fcl" 
#include "user_run_options.fcl" 
rce_standard: @local::daq 
rce04_standard: @local::rce_standard  
 
rce04_standard.fragment_receiver.fragment_id: 104  
 
rce04_standard.fragment_receiver.board_id: 4  

END_PROLOG
 
rce05_standard: @local::rce_standard  
 
rce05_standard.fragment_receiver.fragment_id: 105  
 
rce05_standard.fragment_receiver.board_id: 5  
>
09-16 14:14:05.803623  1  3 json_to_fhicl: end
Running test:<Convert_DBJson2Fhicl>
<end of output>
Test time =   0.05 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2Fhicl_008_t" end time: Sep 16 14:14 CDT
"Convert_DBJson2Fhicl_008_t" time elapsed: 00:00:00
----------------------------------------------------------

51/137 Testing: MongoJson_insert_001_t
51/137 Test: MongoJson_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test001/MongoJson_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test001/test001.cmp.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test001/MongoJson_insert_001_t.d
"MongoJson_insert_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:05.842975  1  0 artdaq::database::mongo trace_enable
09-16 14:14:05.843121  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:05.845437  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:05.845853  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:05.955523  1  5 inserted_id={
    "$oid" : "57dc447d1a72ba424720bce1"
}
09-16 14:14:05.955625  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:05.955637  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc447d1a72ba424720bce1"
}, "collection":"testJSON_V001"}>
09-16 14:14:05.955771  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc447d1a72ba424720bce1"
}>
09-16 14:14:05.956015  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447d1a72ba424720bce1"
            }
        ]
    }
}>
09-16 14:14:05.956980  1  3 found_count=1
09-16 14:14:05.958488  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447d1a72ba424720bce1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:14:05.958803  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc447d1a72ba424720bce1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:14:05.958823  1  3 deleteChild() args  path=<_id>
09-16 14:14:05.967550  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:05.973041  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc447d1a72ba424720bce1"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:14:05.973167  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:05.973853  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:14:05.974024  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc447d1a72ba424720bce1"
}>
09-16 14:14:05.974049  1  3 deleteChild() Delete succeeded.
09-16 14:14:05.974161  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:14:05.974181  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:14:05.976438  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{
    "$oid" : "57dc447d1a72ba424720bce1"
}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.17 sec
----------------------------------------------------------
Test Passed.
"MongoJson_insert_001_t" end time: Sep 16 14:14 CDT
"MongoJson_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

52/137 Testing: MongoJson_search1_002_t
52/137 Test: MongoJson_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/MongoJson_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.src.538.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.cmp.538.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.opts.538.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test002.src.538.json" "-c" "test002.cmp.538.json" "-t" "search1" "-o" "test002.opts.538.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/MongoJson_search1_002_t.d
"MongoJson_search1_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test002.cmp.324.json’
removed ‘test002.opts.324.json’
removed ‘test002.src.324.json’
09-16 14:14:06.035758  1  0 artdaq::database::mongo trace_enable
09-16 14:14:06.035950  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.039051  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.039583  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.041773  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42514b47d1"
}
09-16 14:14:06.041835  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.041844  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
 "document.data.daq.event_builder.mpi_buffer_count" : 1538
}
, "collection":"testJSON_V001"}>
09-16 14:14:06.041945  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "document.data.daq.event_builder.mpi_buffer_count" : 1538
}>
09-16 14:14:06.041984  1  2 collection_name="testJSON_V001", search filter=<{
    "document.data.daq.event_builder.mpi_buffer_count" : 1538
}>
09-16 14:14:06.042582  1  3 found_count=1
09-16 14:14:06.043573  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42514b47d1"
    }, 
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1538, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.043793  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42514b47d1"
    }, 
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1538, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.043807  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.050090  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.054591  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc447e1a72ba42514b47d1"
},
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1538,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.054704  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.055197  1  3 deleteChild() resultDocument=<{
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1538,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.055310  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc447e1a72ba42514b47d1"
}>
09-16 14:14:06.055323  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.055406  1 10 operator==() begin _json_buffer=<{
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1538,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.055420  1 10 operator==() args  other.__json_buffer=<{
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1538, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.057049  1 10 matches() JSON buffers are equal.
Running test:<search1>
Search criteria {"filter":{
 "document.data.daq.event_builder.mpi_buffer_count" : 1538
}
, "collection":"testJSON_V001"}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"MongoJson_search1_002_t" end time: Sep 16 14:14 CDT
"MongoJson_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

53/137 Testing: MongoJson_update_003_t
53/137 Test: MongoJson_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test003/MongoJson_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.cmp.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.update.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "update" "-o" "test003.update.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test003/MongoJson_update_003_t.d
"MongoJson_update_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:06.098530  1  0 artdaq::database::mongo trace_enable
09-16 14:14:06.098692  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.101999  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.102503  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.104484  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba425f443531"
}
09-16 14:14:06.104587  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.104598  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc447e1a72ba425f443531"
}, "collection":"testJSON_V001"}>
09-16 14:14:06.104752  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc447e1a72ba425f443531"
}>
09-16 14:14:06.104953  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba425f443531"
            }
        ]
    }
}>
09-16 14:14:06.105540  1  3 found_count=1
09-16 14:14:06.106505  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba425f443531"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.106735  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba425f443531"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.106748  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.112867  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.118049  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc447e1a72ba425f443531"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.118164  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.118533  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.118622  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc447e1a72ba425f443531"
}>
09-16 14:14:06.118633  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.118725  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.118733  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.118738  1  4 replaceChild() args  path=<document>
09-16 14:14:06.119581  1  4 replaceChild() new child value=object(...)
09-16 14:14:06.119593  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:06.119909  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.119966  1  4 replaceChild() found child value=object(...)
09-16 14:14:06.120191  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.120465  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.120474  1  4 replaceChild() Replace succeeded.
09-16 14:14:06.120596  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.120678  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc447e1a72ba425f443531"
}>
09-16 14:14:06.120704  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba425f443531"
            }
        ]
    }
}>
09-16 14:14:06.121733  1  8 modified_count=1
09-16 14:14:06.121755  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.121760  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc447e1a72ba425f443531"
}, "collection":"testJSON_V001"}>
09-16 14:14:06.121818  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc447e1a72ba425f443531"
}>
09-16 14:14:06.121839  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba425f443531"
            }
        ]
    }
}>
09-16 14:14:06.122151  1  3 found_count=1
09-16 14:14:06.122609  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba425f443531"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.122696  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba425f443531"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.122704  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.123343  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.123707  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc447e1a72ba425f443531"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.123726  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.123971  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.124067  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc447e1a72ba425f443531"
}>
09-16 14:14:06.124074  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.124109  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.124127  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.124980  1 10 matches() JSON buffers are equal.
Running test:<update>
Search criteria {"filter":{
    "$oid" : "57dc447e1a72ba425f443531"
}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"MongoJson_update_003_t" end time: Sep 16 14:14 CDT
"MongoJson_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

54/137 Testing: MongoJson_search2_004_t
54/137 Test: MongoJson_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test004/MongoJson_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test004/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test004/test004.cmp.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test004/MongoJson_search2_004_t.d
"MongoJson_search2_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:06.159611  1  0 artdaq::database::mongo trace_enable
09-16 14:14:06.159765  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.161999  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.162706  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.168918  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae1"
}
09-16 14:14:06.168996  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.169207  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.174375  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae2"
}
09-16 14:14:06.174446  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.174781  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.179318  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae3"
}
09-16 14:14:06.179346  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.179655  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.184469  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae4"
}
09-16 14:14:06.184524  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.184884  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.189828  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae5"
}
09-16 14:14:06.189858  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.190072  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.194909  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae6"
}
09-16 14:14:06.194957  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.195286  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.200067  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae7"
}
09-16 14:14:06.200098  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.200340  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.204957  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae8"
}
09-16 14:14:06.204978  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.205196  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.209698  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186ae9"
}
09-16 14:14:06.209726  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.209941  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.214736  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba426a186aea"
}
09-16 14:14:06.214799  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.214866  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc447e1a72ba426a186ae1"
},{
    "$oid" : "57dc447e1a72ba426a186ae2"
},{
    "$oid" : "57dc447e1a72ba426a186ae3"
},{
    "$oid" : "57dc447e1a72ba426a186ae4"
},{
    "$oid" : "57dc447e1a72ba426a186ae5"
},{
    "$oid" : "57dc447e1a72ba426a186ae6"
},{
    "$oid" : "57dc447e1a72ba426a186ae7"
},{
    "$oid" : "57dc447e1a72ba426a186ae8"
},{
    "$oid" : "57dc447e1a72ba426a186ae9"
},{
    "$oid" : "57dc447e1a72ba426a186aea"
}]} }, "collection":"testJSON_V001"}>
09-16 14:14:06.215085  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba426a186ae1"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae2"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae3"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae4"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae5"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae6"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae7"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae8"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae9"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186aea"
            }
        ]
    }
}>
09-16 14:14:06.215184  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba426a186ae1"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae2"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae3"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae4"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae5"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae6"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae7"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae8"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186ae9"
            }, 
            {
                "$oid" : "57dc447e1a72ba426a186aea"
            }
        ]
    }
}>
09-16 14:14:06.215835  1  3 found_count=10
09-16 14:14:06.238327  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.239439  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae2"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.240579  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae3"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.241711  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae4"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.242803  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae5"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.243885  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae6"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.244952  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae7"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.246046  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae8"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.247179  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186ae9"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:14:06.248262  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba426a186aea"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc447e1a72ba426a186ae1"
},{
    "$oid" : "57dc447e1a72ba426a186ae2"
},{
    "$oid" : "57dc447e1a72ba426a186ae3"
},{
    "$oid" : "57dc447e1a72ba426a186ae4"
},{
    "$oid" : "57dc447e1a72ba426a186ae5"
},{
    "$oid" : "57dc447e1a72ba426a186ae6"
},{
    "$oid" : "57dc447e1a72ba426a186ae7"
},{
    "$oid" : "57dc447e1a72ba426a186ae8"
},{
    "$oid" : "57dc447e1a72ba426a186ae9"
},{
    "$oid" : "57dc447e1a72ba426a186aea"
}]} }, "collection":"testJSON_V001"}
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"MongoJson_search2_004_t" end time: Sep 16 14:14 CDT
"MongoJson_search2_004_t" time elapsed: 00:00:00
----------------------------------------------------------

55/137 Testing: MongoFhicl_insert_001_t
55/137 Test: MongoFhicl_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/MongoFhicl_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/test001.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/test001.cmp.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test001.src.fcl" "-c" "test001.cmp.fcl" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/MongoFhicl_insert_001_t.d
"MongoFhicl_insert_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:06.280947  1  0 artdaq::database::mongo trace_enable
09-16 14:14:06.281085  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.312884  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.313290  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.412608  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42745d1811"
}
09-16 14:14:06.412700  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.412708  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc447e1a72ba42745d1811"
}, "collection":"testFHICL_V001"}>
09-16 14:14:06.412831  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc447e1a72ba42745d1811"
}>
09-16 14:14:06.412973  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba42745d1811"
            }
        ]
    }
}>
09-16 14:14:06.413712  1  3 found_count=1
09-16 14:14:06.415470  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42745d1811"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.415953  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42745d1811"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.415970  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.424091  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.427212  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc447e1a72ba42745d1811"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.427513  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.430364  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.430516  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc447e1a72ba42745d1811"
}>
09-16 14:14:06.430531  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.430619  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.430632  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.435897  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{
    "$oid" : "57dc447e1a72ba42745d1811"
}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.19 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_insert_001_t" end time: Sep 16 14:14 CDT
"MongoFhicl_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

56/137 Testing: MongoFhicl_search1_002_t
56/137 Test: MongoFhicl_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/MongoFhicl_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.src.026.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.cmp.026.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.opts.026.json" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test002.src.026.fcl" "-c" "test002.cmp.026.fcl" "-t" "search1" "-o" "test002.opts.026.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/MongoFhicl_search1_002_t.d
"MongoFhicl_search1_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test002.cmp.988.fcl’
removed ‘test002.opts.988.json’
removed ‘test002.src.988.fcl’
09-16 14:14:06.471366  1  0 artdaq::database::mongo trace_enable
09-16 14:14:06.471513  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.508906  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.509324  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.511944  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba427e09f661"
}
09-16 14:14:06.512028  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.512034  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
 "document.data.main.source.waiting_time" : 1026
}
, "collection":"testFHICL_V001"}>
09-16 14:14:06.512162  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "document.data.main.source.waiting_time" : 1026
}>
09-16 14:14:06.512205  1  2 collection_name="testFHICL_V001", search filter=<{
    "document.data.main.source.waiting_time" : 1026
}>
09-16 14:14:06.512676  1  3 found_count=1
09-16 14:14:06.513934  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba427e09f661"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1026
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.514302  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba427e09f661"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1026
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.514313  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.520515  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.522245  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc447e1a72ba427e09f661"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1026
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.522492  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.523890  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1026
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.523978  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc447e1a72ba427e09f661"
}>
09-16 14:14:06.523990  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.524072  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1026
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.524090  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1026
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.527649  1 10 matches() JSON buffers are equal.
Running test:<search1>
Search criteria {"filter":{
 "document.data.main.source.waiting_time" : 1026
}
, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_search1_002_t" end time: Sep 16 14:14 CDT
"MongoFhicl_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

57/137 Testing: MongoFhicl_update_003_t
57/137 Test: MongoFhicl_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/MongoFhicl_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.cmp.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.update.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test003.src.fcl" "-c" "test003.cmp.fcl" "-t" "update" "-o" "test003.update.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/MongoFhicl_update_003_t.d
"MongoFhicl_update_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:06.558179  1  0 artdaq::database::mongo trace_enable
09-16 14:14:06.558296  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.604865  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.604894  1  3 deleteChild() args  path=<comments>
09-16 14:14:06.609943  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.611192  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.611256  1  3 deleteChild() deleted child value=array(...)
09-16 14:14:06.612265  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.612547  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
]
}>
09-16 14:14:06.612557  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.612856  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:14:06.612867  1  3 deleteChild() args  path=<comments>
09-16 14:14:06.615446  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.617692  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.617709  1  3 deleteChild() deleted child value=array(...)
09-16 14:14:06.619860  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.619986  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:14:06.619991  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.620187  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:14:06.620198  1  3 deleteChild() args  path=<comments>
09-16 14:14:06.622849  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.625103  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.625128  1  3 deleteChild() deleted child value=array(...)
09-16 14:14:06.627314  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.627474  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:14:06.627489  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.627998  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.628365  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.630486  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba428c4b8db1"
}
09-16 14:14:06.630521  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.630526  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc447e1a72ba428c4b8db1"
}, "collection":"testFHICL_V001"}>
09-16 14:14:06.630576  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc447e1a72ba428c4b8db1"
}>
09-16 14:14:06.630646  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba428c4b8db1"
            }
        ]
    }
}>
09-16 14:14:06.631132  1  3 found_count=1
09-16 14:14:06.632142  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba428c4b8db1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.632372  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba428c4b8db1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.632381  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.633775  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.634849  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc447e1a72ba428c4b8db1"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.634874  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.635878  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.635949  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc447e1a72ba428c4b8db1"
}>
09-16 14:14:06.635954  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.635991  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.635998  1  5 findChild() args  path=<document>
09-16 14:14:06.638452  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.640621  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.640661  1  5 findChild() found child value=object(...)
09-16 14:14:06.642718  1  5 findChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
}
}>
09-16 14:14:06.642726  1  5 findChild() Find succeeded.
09-16 14:14:06.642927  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.642936  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                   
09-16 14:14:06.642952  1  4 replaceChild() args  path=<document>
09-16 14:14:06.646580  1  4 replaceChild() new child value=object(...)
09-16 14:14:06.646589  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:06.647623  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.647672  1  4 replaceChild() found child value=object(...)
09-16 14:14:06.649841  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.650651  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.650659  1  4 replaceChild() Replace succeeded.
09-16 14:14:06.650790  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.650862  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc447e1a72ba428c4b8db1"
}>
09-16 14:14:06.650890  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba428c4b8db1"
            }
        ]
    }
}>
09-16 14:14:06.652550  1  8 modified_count=1
09-16 14:14:06.652575  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.652579  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc447e1a72ba428c4b8db1"
}, "collection":"testFHICL_V001"}>
09-16 14:14:06.652635  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc447e1a72ba428c4b8db1"
}>
09-16 14:14:06.652663  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba428c4b8db1"
            }
        ]
    }
}>
09-16 14:14:06.653064  1  3 found_count=1
09-16 14:14:06.654082  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba428c4b8db1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                              
09-16 14:14:06.654398  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba428c4b8db1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
            
09-16 14:14:06.654410  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.657002  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.659282  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc447e1a72ba428c4b8db1"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.659297  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.661618  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.661700  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc447e1a72ba428c4b8db1"
}>
09-16 14:14:06.661705  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.661749  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:06.661759  1 10 operator==() args  other.__json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
Running test:<update>
Search criteria {"filter":{
    "$oid" : "57dc447e1a72ba428c4b8db1"
}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.13 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_update_003_t" end time: Sep 16 14:14 CDT
"MongoFhicl_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

58/137 Testing: MongoFhicl_search2_004_t
58/137 Test: MongoFhicl_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/MongoFhicl_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/test004.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/test004.cmp.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test004.src.fcl" "-c" "test004.cmp.fcl" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/MongoFhicl_search2_004_t.d
"MongoFhicl_search2_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:06.690293  1  0 artdaq::database::mongo trace_enable
09-16 14:14:06.690413  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.722679  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.724022  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.727117  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4551"
}
09-16 14:14:06.727177  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.727298  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.728850  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4552"
}
09-16 14:14:06.728867  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.728963  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.730102  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4553"
}
09-16 14:14:06.730130  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.730239  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.731315  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4554"
}
09-16 14:14:06.731329  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.731466  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.732534  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4555"
}
09-16 14:14:06.732546  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.732623  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.733672  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4556"
}
09-16 14:14:06.733683  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.733749  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.734663  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4557"
}
09-16 14:14:06.734672  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.734737  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.735647  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4558"
}
09-16 14:14:06.735657  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.735721  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.736636  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f4559"
}
09-16 14:14:06.736646  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:06.736747  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:06.737654  1  5 inserted_id={
    "$oid" : "57dc447e1a72ba42974f455a"
}
09-16 14:14:06.737678  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:06.737688  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc447e1a72ba42974f4551"
},{
    "$oid" : "57dc447e1a72ba42974f4552"
},{
    "$oid" : "57dc447e1a72ba42974f4553"
},{
    "$oid" : "57dc447e1a72ba42974f4554"
},{
    "$oid" : "57dc447e1a72ba42974f4555"
},{
    "$oid" : "57dc447e1a72ba42974f4556"
},{
    "$oid" : "57dc447e1a72ba42974f4557"
},{
    "$oid" : "57dc447e1a72ba42974f4558"
},{
    "$oid" : "57dc447e1a72ba42974f4559"
},{
    "$oid" : "57dc447e1a72ba42974f455a"
}]} }, "collection":"testFHICL_V001"}>
09-16 14:14:06.737827  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba42974f4551"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4552"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4553"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4554"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4555"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4556"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4557"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4558"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4559"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f455a"
            }
        ]
    }
}>
09-16 14:14:06.737873  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc447e1a72ba42974f4551"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4552"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4553"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4554"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4555"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4556"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4557"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4558"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f4559"
            }, 
            {
                "$oid" : "57dc447e1a72ba42974f455a"
            }
        ]
    }
}>
09-16 14:14:06.738362  1  3 found_count=10
09-16 14:14:06.742363  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4551"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.742551  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4552"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.742716  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4553"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.742878  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4554"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.743039  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4555"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.743200  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4556"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.743360  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4557"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.743525  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4558"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.743687  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f4559"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:06.743846  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc447e1a72ba42974f455a"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc447e1a72ba42974f4551"
},{
    "$oid" : "57dc447e1a72ba42974f4552"
},{
    "$oid" : "57dc447e1a72ba42974f4553"
},{
    "$oid" : "57dc447e1a72ba42974f4554"
},{
    "$oid" : "57dc447e1a72ba42974f4555"
},{
    "$oid" : "57dc447e1a72ba42974f4556"
},{
    "$oid" : "57dc447e1a72ba42974f4557"
},{
    "$oid" : "57dc447e1a72ba42974f4558"
},{
    "$oid" : "57dc447e1a72ba42974f4559"
},{
    "$oid" : "57dc447e1a72ba42974f455a"
}]} }, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_search2_004_t" end time: Sep 16 14:14 CDT
"MongoFhicl_search2_004_t" time elapsed: 00:00:00
----------------------------------------------------------

59/137 Testing: FileSystemJson_insert_001_t
59/137 Test: FileSystemJson_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/FileSystemJson_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/test001.cmp.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/FileSystemJson_insert_001_t.d
"FileSystemJson_insert_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:06.775154  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:06.775256  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:06.775311  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.776954  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:06.776968  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}, "collection":"testJSON_V001"}>
09-16 14:14:06.777045  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.777053  1  5 findChild() args  path=<collection>
09-16 14:14:06.781460  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.784313  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.784363  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:06.784483  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:06.784490  1  5 findChild() Find succeeded.
09-16 14:14:06.785900  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.785909  1  5 findChild() args  path=<filter>
09-16 14:14:06.786462  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.786812  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.786821  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:06.787163  1 12 StorageProvider::FileSystemDB generate_oid=6049057baf5643928080f566
09-16 14:14:06.788177  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.788186  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "6049057baf5643928080f566"
    }
}>
09-16 14:14:06.788198  1  2 insertChild() args  path=<document._id>
09-16 14:14:06.789042  1  4 insertChild() new child value=object(...)
09-16 14:14:06.789077  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:06.789463  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.789473  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:06.789775  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:14:06.789817  1  4 insertChild() found child value=object(...)
09-16 14:14:06.790215  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "6049057baf5643928080f566"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.790287  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "6049057baf5643928080f566"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.790298  1  4 insertChild() Insert succeeded.
09-16 14:14:06.790336  1  4 StorageProvider::FileSystemDB::store() using generated oid=<6049057baf5643928080f566>.
09-16 14:14:06.790369  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:06.790386  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.790786  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/6049057baf5643928080f566.json>.
09-16 14:14:06.790828  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "6049057baf5643928080f566"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.790835  1  5 findChild() args  path=<document>
09-16 14:14:06.791443  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.791848  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "6049057baf5643928080f566"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.791864  1  5 findChild() found child value=object(...)
09-16 14:14:06.792252  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "6049057baf5643928080f566"
}
}
}>
09-16 14:14:06.792259  1  5 findChild() Find succeeded.
09-16 14:14:06.795092  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:06.795101  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:06.795191  1  3 StorageProvider::FileSystemDB::index::_open() json=<{"version":{},"configurations.name":{}, "configurable_entity.name":{} }>
09-16 14:14:06.795379  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:06.795399  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \"", 
        "_id" : {
            "_oid" : "6049057baf5643928080f566"
        }
    }>.
09-16 14:14:06.795406  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<6049057baf5643928080f566>.
09-16 14:14:06.795947  1  5 StorageProvider::FileSystemDB::index::addDocument() found 3 keys.
09-16 14:14:06.795978  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:06.795982  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<6049057baf5643928080f566>.
09-16 14:14:06.795986  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<\n AA \">.
09-16 14:14:06.796153  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:06.796159  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<version>
09-16 14:14:06.796171  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:06.796238  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=configurations
09-16 14:14:06.796264  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:06.796269  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:06.796806  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.796904  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:06.796928  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:06.796932  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "6049057baf5643928080f566"}, "collection":"testJSON_V001"}>
09-16 14:14:06.797044  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "6049057baf5643928080f566"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.797051  1  5 findChild() args  path=<collection>
09-16 14:14:06.797283  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.797405  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "6049057baf5643928080f566"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.797428  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:06.797505  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:06.797512  1  5 findChild() Find succeeded.
09-16 14:14:06.798382  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "6049057baf5643928080f566"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.798390  1  5 findChild() args  path=<filter>
09-16 14:14:06.798563  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.798671  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "6049057baf5643928080f566"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.798683  1  5 findChild() found child value=object(...)
09-16 14:14:06.798770  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "6049057baf5643928080f566"
}
}>
09-16 14:14:06.798776  1  5 findChild() Find succeeded.
09-16 14:14:06.799729  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:06.799737  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.799748  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.799769  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:06.799774  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:06.799796  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.800255  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:06.800262  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "6049057baf5643928080f566"
    }>.
09-16 14:14:06.800358  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:06.800488  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:14:06.800495  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<6049057baf5643928080f566>.
09-16 14:14:06.800523  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:06.800575  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/6049057baf5643928080f566.json>.
09-16 14:14:06.800629  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:06.800782  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.800881  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:06.800975  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \"", 
    "_id" : {
        "_oid" : "6049057baf5643928080f566"
    }
}>
09-16 14:14:06.800983  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.801678  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.802092  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "6049057baf5643928080f566"
}
}>
09-16 14:14:06.802196  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.802534  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:14:06.802626  1  3 deleteChild() deletedChild=<{
"_oid" : "6049057baf5643928080f566"
}>
09-16 14:14:06.802634  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.802698  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:14:06.802710  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:14:06.804108  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{ "$oid" : "6049057baf5643928080f566"}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_insert_001_t" end time: Sep 16 14:14 CDT
"FileSystemJson_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

60/137 Testing: FileSystemJson_search1_002_t
60/137 Test: FileSystemJson_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/FileSystemJson_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.src.190.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.cmp.190.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.opts.190.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test002.src.190.json" "-c" "test002.cmp.190.json" "-t" "search1" "-o" "test002.opts.190.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/FileSystemJson_search1_002_t.d
"FileSystemJson_search1_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test002.cmp.080.json’
removed ‘test002.opts.080.json’
removed ‘test002.src.080.json’
09-16 14:14:06.838128  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:06.838232  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:06.838280  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.839988  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:06.840001  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "version190"
}, "collection":"testJSON_V001"}>
09-16 14:14:06.840070  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version190"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.840077  1  5 findChild() args  path=<collection>
09-16 14:14:06.844352  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.847311  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.847363  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:06.847484  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:06.847491  1  5 findChild() Find succeeded.
09-16 14:14:06.848952  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version190"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.848960  1  5 findChild() args  path=<filter>
09-16 14:14:06.849518  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.849865  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.849874  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:06.850221  1 12 StorageProvider::FileSystemDB generate_oid=36a37cfb00d1485da3ca97c6
09-16 14:14:06.851252  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version190"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.851260  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "36a37cfb00d1485da3ca97c6"
    }
}>
09-16 14:14:06.851264  1  2 insertChild() args  path=<document._id>
09-16 14:14:06.851936  1  4 insertChild() new child value=object(...)
09-16 14:14:06.851951  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:06.852297  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.852307  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:06.852661  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190"
}>
09-16 14:14:06.852722  1  4 insertChild() found child value=object(...)
09-16 14:14:06.853145  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190",
"_id" : {
"_oid" : "36a37cfb00d1485da3ca97c6"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.853215  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190",
"_id" : {
"_oid" : "36a37cfb00d1485da3ca97c6"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.853225  1  4 insertChild() Insert succeeded.
09-16 14:14:06.853262  1  4 StorageProvider::FileSystemDB::store() using generated oid=<36a37cfb00d1485da3ca97c6>.
09-16 14:14:06.853294  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:06.853311  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.853341  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.853469  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/36a37cfb00d1485da3ca97c6.json>.
09-16 14:14:06.853586  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190",
"_id" : {
"_oid" : "36a37cfb00d1485da3ca97c6"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.853592  1  5 findChild() args  path=<document>
09-16 14:14:06.854174  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.854581  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190",
"_id" : {
"_oid" : "36a37cfb00d1485da3ca97c6"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.854597  1  5 findChild() found child value=object(...)
09-16 14:14:06.854979  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190",
"_id" : {
"_oid" : "36a37cfb00d1485da3ca97c6"
}
}
}>
09-16 14:14:06.854986  1  5 findChild() Find succeeded.
09-16 14:14:06.857842  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:06.857860  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:06.857892  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.858367  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:06.858375  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version190", 
        "_id" : {
            "_oid" : "36a37cfb00d1485da3ca97c6"
        }
    }>.
09-16 14:14:06.858380  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<36a37cfb00d1485da3ca97c6>.
09-16 14:14:06.858892  1  5 StorageProvider::FileSystemDB::index::addDocument() found 3 keys.
09-16 14:14:06.858913  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:06.858917  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<36a37cfb00d1485da3ca97c6>.
09-16 14:14:06.858921  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<version190>.
09-16 14:14:06.859044  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:06.859051  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<version>
09-16 14:14:06.859054  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:06.859108  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=configurations
09-16 14:14:06.859124  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:06.859130  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:06.859635  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.859714  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:06.859734  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:06.859739  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{
 "version":"version190"
}
, "collection":"testJSON_V001"}>
09-16 14:14:06.859766  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "version" : "version190"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.859772  1  5 findChild() args  path=<collection>
09-16 14:14:06.859929  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.860034  1  5 findChild() recurse() args currentView=<{
"filter" : {
"version" : "version190"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.860046  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:06.860111  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:06.860118  1  5 findChild() Find succeeded.
09-16 14:14:06.861121  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "version" : "version190"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.861128  1  5 findChild() args  path=<filter>
09-16 14:14:06.861302  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.861425  1  5 findChild() recurse() args currentView=<{
"filter" : {
"version" : "version190"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.861437  1  5 findChild() found child value=object(...)
09-16 14:14:06.861523  1  5 findChild() resultDocument=<{
"filter" : {
"version" : "version190"
}
}>
09-16 14:14:06.861529  1  5 findChild() Find succeeded.
09-16 14:14:06.862482  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:06.862490  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.862499  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.862516  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:06.862521  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:06.862544  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.862816  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:06.862823  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "version" : "version190"
    }>.
09-16 14:14:06.862911  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:06.863005  1 14 StorageProvider::FileSystemDB::index::_matchVersion() begin
09-16 14:14:06.863011  1 14 StorageProvider::FileSystemDB::index::_matchVersion() args version=<version190>.
09-16 14:14:06.863023  1 15 StorageProvider::FileSystemDB::index::_matchConfiguration() Found 1 documents where version=version190
09-16 14:14:06.863049  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:06.863142  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/36a37cfb00d1485da3ca97c6.json>.
09-16 14:14:06.863194  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:06.863383  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.870389  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:06.870509  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "version190", 
    "_id" : {
        "_oid" : "36a37cfb00d1485da3ca97c6"
    }
}>
09-16 14:14:06.870519  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.871221  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.871674  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190",
"_id" : {
"_oid" : "36a37cfb00d1485da3ca97c6"
}
}>
09-16 14:14:06.871740  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.872116  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190"
}>
09-16 14:14:06.872207  1  3 deleteChild() deletedChild=<{
"_oid" : "36a37cfb00d1485da3ca97c6"
}>
09-16 14:14:06.872216  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.872257  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version190"
}>
09-16 14:14:06.872268  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "version190"
}>
09-16 14:14:06.873708  1 10 matches() JSON buffers are equal.
Running test:<search1>
Search criteria {"filter":{
 "version":"version190"
}
, "collection":"testJSON_V001"}
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_search1_002_t" end time: Sep 16 14:14 CDT
"FileSystemJson_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

61/137 Testing: FileSystemJson_update_003_t
61/137 Test: FileSystemJson_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/FileSystemJson_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.cmp.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.update.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "update" "-o" "test003.update.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/FileSystemJson_update_003_t.d
"FileSystemJson_update_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:06.905390  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:06.905502  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:06.905557  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.907119  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:06.907143  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}, "collection":"testJSON_V001"}>
09-16 14:14:06.907263  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.907272  1  5 findChild() args  path=<collection>
09-16 14:14:06.911573  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.914390  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.914452  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:06.914573  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:06.914581  1  5 findChild() Find succeeded.
09-16 14:14:06.916047  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.916057  1  5 findChild() args  path=<filter>
09-16 14:14:06.916583  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.917032  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.917043  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:06.917423  1 12 StorageProvider::FileSystemDB generate_oid=52367ab58e924bf7aa00f960
09-16 14:14:06.918482  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.918491  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "52367ab58e924bf7aa00f960"
    }
}>
09-16 14:14:06.918497  1  2 insertChild() args  path=<document._id>
09-16 14:14:06.919149  1  4 insertChild() new child value=object(...)
09-16 14:14:06.919168  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:06.919526  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.919539  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:06.919822  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.919874  1  4 insertChild() found child value=object(...)
09-16 14:14:06.920246  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.920335  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.920348  1  4 insertChild() Insert succeeded.
09-16 14:14:06.920404  1  4 StorageProvider::FileSystemDB::store() using generated oid=<52367ab58e924bf7aa00f960>.
09-16 14:14:06.920443  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:06.920466  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.920506  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.920626  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/52367ab58e924bf7aa00f960.json>.
09-16 14:14:06.920743  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.920750  1  5 findChild() args  path=<document>
09-16 14:14:06.921296  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.921702  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.921722  1  5 findChild() found child value=object(...)
09-16 14:14:06.922094  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
}
}>
09-16 14:14:06.922103  1  5 findChild() Find succeeded.
09-16 14:14:06.924896  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:06.924916  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:06.924977  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.925597  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:06.925607  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "_id" : {
            "_oid" : "52367ab58e924bf7aa00f960"
        }
    }>.
09-16 14:14:06.925616  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<52367ab58e924bf7aa00f960>.
09-16 14:14:06.926108  1  5 StorageProvider::FileSystemDB::index::addDocument() found 2 keys.
09-16 14:14:06.926158  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:06.926165  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:06.926228  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:06.926250  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:06.926260  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:06.926780  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.926882  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:06.926908  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:06.926915  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "52367ab58e924bf7aa00f960"}, "collection":"testJSON_V001"}>
09-16 14:14:06.927001  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "52367ab58e924bf7aa00f960"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.927009  1  5 findChild() args  path=<collection>
09-16 14:14:06.927187  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.927303  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.927318  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:06.927399  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:06.927407  1  5 findChild() Find succeeded.
09-16 14:14:06.928301  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "52367ab58e924bf7aa00f960"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.928309  1  5 findChild() args  path=<filter>
09-16 14:14:06.928492  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.928607  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.928622  1  5 findChild() found child value=object(...)
09-16 14:14:06.928718  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
}
}>
09-16 14:14:06.928726  1  5 findChild() Find succeeded.
09-16 14:14:06.929710  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:06.929720  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.929734  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.929759  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:06.929765  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:06.929796  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.930079  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:06.930087  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "52367ab58e924bf7aa00f960"
    }>.
09-16 14:14:06.930189  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:06.930293  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:14:06.930301  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<52367ab58e924bf7aa00f960>.
09-16 14:14:06.930338  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:06.930473  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/52367ab58e924bf7aa00f960.json>.
09-16 14:14:06.930556  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:06.930750  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.930805  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:06.930867  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "_id" : {
        "_oid" : "52367ab58e924bf7aa00f960"
    }
}>
09-16 14:14:06.930874  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.931353  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.931666  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
}>
09-16 14:14:06.931711  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.932157  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.932261  1  3 deleteChild() deletedChild=<{
"_oid" : "52367ab58e924bf7aa00f960"
}>
09-16 14:14:06.932270  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.932311  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.932321  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.932327  1  4 replaceChild() args  path=<document>
09-16 14:14:06.933398  1  4 replaceChild() new child value=object(...)
09-16 14:14:06.933416  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:06.933715  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.933783  1  4 replaceChild() found child value=object(...)
09-16 14:14:06.933988  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.934228  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.934235  1  4 replaceChild() Replace succeeded.
09-16 14:14:06.934283  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:06.934289  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}, "filter":{ "$oid" : "52367ab58e924bf7aa00f960"},"collection":"testJSON_V001"}>
09-16 14:14:06.934329  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "52367ab58e924bf7aa00f960"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.934335  1  5 findChild() args  path=<collection>
09-16 14:14:06.934782  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.935084  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.935096  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:06.935164  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:06.935171  1  5 findChild() Find succeeded.
09-16 14:14:06.936068  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "52367ab58e924bf7aa00f960"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.936076  1  5 findChild() args  path=<filter>
09-16 14:14:06.936501  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.936793  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.936805  1  5 findChild() found child value=object(...)
09-16 14:14:06.936892  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
}
}>
09-16 14:14:06.936898  1  5 findChild() Find succeeded.
09-16 14:14:06.937925  1  4 StorageProvider::FileSystemDB::store() found filter=<{
        "$oid" : "52367ab58e924bf7aa00f960"
    }>.
09-16 14:14:06.938724  1 12 value()JSON regex_search() result=52367ab58e924bf7aa00f960
09-16 14:14:06.938752  1  4 StorageProvider::FileSystemDB::store() using provided oid=<52367ab58e924bf7aa00f960>.
09-16 14:14:06.939765  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "52367ab58e924bf7aa00f960"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.939778  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "52367ab58e924bf7aa00f960"
    }
}>
09-16 14:14:06.939782  1  2 insertChild() args  path=<document._id>
09-16 14:14:06.940760  1  4 insertChild() new child value=object(...)
09-16 14:14:06.940777  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:06.941213  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.941223  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:06.941445  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.941474  1  4 insertChild() found child value=object(...)
09-16 14:14:06.941812  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
},
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.941881  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
},
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.941888  1  4 insertChild() Insert succeeded.
09-16 14:14:06.941936  1  4 StorageProvider::FileSystemDB::store() using generated oid=<52367ab58e924bf7aa00f960>.
09-16 14:14:06.941950  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:06.941956  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.941974  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.942006  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/52367ab58e924bf7aa00f960.json>.
09-16 14:14:06.942046  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
},
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.942052  1  5 findChild() args  path=<document>
09-16 14:14:06.942532  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.942864  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
},
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.942879  1  5 findChild() found child value=object(...)
09-16 14:14:06.943157  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
}
}>
09-16 14:14:06.943164  1  5 findChild() Find succeeded.
09-16 14:14:06.945456  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:06.945475  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:06.945519  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.946064  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:06.946074  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "_id" : {
            "_oid" : "52367ab58e924bf7aa00f960"
        }
    }>.
09-16 14:14:06.946078  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<52367ab58e924bf7aa00f960>.
09-16 14:14:06.946486  1  5 StorageProvider::FileSystemDB::index::addDocument() found 2 keys.
09-16 14:14:06.946522  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:06.946526  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:06.946553  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:06.946580  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:06.946586  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:06.946842  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.946923  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:06.946935  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:06.946939  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "52367ab58e924bf7aa00f960"}, "collection":"testJSON_V001"}>
09-16 14:14:06.947001  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "52367ab58e924bf7aa00f960"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.947007  1  5 findChild() args  path=<collection>
09-16 14:14:06.947213  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.947343  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.947366  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:06.947451  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:06.947457  1  5 findChild() Find succeeded.
09-16 14:14:06.948404  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "52367ab58e924bf7aa00f960"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:06.948411  1  5 findChild() args  path=<filter>
09-16 14:14:06.948580  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:06.948710  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
},
"collection" : "testJSON_V001"
}>
09-16 14:14:06.948724  1  5 findChild() found child value=object(...)
09-16 14:14:06.948830  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "52367ab58e924bf7aa00f960"
}
}>
09-16 14:14:06.948837  1  5 findChild() Find succeeded.
09-16 14:14:06.949849  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:06.949857  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.949867  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:06.949889  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:06.949893  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:06.949917  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.950204  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:06.950211  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "52367ab58e924bf7aa00f960"
    }>.
09-16 14:14:06.950313  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:06.950334  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:14:06.950338  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<52367ab58e924bf7aa00f960>.
09-16 14:14:06.950347  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:06.950358  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/52367ab58e924bf7aa00f960.json>.
09-16 14:14:06.950397  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:06.950584  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:06.950641  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:06.950706  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "_id" : {
        "_oid" : "52367ab58e924bf7aa00f960"
    }
}>
09-16 14:14:06.950713  1  3 deleteChild() args  path=<_id>
09-16 14:14:06.951060  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:06.951321  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "52367ab58e924bf7aa00f960"
}
}>
09-16 14:14:06.951338  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:06.951547  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.951617  1  3 deleteChild() deletedChild=<{
"_oid" : "52367ab58e924bf7aa00f960"
}>
09-16 14:14:06.951624  1  3 deleteChild() Delete succeeded.
09-16 14:14:06.951658  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:14:06.951666  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:14:06.952444  1 10 matches() JSON buffers are equal.
Running test:<update>
Search criteria {"filter":{ "$oid" : "52367ab58e924bf7aa00f960"}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_update_003_t" end time: Sep 16 14:14 CDT
"FileSystemJson_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

62/137 Testing: FileSystemJson_search2_004_t
62/137 Test: FileSystemJson_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/FileSystemJson_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/test004.cmp.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/FileSystemJson_search2_004_t.d
"FileSystemJson_search2_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:06.985218  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:06.985326  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:06.985381  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:06.987011  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:06.987035  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:06.988078  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:06.988133  1  5 findChild() args  path=<collection>
09-16 14:14:07.002918  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.015188  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.015298  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:07.015591  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:07.015600  1  5 findChild() Find succeeded.
09-16 14:14:07.018008  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.018123  1  5 findChild() args  path=<filter>
09-16 14:14:07.029409  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.037838  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.037860  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:07.038404  1 12 StorageProvider::FileSystemDB generate_oid=84dbd148348d42b58716aedd
09-16 14:14:07.039468  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:07.039524  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "84dbd148348d42b58716aedd"
    }
}>
09-16 14:14:07.039528  1  2 insertChild() args  path=<document._id>
09-16 14:14:07.050582  1  4 insertChild() new child value=object(...)
09-16 14:14:07.050606  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:07.058997  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:07.059019  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:07.066769  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:07.066829  1  4 insertChild() found child value=object(...)
09-16 14:14:07.075221  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:07.075318  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:07.075339  1  4 insertChild() Insert succeeded.
09-16 14:14:07.075422  1  4 StorageProvider::FileSystemDB::store() using generated oid=<84dbd148348d42b58716aedd>.
09-16 14:14:07.075460  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:07.075481  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.075516  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.075652  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/84dbd148348d42b58716aedd.json>.
09-16 14:14:07.075786  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:07.075805  1  5 findChild() args  path=<document>
09-16 14:14:07.086214  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.094611  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.094704  1  5 findChild() found child value=object(...)
09-16 14:14:07.103149  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:07.103169  1  5 findChild() Find succeeded.
09-16 14:14:07.153124  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:07.153134  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:07.153169  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.153531  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:07.153542  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:07.153596  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<84dbd148348d42b58716aedd>.
09-16 14:14:07.164235  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:07.164285  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:07.164290  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:07.164293  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:07.164296  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:07.164359  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:07.164421  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:07.164428  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:07.164616  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.164715  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:07.164744  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:07.164751  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:07.165379  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.165437  1  5 findChild() args  path=<collection>
09-16 14:14:07.176984  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.185787  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.185833  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:07.185937  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:07.185942  1  5 findChild() Find succeeded.
09-16 14:14:07.186939  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.186999  1  5 findChild() args  path=<filter>
09-16 14:14:07.197860  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.206211  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.206232  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:07.206406  1 12 StorageProvider::FileSystemDB generate_oid=94eb9f3cefa6451696865146
09-16 14:14:07.207357  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:07.207418  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "94eb9f3cefa6451696865146"
    }
}>
09-16 14:14:07.207423  1  2 insertChild() args  path=<document._id>
09-16 14:14:07.218521  1  4 insertChild() new child value=object(...)
09-16 14:14:07.218544  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:07.226920  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:07.226942  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:07.234729  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:07.234766  1  4 insertChild() found child value=object(...)
09-16 14:14:07.243209  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:07.243304  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:07.243323  1  4 insertChild() Insert succeeded.
09-16 14:14:07.243398  1  4 StorageProvider::FileSystemDB::store() using generated oid=<94eb9f3cefa6451696865146>.
09-16 14:14:07.243411  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:07.243416  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.243431  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.243458  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/94eb9f3cefa6451696865146.json>.
09-16 14:14:07.243522  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:07.243540  1  5 findChild() args  path=<document>
09-16 14:14:07.253881  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.262485  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.262580  1  5 findChild() found child value=object(...)
09-16 14:14:07.271096  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:07.271116  1  5 findChild() Find succeeded.
09-16 14:14:07.320384  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:07.320405  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:07.320433  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.320737  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:07.320749  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:07.320819  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<94eb9f3cefa6451696865146>.
09-16 14:14:07.331475  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:07.331499  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:07.331503  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:07.331506  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:07.331509  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:07.331524  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:07.331574  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:07.331579  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:07.331759  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.331861  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:07.331884  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:07.331891  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:07.332503  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.332557  1  5 findChild() args  path=<collection>
09-16 14:14:07.343429  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.351813  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.351838  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:07.351914  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:07.351919  1  5 findChild() Find succeeded.
09-16 14:14:07.352836  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.352895  1  5 findChild() args  path=<filter>
09-16 14:14:07.363845  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.372283  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.372304  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:07.372440  1 12 StorageProvider::FileSystemDB generate_oid=38d860ca6651484998f39681
09-16 14:14:07.373353  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:07.373414  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "38d860ca6651484998f39681"
    }
}>
09-16 14:14:07.373418  1  2 insertChild() args  path=<document._id>
09-16 14:14:07.384724  1  4 insertChild() new child value=object(...)
09-16 14:14:07.384739  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:07.393227  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:07.393250  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:07.401186  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:07.401215  1  4 insertChild() found child value=object(...)
09-16 14:14:07.409906  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:07.410003  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:07.410022  1  4 insertChild() Insert succeeded.
09-16 14:14:07.410097  1  4 StorageProvider::FileSystemDB::store() using generated oid=<38d860ca6651484998f39681>.
09-16 14:14:07.410107  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:07.410112  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.410120  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.410138  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/38d860ca6651484998f39681.json>.
09-16 14:14:07.410187  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:07.410205  1  5 findChild() args  path=<document>
09-16 14:14:07.420948  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.429704  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.429808  1  5 findChild() found child value=object(...)
09-16 14:14:07.438502  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:07.438522  1  5 findChild() Find succeeded.
09-16 14:14:07.489634  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:07.489641  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:07.489684  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.489959  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:07.489971  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:07.490023  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<38d860ca6651484998f39681>.
09-16 14:14:07.500806  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:07.500839  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:07.500844  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:07.500856  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:07.500868  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:07.500891  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:07.500961  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:07.500966  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:07.501176  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.501274  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:07.501305  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:07.501312  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:07.501918  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.501973  1  5 findChild() args  path=<collection>
09-16 14:14:07.513313  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.521700  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.521726  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:07.521802  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:07.521807  1  5 findChild() Find succeeded.
09-16 14:14:07.522743  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.522799  1  5 findChild() args  path=<filter>
09-16 14:14:07.533671  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.542469  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.542492  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:07.542646  1 12 StorageProvider::FileSystemDB generate_oid=45d56a494d9a47efbc059da2
09-16 14:14:07.543605  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:07.543661  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "45d56a494d9a47efbc059da2"
    }
}>
09-16 14:14:07.543665  1  2 insertChild() args  path=<document._id>
09-16 14:14:07.554801  1  4 insertChild() new child value=object(...)
09-16 14:14:07.554816  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:07.563216  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:07.563238  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:07.570964  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:07.570993  1  4 insertChild() found child value=object(...)
09-16 14:14:07.579426  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:07.579509  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:07.579528  1  4 insertChild() Insert succeeded.
09-16 14:14:07.579598  1  4 StorageProvider::FileSystemDB::store() using generated oid=<45d56a494d9a47efbc059da2>.
09-16 14:14:07.579610  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:07.579614  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.579625  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.579648  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/45d56a494d9a47efbc059da2.json>.
09-16 14:14:07.579709  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:07.579726  1  5 findChild() args  path=<document>
09-16 14:14:07.590285  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.599039  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.599133  1  5 findChild() found child value=object(...)
09-16 14:14:07.607621  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:07.607641  1  5 findChild() Find succeeded.
09-16 14:14:07.657229  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:07.657237  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:07.657265  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.657554  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:07.657565  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:07.657617  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<45d56a494d9a47efbc059da2>.
09-16 14:14:07.668210  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:07.668234  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:07.668238  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:07.668241  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:07.668243  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:07.668259  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:07.668309  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:07.668314  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:07.668531  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.668627  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:07.668657  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:07.668664  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:07.669283  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.669337  1  5 findChild() args  path=<collection>
09-16 14:14:07.680267  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.688856  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.688882  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:07.688958  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:07.688963  1  5 findChild() Find succeeded.
09-16 14:14:07.689884  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.689939  1  5 findChild() args  path=<filter>
09-16 14:14:07.701319  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.710228  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.710267  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:07.710444  1 12 StorageProvider::FileSystemDB generate_oid=6f1e543c1a2e4278ba6827a5
09-16 14:14:07.711500  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:07.711557  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "6f1e543c1a2e4278ba6827a5"
    }
}>
09-16 14:14:07.711561  1  2 insertChild() args  path=<document._id>
09-16 14:14:07.722802  1  4 insertChild() new child value=object(...)
09-16 14:14:07.722817  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:07.731597  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:07.731620  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:07.739410  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:07.739440  1  4 insertChild() found child value=object(...)
09-16 14:14:07.747974  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:07.748068  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:07.748089  1  4 insertChild() Insert succeeded.
09-16 14:14:07.748162  1  4 StorageProvider::FileSystemDB::store() using generated oid=<6f1e543c1a2e4278ba6827a5>.
09-16 14:14:07.748175  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:07.748179  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.748194  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.748220  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/6f1e543c1a2e4278ba6827a5.json>.
09-16 14:14:07.748284  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:07.748301  1  5 findChild() args  path=<document>
09-16 14:14:07.759188  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.767867  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.767963  1  5 findChild() found child value=object(...)
09-16 14:14:07.776778  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:07.776798  1  5 findChild() Find succeeded.
09-16 14:14:07.827330  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:07.827355  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:07.827382  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.827668  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:07.827680  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:07.827732  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<6f1e543c1a2e4278ba6827a5>.
09-16 14:14:07.838743  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:07.838767  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:07.838771  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:07.838774  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:07.838777  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:07.838792  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:07.838842  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:07.838847  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:07.839030  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.839130  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:07.839160  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:07.839167  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:07.839791  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.839845  1  5 findChild() args  path=<collection>
09-16 14:14:07.850963  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.859658  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.859684  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:07.859771  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:07.859777  1  5 findChild() Find succeeded.
09-16 14:14:07.860815  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:07.860875  1  5 findChild() args  path=<filter>
09-16 14:14:07.872081  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.880826  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.880850  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:07.881012  1 12 StorageProvider::FileSystemDB generate_oid=a6bd870b93df4b39a9deed4c
09-16 14:14:07.882020  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:07.882075  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "a6bd870b93df4b39a9deed4c"
    }
}>
09-16 14:14:07.882080  1  2 insertChild() args  path=<document._id>
09-16 14:14:07.893272  1  4 insertChild() new child value=object(...)
09-16 14:14:07.893295  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:07.901666  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:07.901694  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:07.909502  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:07.909534  1  4 insertChild() found child value=object(...)
09-16 14:14:07.917981  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:07.918064  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:07.918082  1  4 insertChild() Insert succeeded.
09-16 14:14:07.918168  1  4 StorageProvider::FileSystemDB::store() using generated oid=<a6bd870b93df4b39a9deed4c>.
09-16 14:14:07.918181  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:07.918185  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.918199  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:07.918225  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/a6bd870b93df4b39a9deed4c.json>.
09-16 14:14:07.918291  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:07.918307  1  5 findChild() args  path=<document>
09-16 14:14:07.928807  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:07.937341  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:07.937441  1  5 findChild() found child value=object(...)
09-16 14:14:07.945890  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:07.945910  1  5 findChild() Find succeeded.
09-16 14:14:07.996280  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:07.996292  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:07.996342  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:07.996801  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:07.996840  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:07.996921  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<a6bd870b93df4b39a9deed4c>.
09-16 14:14:08.008228  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:08.008272  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:08.008276  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:08.008279  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:08.008282  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:08.008298  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:08.008352  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:08.008358  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:08.008608  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.008744  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:08.008772  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:08.008780  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:08.009439  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:08.009495  1  5 findChild() args  path=<collection>
09-16 14:14:08.020749  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.029624  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.029660  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:08.029741  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:08.029747  1  5 findChild() Find succeeded.
09-16 14:14:08.030728  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:08.030789  1  5 findChild() args  path=<filter>
09-16 14:14:08.041782  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.050341  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.050366  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:08.050536  1 12 StorageProvider::FileSystemDB generate_oid=b146cc06eb8341df915be3d9
09-16 14:14:08.051500  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:08.051555  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "b146cc06eb8341df915be3d9"
    }
}>
09-16 14:14:08.051560  1  2 insertChild() args  path=<document._id>
09-16 14:14:08.063015  1  4 insertChild() new child value=object(...)
09-16 14:14:08.063031  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:08.071750  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:08.071774  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:08.079792  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:08.079831  1  4 insertChild() found child value=object(...)
09-16 14:14:08.088481  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:08.088570  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:08.088589  1  4 insertChild() Insert succeeded.
09-16 14:14:08.088667  1  4 StorageProvider::FileSystemDB::store() using generated oid=<b146cc06eb8341df915be3d9>.
09-16 14:14:08.088680  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:08.088685  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.088699  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.088726  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b146cc06eb8341df915be3d9.json>.
09-16 14:14:08.088793  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:08.088810  1  5 findChild() args  path=<document>
09-16 14:14:08.099541  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.108192  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.108296  1  5 findChild() found child value=object(...)
09-16 14:14:08.117183  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:08.117204  1  5 findChild() Find succeeded.
09-16 14:14:08.168508  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:08.168520  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:08.168553  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.168925  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:08.168938  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:08.168992  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<b146cc06eb8341df915be3d9>.
09-16 14:14:08.179950  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:08.179991  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:08.179995  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:08.179998  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:08.180001  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:08.180017  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:08.180096  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:08.180102  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:08.180332  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.180464  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:08.180495  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:08.180502  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:08.181282  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:08.181337  1  5 findChild() args  path=<collection>
09-16 14:14:08.192469  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.201095  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.201123  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:08.201203  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:08.201208  1  5 findChild() Find succeeded.
09-16 14:14:08.202142  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:08.202202  1  5 findChild() args  path=<filter>
09-16 14:14:08.213562  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.221925  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.221947  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:08.222087  1 12 StorageProvider::FileSystemDB generate_oid=b489c01e98e44c28b849b89a
09-16 14:14:08.223040  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:08.223096  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "b489c01e98e44c28b849b89a"
    }
}>
09-16 14:14:08.223100  1  2 insertChild() args  path=<document._id>
09-16 14:14:08.234349  1  4 insertChild() new child value=object(...)
09-16 14:14:08.234364  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:08.243018  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:08.243040  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:08.250920  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:08.250959  1  4 insertChild() found child value=object(...)
09-16 14:14:08.259366  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:08.259468  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:08.259488  1  4 insertChild() Insert succeeded.
09-16 14:14:08.259559  1  4 StorageProvider::FileSystemDB::store() using generated oid=<b489c01e98e44c28b849b89a>.
09-16 14:14:08.259572  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:08.259576  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.259587  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.259608  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b489c01e98e44c28b849b89a.json>.
09-16 14:14:08.259671  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:08.259688  1  5 findChild() args  path=<document>
09-16 14:14:08.270028  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.278593  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.278688  1  5 findChild() found child value=object(...)
09-16 14:14:08.287176  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:08.287196  1  5 findChild() Find succeeded.
09-16 14:14:08.337815  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:08.337823  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:08.337849  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.338131  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:08.338143  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:08.338205  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<b489c01e98e44c28b849b89a>.
09-16 14:14:08.349038  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:08.349061  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:08.349065  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:08.349068  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:08.349071  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:08.349085  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:08.349134  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:08.349139  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:08.349318  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.349402  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:08.349432  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:08.349447  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:08.350036  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:08.350090  1  5 findChild() args  path=<collection>
09-16 14:14:08.361109  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.369803  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.369829  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:08.369906  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:08.369912  1  5 findChild() Find succeeded.
09-16 14:14:08.370837  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:08.370896  1  5 findChild() args  path=<filter>
09-16 14:14:08.381984  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.390494  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.390515  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:08.390651  1 12 StorageProvider::FileSystemDB generate_oid=3dee64e2aba3416ebb7325c6
09-16 14:14:08.391633  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:08.391690  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "3dee64e2aba3416ebb7325c6"
    }
}>
09-16 14:14:08.391695  1  2 insertChild() args  path=<document._id>
09-16 14:14:08.402885  1  4 insertChild() new child value=object(...)
09-16 14:14:08.402899  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:08.411462  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:08.411484  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:08.419516  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:08.419554  1  4 insertChild() found child value=object(...)
09-16 14:14:08.428221  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:08.428315  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:08.428334  1  4 insertChild() Insert succeeded.
09-16 14:14:08.428409  1  4 StorageProvider::FileSystemDB::store() using generated oid=<3dee64e2aba3416ebb7325c6>.
09-16 14:14:08.428420  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:08.428425  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.428434  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.428452  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/3dee64e2aba3416ebb7325c6.json>.
09-16 14:14:08.428502  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:08.428519  1  5 findChild() args  path=<document>
09-16 14:14:08.439223  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.447837  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.447942  1  5 findChild() found child value=object(...)
09-16 14:14:08.456662  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:08.456682  1  5 findChild() Find succeeded.
09-16 14:14:08.507983  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:08.507990  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:08.508044  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.508328  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:08.508340  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:08.508392  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<3dee64e2aba3416ebb7325c6>.
09-16 14:14:08.519266  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:08.519289  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:08.519294  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:08.519297  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:08.519300  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:08.519313  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:08.519362  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:08.519367  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:08.519550  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.519630  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:08.519669  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:08.519686  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:14:08.520307  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:08.520361  1  5 findChild() args  path=<collection>
09-16 14:14:08.531338  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.539708  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.539733  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:08.539808  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:08.539814  1  5 findChild() Find succeeded.
09-16 14:14:08.540717  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:14:08.540776  1  5 findChild() args  path=<filter>
09-16 14:14:08.551564  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.559940  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.559962  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:08.560097  1 12 StorageProvider::FileSystemDB generate_oid=e7a620c39c3642c1aa40f5e0
09-16 14:14:08.561050  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:14:08.561105  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "e7a620c39c3642c1aa40f5e0"
    }
}>
09-16 14:14:08.561110  1  2 insertChild() args  path=<document._id>
09-16 14:14:08.572034  1  4 insertChild() new child value=object(...)
09-16 14:14:08.572048  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:08.580428  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:14:08.580450  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:08.588198  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:14:08.588226  1  4 insertChild() found child value=object(...)
09-16 14:14:08.596673  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:14:08.596775  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:14:08.596793  1  4 insertChild() Insert succeeded.
09-16 14:14:08.596863  1  4 StorageProvider::FileSystemDB::store() using generated oid=<e7a620c39c3642c1aa40f5e0>.
09-16 14:14:08.596873  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:08.596877  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.596885  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.596901  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/e7a620c39c3642c1aa40f5e0.json>.
09-16 14:14:08.596950  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:14:08.596966  1  5 findChild() args  path=<document>
09-16 14:14:08.607316  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.615738  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:14:08.615844  1  5 findChild() found child value=object(...)
09-16 14:14:08.624315  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:14:08.624335  1  5 findChild() Find succeeded.
09-16 14:14:08.673944  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:08.673950  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:08.673993  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.674266  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:08.674278  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:14:08.674330  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<e7a620c39c3642c1aa40f5e0>.
09-16 14:14:08.684860  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:14:08.684881  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:14:08.684885  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:14:08.684888  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:14:08.684890  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:14:08.684903  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:14:08.684952  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:14:08.684957  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:08.685137  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.685211  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:08.685257  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:08.685272  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{"_id" : { "$in" : [ { "$oid" : "84dbd148348d42b58716aedd"},{ "$oid" : "94eb9f3cefa6451696865146"},{ "$oid" : "38d860ca6651484998f39681"},{ "$oid" : "45d56a494d9a47efbc059da2"},{ "$oid" : "6f1e543c1a2e4278ba6827a5"},{ "$oid" : "a6bd870b93df4b39a9deed4c"},{ "$oid" : "b146cc06eb8341df915be3d9"},{ "$oid" : "b489c01e98e44c28b849b89a"},{ "$oid" : "3dee64e2aba3416ebb7325c6"},{ "$oid" : "e7a620c39c3642c1aa40f5e0"}]} }, "collection":"testJSON_V001"}>
09-16 14:14:08.685425  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "84dbd148348d42b58716aedd"
                }, 
                {
                    "$oid" : "94eb9f3cefa6451696865146"
                }, 
                {
                    "$oid" : "38d860ca6651484998f39681"
                }, 
                {
                    "$oid" : "45d56a494d9a47efbc059da2"
                }, 
                {
                    "$oid" : "6f1e543c1a2e4278ba6827a5"
                }, 
                {
                    "$oid" : "a6bd870b93df4b39a9deed4c"
                }, 
                {
                    "$oid" : "b146cc06eb8341df915be3d9"
                }, 
                {
                    "$oid" : "b489c01e98e44c28b849b89a"
                }, 
                {
                    "$oid" : "3dee64e2aba3416ebb7325c6"
                }, 
                {
                    "$oid" : "e7a620c39c3642c1aa40f5e0"
                }
            ]
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:08.685433  1  5 findChild() args  path=<collection>
09-16 14:14:08.686199  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.686730  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "84dbd148348d42b58716aedd"
},
{
"$oid" : "94eb9f3cefa6451696865146"
},
{
"$oid" : "38d860ca6651484998f39681"
},
{
"$oid" : "45d56a494d9a47efbc059da2"
},
{
"$oid" : "6f1e543c1a2e4278ba6827a5"
},
{
"$oid" : "a6bd870b93df4b39a9deed4c"
},
{
"$oid" : "b146cc06eb8341df915be3d9"
},
{
"$oid" : "b489c01e98e44c28b849b89a"
},
{
"$oid" : "3dee64e2aba3416ebb7325c6"
},
{
"$oid" : "e7a620c39c3642c1aa40f5e0"
}
]
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:08.686743  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:14:08.686810  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:14:08.686816  1  5 findChild() Find succeeded.
09-16 14:14:08.687681  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "84dbd148348d42b58716aedd"
                }, 
                {
                    "$oid" : "94eb9f3cefa6451696865146"
                }, 
                {
                    "$oid" : "38d860ca6651484998f39681"
                }, 
                {
                    "$oid" : "45d56a494d9a47efbc059da2"
                }, 
                {
                    "$oid" : "6f1e543c1a2e4278ba6827a5"
                }, 
                {
                    "$oid" : "a6bd870b93df4b39a9deed4c"
                }, 
                {
                    "$oid" : "b146cc06eb8341df915be3d9"
                }, 
                {
                    "$oid" : "b489c01e98e44c28b849b89a"
                }, 
                {
                    "$oid" : "3dee64e2aba3416ebb7325c6"
                }, 
                {
                    "$oid" : "e7a620c39c3642c1aa40f5e0"
                }
            ]
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:14:08.687689  1  5 findChild() args  path=<filter>
09-16 14:14:08.688462  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.688989  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "84dbd148348d42b58716aedd"
},
{
"$oid" : "94eb9f3cefa6451696865146"
},
{
"$oid" : "38d860ca6651484998f39681"
},
{
"$oid" : "45d56a494d9a47efbc059da2"
},
{
"$oid" : "6f1e543c1a2e4278ba6827a5"
},
{
"$oid" : "a6bd870b93df4b39a9deed4c"
},
{
"$oid" : "b146cc06eb8341df915be3d9"
},
{
"$oid" : "b489c01e98e44c28b849b89a"
},
{
"$oid" : "3dee64e2aba3416ebb7325c6"
},
{
"$oid" : "e7a620c39c3642c1aa40f5e0"
}
]
}
},
"collection" : "testJSON_V001"
}>
09-16 14:14:08.689008  1  5 findChild() found child value=object(...)
09-16 14:14:08.689519  1  5 findChild() resultDocument=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "84dbd148348d42b58716aedd"
},
{
"$oid" : "94eb9f3cefa6451696865146"
},
{
"$oid" : "38d860ca6651484998f39681"
},
{
"$oid" : "45d56a494d9a47efbc059da2"
},
{
"$oid" : "6f1e543c1a2e4278ba6827a5"
},
{
"$oid" : "a6bd870b93df4b39a9deed4c"
},
{
"$oid" : "b146cc06eb8341df915be3d9"
},
{
"$oid" : "b489c01e98e44c28b849b89a"
},
{
"$oid" : "3dee64e2aba3416ebb7325c6"
},
{
"$oid" : "e7a620c39c3642c1aa40f5e0"
}
]
}
}
}>
09-16 14:14:08.689526  1  5 findChild() Find succeeded.
09-16 14:14:08.692979  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:14:08.692987  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.692995  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:14:08.693011  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:08.693016  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:14:08.693039  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.693337  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:08.693346  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "_id" : {
            "$in" : [
                {
                    "$oid" : "84dbd148348d42b58716aedd"
                }, 
                {
                    "$oid" : "94eb9f3cefa6451696865146"
                }, 
                {
                    "$oid" : "38d860ca6651484998f39681"
                }, 
                {
                    "$oid" : "45d56a494d9a47efbc059da2"
                }, 
                {
                    "$oid" : "6f1e543c1a2e4278ba6827a5"
                }, 
                {
                    "$oid" : "a6bd870b93df4b39a9deed4c"
                }, 
                {
                    "$oid" : "b146cc06eb8341df915be3d9"
                }, 
                {
                    "$oid" : "b489c01e98e44c28b849b89a"
                }, 
                {
                    "$oid" : "3dee64e2aba3416ebb7325c6"
                }, 
                {
                    "$oid" : "e7a620c39c3642c1aa40f5e0"
                }
            ]
        }
    }>.
09-16 14:14:08.694027  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:08.694575  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() begin
09-16 14:14:08.694584  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() args objectid=<{
"$in" : [
{
"$oid" : "84dbd148348d42b58716aedd"
},
{
"$oid" : "94eb9f3cefa6451696865146"
},
{
"$oid" : "38d860ca6651484998f39681"
},
{
"$oid" : "45d56a494d9a47efbc059da2"
},
{
"$oid" : "6f1e543c1a2e4278ba6827a5"
},
{
"$oid" : "a6bd870b93df4b39a9deed4c"
},
{
"$oid" : "b146cc06eb8341df915be3d9"
},
{
"$oid" : "b489c01e98e44c28b849b89a"
},
{
"$oid" : "3dee64e2aba3416ebb7325c6"
},
{
"$oid" : "e7a620c39c3642c1aa40f5e0"
}
]
}>.
09-16 14:14:08.695214  1  5 StorageProvider::FileSystemDB::index::_matchObjectIds() found 10 ouids.
09-16 14:14:08.695241  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<84dbd148348d42b58716aedd>.
09-16 14:14:08.695248  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<94eb9f3cefa6451696865146>.
09-16 14:14:08.695253  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<38d860ca6651484998f39681>.
09-16 14:14:08.695257  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<45d56a494d9a47efbc059da2>.
09-16 14:14:08.695261  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<6f1e543c1a2e4278ba6827a5>.
09-16 14:14:08.695265  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<a6bd870b93df4b39a9deed4c>.
09-16 14:14:08.695269  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<b146cc06eb8341df915be3d9>.
09-16 14:14:08.695272  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<b489c01e98e44c28b849b89a>.
09-16 14:14:08.695276  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<3dee64e2aba3416ebb7325c6>.
09-16 14:14:08.695280  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<e7a620c39c3642c1aa40f5e0>.
09-16 14:14:08.695284  1 15 StorageProvider::FileSystemDB::index::_matchObjectIds() Found 10 documents
09-16 14:14:08.695434  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() criteria_count=0, max_count=1, found 10 documents.
09-16 14:14:08.695453  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() returning 10 documents.
09-16 14:14:08.695468  1  3 StorageProvider::FileSystemDB::load() search returned 10 documents.
09-16 14:14:08.695614  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/38d860ca6651484998f39681.json>.
09-16 14:14:08.696320  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/3dee64e2aba3416ebb7325c6.json>.
09-16 14:14:08.697031  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/45d56a494d9a47efbc059da2.json>.
09-16 14:14:08.697722  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/6f1e543c1a2e4278ba6827a5.json>.
09-16 14:14:08.698412  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/84dbd148348d42b58716aedd.json>.
09-16 14:14:08.699108  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/94eb9f3cefa6451696865146.json>.
09-16 14:14:08.699804  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/a6bd870b93df4b39a9deed4c.json>.
09-16 14:14:08.700501  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b146cc06eb8341df915be3d9.json>.
09-16 14:14:08.701192  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b489c01e98e44c28b849b89a.json>.
09-16 14:14:08.701889  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/e7a620c39c3642c1aa40f5e0.json>.
09-16 14:14:08.702638  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:08.702864  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"6049057baf5643928080f566"
],
"version190" : [
"36a37cfb00d1485da3ca97c6"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:14:08.702945  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ { "$oid" : "84dbd148348d42b58716aedd"},{ "$oid" : "94eb9f3cefa6451696865146"},{ "$oid" : "38d860ca6651484998f39681"},{ "$oid" : "45d56a494d9a47efbc059da2"},{ "$oid" : "6f1e543c1a2e4278ba6827a5"},{ "$oid" : "a6bd870b93df4b39a9deed4c"},{ "$oid" : "b146cc06eb8341df915be3d9"},{ "$oid" : "b489c01e98e44c28b849b89a"},{ "$oid" : "3dee64e2aba3416ebb7325c6"},{ "$oid" : "e7a620c39c3642c1aa40f5e0"}]} }, "collection":"testJSON_V001"}
<end of output>
Test time =   1.75 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_search2_004_t" end time: Sep 16 14:14 CDT
"FileSystemJson_search2_004_t" time elapsed: 00:00:01
----------------------------------------------------------

63/137 Testing: FileSystemFhicl_insert_001_t
63/137 Test: FileSystemFhicl_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/FileSystemFhicl_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/test001.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/test001.cmp.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test001.src.fcl" "-c" "test001.cmp.fcl" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/FileSystemFhicl_insert_001_t.d
"FileSystemFhicl_insert_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:08.742916  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:08.743062  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:08.743153  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:08.789903  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:08.789923  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}, "collection":"testFHICL_V001"}>
09-16 14:14:08.790120  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:08.790131  1  5 findChild() args  path=<collection>
09-16 14:14:08.796687  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.798557  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.798618  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:08.798740  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.798749  1  5 findChild() Find succeeded.
09-16 14:14:08.800039  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:08.800051  1  5 findChild() args  path=<filter>
09-16 14:14:08.802292  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.803960  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.803972  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:08.804387  1 12 StorageProvider::FileSystemDB generate_oid=c45fdb7f80e44d87a912f780
09-16 14:14:08.805773  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:08.805786  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "c45fdb7f80e44d87a912f780"
    }
}>
09-16 14:14:08.805790  1  2 insertChild() args  path=<document._id>
09-16 14:14:08.808198  1  4 insertChild() new child value=object(...)
09-16 14:14:08.808217  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:08.809882  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.809896  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:08.811351  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:08.811401  1  4 insertChild() found child value=object(...)
09-16 14:14:08.813179  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c45fdb7f80e44d87a912f780"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.813270  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c45fdb7f80e44d87a912f780"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.813282  1  4 insertChild() Insert succeeded.
09-16 14:14:08.813333  1  4 StorageProvider::FileSystemDB::store() using generated oid=<c45fdb7f80e44d87a912f780>.
09-16 14:14:08.813367  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:08.813386  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:08.813796  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/c45fdb7f80e44d87a912f780.json>.
09-16 14:14:08.813849  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c45fdb7f80e44d87a912f780"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.813857  1  5 findChild() args  path=<document>
09-16 14:14:08.816009  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.817670  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c45fdb7f80e44d87a912f780"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.817703  1  5 findChild() found child value=object(...)
09-16 14:14:08.819351  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c45fdb7f80e44d87a912f780"
}
}
}>
09-16 14:14:08.819360  1  5 findChild() Find succeeded.
09-16 14:14:08.829162  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:08.829172  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:08.829255  1  3 StorageProvider::FileSystemDB::index::_open() json=<{"version":{},"configurations.name":{}, "configurable_entity.name":{} }>
09-16 14:14:08.829457  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:08.829467  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "c45fdb7f80e44d87a912f780"
        }
    }>.
09-16 14:14:08.829474  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<c45fdb7f80e44d87a912f780>.
09-16 14:14:08.831464  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:08.831489  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:08.831493  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<c45fdb7f80e44d87a912f780>.
09-16 14:14:08.831498  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:08.831580  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:08.831587  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<c45fdb7f80e44d87a912f780>.
09-16 14:14:08.831591  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:08.831619  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:08.831835  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:08.831923  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:08.831941  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:08.831946  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "c45fdb7f80e44d87a912f780"}, "collection":"testFHICL_V001"}>
09-16 14:14:08.832036  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "c45fdb7f80e44d87a912f780"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:08.832043  1  5 findChild() args  path=<collection>
09-16 14:14:08.832236  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.832362  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "c45fdb7f80e44d87a912f780"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.832375  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:08.832475  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.832482  1  5 findChild() Find succeeded.
09-16 14:14:08.833506  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "c45fdb7f80e44d87a912f780"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:08.833514  1  5 findChild() args  path=<filter>
09-16 14:14:08.833724  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:08.833866  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "c45fdb7f80e44d87a912f780"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:08.833880  1  5 findChild() found child value=object(...)
09-16 14:14:08.833996  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "c45fdb7f80e44d87a912f780"
}
}>
09-16 14:14:08.834003  1  5 findChild() Find succeeded.
09-16 14:14:08.835130  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:08.835139  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:08.835151  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:08.835172  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:08.835186  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:08.835222  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:08.835560  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:08.835568  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "c45fdb7f80e44d87a912f780"
    }>.
09-16 14:14:08.835677  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:08.835789  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:14:08.835796  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<c45fdb7f80e44d87a912f780>.
09-16 14:14:08.835825  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:08.835890  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/c45fdb7f80e44d87a912f780.json>.
09-16 14:14:08.836052  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:08.836285  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:08.836367  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:08.836566  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ], 
    "_id" : {
        "_oid" : "c45fdb7f80e44d87a912f780"
    }
}>
09-16 14:14:08.836576  1  3 deleteChild() args  path=<_id>
09-16 14:14:08.838619  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:08.840031  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c45fdb7f80e44d87a912f780"
}
}>
09-16 14:14:08.840092  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:08.841433  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:08.841523  1  3 deleteChild() deletedChild=<{
"_oid" : "c45fdb7f80e44d87a912f780"
}>
09-16 14:14:08.841529  1  3 deleteChild() Delete succeeded.
09-16 14:14:08.841580  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:08.841590  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:08.845555  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{ "$oid" : "c45fdb7f80e44d87a912f780"}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.14 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_insert_001_t" end time: Sep 16 14:14 CDT
"FileSystemFhicl_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

64/137 Testing: FileSystemFhicl_update_003_t
64/137 Test: FileSystemFhicl_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/FileSystemFhicl_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.cmp.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.update.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test003.src.fcl" "-c" "test003.cmp.fcl" "-t" "update" "-o" "test003.update.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/FileSystemFhicl_update_003_t.d
"FileSystemFhicl_update_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:08.893036  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:08.893231  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:08.893301  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:08.965349  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:14:08.965369  1  3 deleteChild() args  path=<comments>
09-16 14:14:08.975678  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:08.978546  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:08.978728  1  3 deleteChild() deleted child value=array(...)
09-16 14:14:08.980968  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:08.981540  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
]
}>
09-16 14:14:08.981564  1  3 deleteChild() Delete succeeded.
09-16 14:14:08.982079  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:14:08.982105  1  3 deleteChild() args  path=<comments>
09-16 14:14:08.987753  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:08.992406  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:08.992445  1  3 deleteChild() deleted child value=array(...)
09-16 14:14:08.996786  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:08.996992  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:14:08.997001  1  3 deleteChild() Delete succeeded.
09-16 14:14:08.997377  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:14:08.997404  1  3 deleteChild() args  path=<comments>
09-16 14:14:09.002410  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:09.006728  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.006763  1  3 deleteChild() deleted child value=array(...)
09-16 14:14:09.010736  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.010945  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:14:09.010954  1  3 deleteChild() Delete succeeded.
09-16 14:14:09.011105  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.011125  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.011340  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.011354  1  5 findChild() args  path=<collection>
09-16 14:14:09.014116  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.016165  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.016213  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.016350  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.016363  1  5 findChild() Find succeeded.
09-16 14:14:09.018062  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.018077  1  5 findChild() args  path=<filter>
09-16 14:14:09.020671  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.022625  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.022641  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.023172  1 12 StorageProvider::FileSystemDB generate_oid=85c60d25d97e42bc8ce91ad0
09-16 14:14:09.024893  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.024909  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "85c60d25d97e42bc8ce91ad0"
    }
}>
09-16 14:14:09.024916  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.027739  1  4 insertChild() new child value=object(...)
09-16 14:14:09.027755  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.029616  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.029633  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.031293  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.031346  1  4 insertChild() found child value=object(...)
09-16 14:14:09.033250  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.033374  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.033384  1  4 insertChild() Insert succeeded.
09-16 14:14:09.033442  1  4 StorageProvider::FileSystemDB::store() using generated oid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.033482  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.033506  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.033570  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.033754  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/85c60d25d97e42bc8ce91ad0.json>.
09-16 14:14:09.033922  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.033933  1  5 findChild() args  path=<document>
09-16 14:14:09.036410  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.038374  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.038419  1  5 findChild() found child value=object(...)
09-16 14:14:09.040272  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
}
}>
09-16 14:14:09.040287  1  5 findChild() Find succeeded.
09-16 14:14:09.051590  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.051608  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.051686  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.052267  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.052279  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "85c60d25d97e42bc8ce91ad0"
        }
    }>.
09-16 14:14:09.052289  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.054560  1  5 StorageProvider::FileSystemDB::index::addDocument() found 6 keys.
09-16 14:14:09.054598  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.054603  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.054619  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.054757  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.054767  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.054772  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.054816  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.055206  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.055362  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.055393  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:09.055406  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "85c60d25d97e42bc8ce91ad0"}, "collection":"testFHICL_V001"}>
09-16 14:14:09.055589  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "85c60d25d97e42bc8ce91ad0"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.055600  1  5 findChild() args  path=<collection>
09-16 14:14:09.055885  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.056071  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.056091  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.056214  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.056224  1  5 findChild() Find succeeded.
09-16 14:14:09.057553  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "85c60d25d97e42bc8ce91ad0"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.057563  1  5 findChild() args  path=<filter>
09-16 14:14:09.057801  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.057953  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.057971  1  5 findChild() found child value=object(...)
09-16 14:14:09.058092  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
}
}>
09-16 14:14:09.058101  1  5 findChild() Find succeeded.
09-16 14:14:09.059503  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.059514  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.059526  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.059553  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.059558  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.059594  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.060082  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:09.060092  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "85c60d25d97e42bc8ce91ad0"
    }>.
09-16 14:14:09.060225  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:09.060378  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:14:09.060386  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.060431  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:09.060639  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/85c60d25d97e42bc8ce91ad0.json>.
09-16 14:14:09.060800  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.061122  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.061238  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.061428  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ], 
    "_id" : {
        "_oid" : "85c60d25d97e42bc8ce91ad0"
    }
}>
09-16 14:14:09.061442  1  3 deleteChild() args  path=<_id>
09-16 14:14:09.063591  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:09.065172  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
}>
09-16 14:14:09.065242  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:09.066764  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.066904  1  3 deleteChild() deletedChild=<{
"_oid" : "85c60d25d97e42bc8ce91ad0"
}>
09-16 14:14:09.066913  1  3 deleteChild() Delete succeeded.
09-16 14:14:09.067012  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.067025  1  5 findChild() args  path=<document>
09-16 14:14:09.070596  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.073721  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.073839  1  5 findChild() found child value=object(...)
09-16 14:14:09.076761  1  5 findChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
}
}>
09-16 14:14:09.076788  1  5 findChild() Find succeeded.
09-16 14:14:09.077184  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.077200  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                   
09-16 14:14:09.077215  1  4 replaceChild() args  path=<document>
09-16 14:14:09.082523  1  4 replaceChild() new child value=object(...)
09-16 14:14:09.082538  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:14:09.083917  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.084060  1  4 replaceChild() found child value=object(...)
09-16 14:14:09.086984  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.088124  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.088139  1  4 replaceChild() Replace succeeded.
09-16 14:14:09.088422  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.088435  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "filter":{ "$oid" : "85c60d25d97e42bc8ce91ad0"},"collection":"testFHICL_V001"}>
09-16 14:14:09.088746  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
     
09-16 14:14:09.088763  1  5 findChild() args  path=<collection>
09-16 14:14:09.092547  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.095689  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.095713  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.095849  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.095859  1  5 findChild() Find succeeded.
09-16 14:14:09.097039  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
     
09-16 14:14:09.097057  1  5 findChild() args  path=<filter>
09-16 14:14:09.100669  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.103594  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.103615  1  5 findChild() found child value=object(...)
09-16 14:14:09.103790  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
}
}>
09-16 14:14:09.103800  1  5 findChild() Find succeeded.
09-16 14:14:09.105005  1  4 StorageProvider::FileSystemDB::store() found filter=<{
        "$oid" : "85c60d25d97e42bc8ce91ad0"
    }>.
09-16 14:14:09.105864  1 12 value()JSON regex_search() result=85c60d25d97e42bc8ce91ad0
09-16 14:14:09.105885  1  4 StorageProvider::FileSystemDB::store() using provided oid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.107015  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
   
09-16 14:14:09.107033  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "85c60d25d97e42bc8ce91ad0"
    }
}>
09-16 14:14:09.107040  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.110711  1  4 insertChild() new child value=object(...)
09-16 14:14:09.110724  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.113558  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.113574  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.116239  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.116266  1  4 insertChild() found child value=object(...)
09-16 14:14:09.119152  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
},
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.119273  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
},
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.119285  1  4 insertChild() Insert succeeded.
09-16 14:14:09.119347  1  4 StorageProvider::FileSystemDB::store() using generated oid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.119366  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.119374  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.119402  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.119441  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/85c60d25d97e42bc8ce91ad0.json>.
09-16 14:14:09.119498  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
},
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.119509  1  5 findChild() args  path=<document>
09-16 14:14:09.122809  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.125609  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
},
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.125663  1  5 findChild() found child value=object(...)
09-16 14:14:09.128490  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
}
}>
09-16 14:14:09.128500  1  5 findChild() Find succeeded.
09-16 14:14:09.144545  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.144554  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.144595  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.144978  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.144989  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                         
09-16 14:14:09.145008  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.148012  1  5 StorageProvider::FileSystemDB::index::addDocument() found 6 keys.
09-16 14:14:09.148024  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.148030  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.148036  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.148070  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.148077  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.148083  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.148117  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.148365  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.148450  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.148473  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:09.148481  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "85c60d25d97e42bc8ce91ad0"}, "collection":"testFHICL_V001"}>
09-16 14:14:09.148516  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "85c60d25d97e42bc8ce91ad0"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.148523  1  5 findChild() args  path=<collection>
09-16 14:14:09.148711  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.148833  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.148849  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.148930  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.148938  1  5 findChild() Find succeeded.
09-16 14:14:09.149866  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "85c60d25d97e42bc8ce91ad0"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.149875  1  5 findChild() args  path=<filter>
09-16 14:14:09.150063  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.150184  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.150200  1  5 findChild() found child value=object(...)
09-16 14:14:09.150302  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "85c60d25d97e42bc8ce91ad0"
}
}>
09-16 14:14:09.150310  1  5 findChild() Find succeeded.
09-16 14:14:09.151351  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.151361  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.151375  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.151404  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.151411  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.151454  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.151792  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:09.151801  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "85c60d25d97e42bc8ce91ad0"
    }>.
09-16 14:14:09.151918  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:09.151943  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:14:09.151950  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<85c60d25d97e42bc8ce91ad0>.
09-16 14:14:09.151964  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:09.151985  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/85c60d25d97e42bc8ce91ad0.json>.
09-16 14:14:09.152209  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.152450  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.152523  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.152739  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:14:09.152753  1  3 deleteChild() args  path=<_id>
09-16 14:14:09.155720  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:14:09.158036  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85c60d25d97e42bc8ce91ad0"
}
}>
09-16 14:14:09.158058  1  3 deleteChild() deleted child value=object(...)
09-16 14:14:09.160431  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.160540  1  3 deleteChild() deletedChild=<{
"_oid" : "85c60d25d97e42bc8ce91ad0"
}>
09-16 14:14:09.160548  1  3 deleteChild() Delete succeeded.
09-16 14:14:09.160613  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.160628  1 10 operator==() args  other.__json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
Running test:<update>
Search criteria {"filter":{ "$oid" : "85c60d25d97e42bc8ce91ad0"}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.31 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_update_003_t" end time: Sep 16 14:14 CDT
"FileSystemFhicl_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

65/137 Testing: FileSystemFhicl_search2_004_t
65/137 Test: FileSystemFhicl_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/FileSystemFhicl_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/test004.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/test004.cmp.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test004.src.fcl" "-c" "test004.cmp.fcl" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/FileSystemFhicl_search2_004_t.d
"FileSystemFhicl_search2_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
09-16 14:14:09.198515  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:09.198652  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:09.198721  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:14:09.234315  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.234335  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.235027  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.235037  1  5 findChild() args  path=<collection>
09-16 14:14:09.240583  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.242067  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.242119  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.242220  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.242227  1  5 findChild() Find succeeded.
09-16 14:14:09.243264  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.243273  1  5 findChild() args  path=<filter>
09-16 14:14:09.245139  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.246498  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.246509  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.246878  1 12 StorageProvider::FileSystemDB generate_oid=2ff049e929a34c62955f6195
09-16 14:14:09.247921  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.247931  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "2ff049e929a34c62955f6195"
    }
}>
09-16 14:14:09.247934  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.249947  1  4 insertChild() new child value=object(...)
09-16 14:14:09.249965  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.251344  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.251355  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.252612  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.252652  1  4 insertChild() found child value=object(...)
09-16 14:14:09.254005  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "2ff049e929a34c62955f6195"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.254080  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "2ff049e929a34c62955f6195"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.254089  1  4 insertChild() Insert succeeded.
09-16 14:14:09.254132  1  4 StorageProvider::FileSystemDB::store() using generated oid=<2ff049e929a34c62955f6195>.
09-16 14:14:09.254161  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.254177  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.254208  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.254332  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/2ff049e929a34c62955f6195.json>.
09-16 14:14:09.254455  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "2ff049e929a34c62955f6195"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.254462  1  5 findChild() args  path=<document>
09-16 14:14:09.256256  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.257638  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "2ff049e929a34c62955f6195"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.257666  1  5 findChild() found child value=object(...)
09-16 14:14:09.259015  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "2ff049e929a34c62955f6195"
}
}
}>
09-16 14:14:09.259022  1  5 findChild() Find succeeded.
09-16 14:14:09.267054  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.267062  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.267098  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.267466  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.267475  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "2ff049e929a34c62955f6195"
        }
    }>.
09-16 14:14:09.267481  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<2ff049e929a34c62955f6195>.
09-16 14:14:09.269191  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.269212  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.269216  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<2ff049e929a34c62955f6195>.
09-16 14:14:09.269220  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.269298  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.269304  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<2ff049e929a34c62955f6195>.
09-16 14:14:09.269307  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.269330  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.269584  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.269679  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.269700  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.269706  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.269834  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.269842  1  5 findChild() args  path=<collection>
09-16 14:14:09.271645  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.272949  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.272962  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.273030  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.273036  1  5 findChild() Find succeeded.
09-16 14:14:09.273905  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.273914  1  5 findChild() args  path=<filter>
09-16 14:14:09.275676  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.276962  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.276972  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.277036  1 12 StorageProvider::FileSystemDB generate_oid=b3148229cb6c4bb29b6e10e8
09-16 14:14:09.277982  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.277991  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "b3148229cb6c4bb29b6e10e8"
    }
}>
09-16 14:14:09.277995  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.279921  1  4 insertChild() new child value=object(...)
09-16 14:14:09.279929  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.281210  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.281221  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.282379  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.282399  1  4 insertChild() found child value=object(...)
09-16 14:14:09.283732  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b3148229cb6c4bb29b6e10e8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.283802  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b3148229cb6c4bb29b6e10e8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.283808  1  4 insertChild() Insert succeeded.
09-16 14:14:09.283842  1  4 StorageProvider::FileSystemDB::store() using generated oid=<b3148229cb6c4bb29b6e10e8>.
09-16 14:14:09.283851  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.283855  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.283864  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.283879  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/b3148229cb6c4bb29b6e10e8.json>.
09-16 14:14:09.283913  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b3148229cb6c4bb29b6e10e8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.283919  1  5 findChild() args  path=<document>
09-16 14:14:09.285868  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.287186  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b3148229cb6c4bb29b6e10e8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.287212  1  5 findChild() found child value=object(...)
09-16 14:14:09.288548  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b3148229cb6c4bb29b6e10e8"
}
}
}>
09-16 14:14:09.288556  1  5 findChild() Find succeeded.
09-16 14:14:09.296377  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.296384  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.296434  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"85c60d25d97e42bc8ce91ad0",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.296829  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.296837  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "b3148229cb6c4bb29b6e10e8"
        }
    }>.
09-16 14:14:09.296842  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<b3148229cb6c4bb29b6e10e8>.
09-16 14:14:09.298570  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.298579  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.298582  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<b3148229cb6c4bb29b6e10e8>.
09-16 14:14:09.298585  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.298601  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.298605  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<b3148229cb6c4bb29b6e10e8>.
09-16 14:14:09.298608  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.298627  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.298897  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.298956  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.298969  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.298974  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.299101  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.299109  1  5 findChild() args  path=<collection>
09-16 14:14:09.300886  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.302173  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.302185  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.302253  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.302258  1  5 findChild() Find succeeded.
09-16 14:14:09.303136  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.303145  1  5 findChild() args  path=<filter>
09-16 14:14:09.304908  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.306196  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.306206  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.306269  1 12 StorageProvider::FileSystemDB generate_oid=6f5df139dfab4c4b94342600
09-16 14:14:09.307191  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.307200  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "6f5df139dfab4c4b94342600"
    }
}>
09-16 14:14:09.307203  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.309103  1  4 insertChild() new child value=object(...)
09-16 14:14:09.309112  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.310390  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.310403  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.311581  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.311597  1  4 insertChild() found child value=object(...)
09-16 14:14:09.312912  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6f5df139dfab4c4b94342600"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.312982  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6f5df139dfab4c4b94342600"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.312988  1  4 insertChild() Insert succeeded.
09-16 14:14:09.313021  1  4 StorageProvider::FileSystemDB::store() using generated oid=<6f5df139dfab4c4b94342600>.
09-16 14:14:09.313031  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.313035  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.313043  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.313058  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/6f5df139dfab4c4b94342600.json>.
09-16 14:14:09.313091  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6f5df139dfab4c4b94342600"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.313096  1  5 findChild() args  path=<document>
09-16 14:14:09.314865  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.316201  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6f5df139dfab4c4b94342600"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.316228  1  5 findChild() found child value=object(...)
09-16 14:14:09.317542  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6f5df139dfab4c4b94342600"
}
}
}>
09-16 14:14:09.317549  1  5 findChild() Find succeeded.
09-16 14:14:09.325385  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.325391  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.325443  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.325901  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.325909  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "6f5df139dfab4c4b94342600"
        }
    }>.
09-16 14:14:09.325914  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<6f5df139dfab4c4b94342600>.
09-16 14:14:09.327616  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.327625  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.327628  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<6f5df139dfab4c4b94342600>.
09-16 14:14:09.327631  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.327648  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.327651  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<6f5df139dfab4c4b94342600>.
09-16 14:14:09.327654  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.327674  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.327972  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.328033  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.328045  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.328051  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.328179  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.328187  1  5 findChild() args  path=<collection>
09-16 14:14:09.329998  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.331287  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.331300  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.331367  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.331382  1  5 findChild() Find succeeded.
09-16 14:14:09.332247  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.332256  1  5 findChild() args  path=<filter>
09-16 14:14:09.334042  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.335331  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.335341  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.335417  1 12 StorageProvider::FileSystemDB generate_oid=4b71fc530daf48baa81ef833
09-16 14:14:09.336323  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.336332  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "4b71fc530daf48baa81ef833"
    }
}>
09-16 14:14:09.336345  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.338282  1  4 insertChild() new child value=object(...)
09-16 14:14:09.338291  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.339606  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.339617  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.340944  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.340961  1  4 insertChild() found child value=object(...)
09-16 14:14:09.342305  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4b71fc530daf48baa81ef833"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.342377  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4b71fc530daf48baa81ef833"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.342384  1  4 insertChild() Insert succeeded.
09-16 14:14:09.342423  1  4 StorageProvider::FileSystemDB::store() using generated oid=<4b71fc530daf48baa81ef833>.
09-16 14:14:09.342433  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.342438  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.342446  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.342461  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/4b71fc530daf48baa81ef833.json>.
09-16 14:14:09.342496  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4b71fc530daf48baa81ef833"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.342502  1  5 findChild() args  path=<document>
09-16 14:14:09.344331  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.345666  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4b71fc530daf48baa81ef833"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.345693  1  5 findChild() found child value=object(...)
09-16 14:14:09.347005  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4b71fc530daf48baa81ef833"
}
}
}>
09-16 14:14:09.347013  1  5 findChild() Find succeeded.
09-16 14:14:09.355155  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.355162  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.355204  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.355755  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.355772  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "4b71fc530daf48baa81ef833"
        }
    }>.
09-16 14:14:09.355778  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<4b71fc530daf48baa81ef833>.
09-16 14:14:09.357639  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.357649  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.357652  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<4b71fc530daf48baa81ef833>.
09-16 14:14:09.357655  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.357672  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.357676  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<4b71fc530daf48baa81ef833>.
09-16 14:14:09.357679  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.357700  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.358034  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.358097  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.358109  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.358115  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.358246  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.358254  1  5 findChild() args  path=<collection>
09-16 14:14:09.360114  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.361439  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.361452  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.361522  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.361528  1  5 findChild() Find succeeded.
09-16 14:14:09.362428  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.362437  1  5 findChild() args  path=<filter>
09-16 14:14:09.364248  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.365792  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.365802  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.365869  1 12 StorageProvider::FileSystemDB generate_oid=1dba0ecfc40e497a88e19aa0
09-16 14:14:09.366829  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.366839  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "1dba0ecfc40e497a88e19aa0"
    }
}>
09-16 14:14:09.366843  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.368816  1  4 insertChild() new child value=object(...)
09-16 14:14:09.368824  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.370128  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.370139  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.371321  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.371338  1  4 insertChild() found child value=object(...)
09-16 14:14:09.372777  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1dba0ecfc40e497a88e19aa0"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.372877  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1dba0ecfc40e497a88e19aa0"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.372884  1  4 insertChild() Insert succeeded.
09-16 14:14:09.372927  1  4 StorageProvider::FileSystemDB::store() using generated oid=<1dba0ecfc40e497a88e19aa0>.
09-16 14:14:09.372936  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.372940  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.372948  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.372963  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/1dba0ecfc40e497a88e19aa0.json>.
09-16 14:14:09.373006  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1dba0ecfc40e497a88e19aa0"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.373012  1  5 findChild() args  path=<document>
09-16 14:14:09.374850  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.376206  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1dba0ecfc40e497a88e19aa0"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.376233  1  5 findChild() found child value=object(...)
09-16 14:14:09.377584  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1dba0ecfc40e497a88e19aa0"
}
}
}>
09-16 14:14:09.377596  1  5 findChild() Find succeeded.
09-16 14:14:09.385979  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.385985  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.386030  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.386641  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.386658  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "1dba0ecfc40e497a88e19aa0"
        }
    }>.
09-16 14:14:09.386664  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<1dba0ecfc40e497a88e19aa0>.
09-16 14:14:09.388375  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.388393  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.388400  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<1dba0ecfc40e497a88e19aa0>.
09-16 14:14:09.388403  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.388422  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.388427  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<1dba0ecfc40e497a88e19aa0>.
09-16 14:14:09.388430  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.388461  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.388966  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.389031  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.389044  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.389050  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.389181  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.389189  1  5 findChild() args  path=<collection>
09-16 14:14:09.391067  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.392388  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.392405  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.392475  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.392482  1  5 findChild() Find succeeded.
09-16 14:14:09.393354  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.393363  1  5 findChild() args  path=<filter>
09-16 14:14:09.395139  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.396429  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.396439  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.396502  1 12 StorageProvider::FileSystemDB generate_oid=9bce89a9c1b54f9db7e242db
09-16 14:14:09.397562  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.397571  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "9bce89a9c1b54f9db7e242db"
    }
}>
09-16 14:14:09.397575  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.399498  1  4 insertChild() new child value=object(...)
09-16 14:14:09.399507  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.400848  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.400858  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.402014  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.402030  1  4 insertChild() found child value=object(...)
09-16 14:14:09.403345  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9bce89a9c1b54f9db7e242db"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.403420  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9bce89a9c1b54f9db7e242db"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.403426  1  4 insertChild() Insert succeeded.
09-16 14:14:09.403460  1  4 StorageProvider::FileSystemDB::store() using generated oid=<9bce89a9c1b54f9db7e242db>.
09-16 14:14:09.403469  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.403473  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.403481  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.403496  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/9bce89a9c1b54f9db7e242db.json>.
09-16 14:14:09.403529  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9bce89a9c1b54f9db7e242db"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.403534  1  5 findChild() args  path=<document>
09-16 14:14:09.405302  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.406628  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9bce89a9c1b54f9db7e242db"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.406654  1  5 findChild() found child value=object(...)
09-16 14:14:09.407965  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9bce89a9c1b54f9db7e242db"
}
}
}>
09-16 14:14:09.407972  1  5 findChild() Find succeeded.
09-16 14:14:09.416894  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.416901  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.416958  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.417606  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.417615  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "9bce89a9c1b54f9db7e242db"
        }
    }>.
09-16 14:14:09.417620  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<9bce89a9c1b54f9db7e242db>.
09-16 14:14:09.419323  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.419332  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.419336  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<9bce89a9c1b54f9db7e242db>.
09-16 14:14:09.419338  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.419356  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.419360  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<9bce89a9c1b54f9db7e242db>.
09-16 14:14:09.419366  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.419441  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.420066  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.420131  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.420143  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.420148  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.420278  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.420285  1  5 findChild() args  path=<collection>
09-16 14:14:09.422269  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.423595  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.423608  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.423678  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.423683  1  5 findChild() Find succeeded.
09-16 14:14:09.424582  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.424591  1  5 findChild() args  path=<filter>
09-16 14:14:09.426373  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.427664  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.427673  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.427737  1 12 StorageProvider::FileSystemDB generate_oid=4a67a060ed2644b3afc34476
09-16 14:14:09.428731  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.428750  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "4a67a060ed2644b3afc34476"
    }
}>
09-16 14:14:09.428763  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.430801  1  4 insertChild() new child value=object(...)
09-16 14:14:09.430809  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.432147  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.432157  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.433336  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.433352  1  4 insertChild() found child value=object(...)
09-16 14:14:09.434671  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a67a060ed2644b3afc34476"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.434742  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a67a060ed2644b3afc34476"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.434748  1  4 insertChild() Insert succeeded.
09-16 14:14:09.434781  1  4 StorageProvider::FileSystemDB::store() using generated oid=<4a67a060ed2644b3afc34476>.
09-16 14:14:09.434791  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.434795  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.434803  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.434818  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/4a67a060ed2644b3afc34476.json>.
09-16 14:14:09.434851  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a67a060ed2644b3afc34476"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.434857  1  5 findChild() args  path=<document>
09-16 14:14:09.436702  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.438165  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a67a060ed2644b3afc34476"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.438193  1  5 findChild() found child value=object(...)
09-16 14:14:09.439540  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a67a060ed2644b3afc34476"
}
}
}>
09-16 14:14:09.439548  1  5 findChild() Find succeeded.
09-16 14:14:09.447804  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.447811  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.447870  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.448596  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.448605  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "4a67a060ed2644b3afc34476"
        }
    }>.
09-16 14:14:09.448610  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<4a67a060ed2644b3afc34476>.
09-16 14:14:09.450317  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.450336  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.450339  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<4a67a060ed2644b3afc34476>.
09-16 14:14:09.450342  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.450361  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.450366  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<4a67a060ed2644b3afc34476>.
09-16 14:14:09.450379  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.450415  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.450858  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.450944  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.450966  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.450972  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.451111  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.451119  1  5 findChild() args  path=<collection>
09-16 14:14:09.453018  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.454358  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.454371  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.454451  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.454458  1  5 findChild() Find succeeded.
09-16 14:14:09.455349  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.455358  1  5 findChild() args  path=<filter>
09-16 14:14:09.457205  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.458527  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.458537  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.458601  1 12 StorageProvider::FileSystemDB generate_oid=51c7be00a1df4e72a97deb01
09-16 14:14:09.459524  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.459533  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "51c7be00a1df4e72a97deb01"
    }
}>
09-16 14:14:09.459546  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.461648  1  4 insertChild() new child value=object(...)
09-16 14:14:09.461656  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.462970  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.462981  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.464183  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.464199  1  4 insertChild() found child value=object(...)
09-16 14:14:09.465543  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "51c7be00a1df4e72a97deb01"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.465613  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "51c7be00a1df4e72a97deb01"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.465619  1  4 insertChild() Insert succeeded.
09-16 14:14:09.465652  1  4 StorageProvider::FileSystemDB::store() using generated oid=<51c7be00a1df4e72a97deb01>.
09-16 14:14:09.465661  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.465665  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.465673  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.465688  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/51c7be00a1df4e72a97deb01.json>.
09-16 14:14:09.465721  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "51c7be00a1df4e72a97deb01"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.465726  1  5 findChild() args  path=<document>
09-16 14:14:09.467503  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.468978  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "51c7be00a1df4e72a97deb01"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.469006  1  5 findChild() found child value=object(...)
09-16 14:14:09.470355  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "51c7be00a1df4e72a97deb01"
}
}
}>
09-16 14:14:09.470363  1  5 findChild() Find succeeded.
09-16 14:14:09.478549  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.478556  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.478597  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.479422  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.479431  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "51c7be00a1df4e72a97deb01"
        }
    }>.
09-16 14:14:09.479436  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<51c7be00a1df4e72a97deb01>.
09-16 14:14:09.481194  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.481204  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.481207  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<51c7be00a1df4e72a97deb01>.
09-16 14:14:09.481210  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.481229  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.481233  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<51c7be00a1df4e72a97deb01>.
09-16 14:14:09.481236  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.481257  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.481706  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.481772  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.481784  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.481791  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.481918  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.481925  1  5 findChild() args  path=<collection>
09-16 14:14:09.483731  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.485169  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.485182  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.485259  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.485264  1  5 findChild() Find succeeded.
09-16 14:14:09.486144  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.486153  1  5 findChild() args  path=<filter>
09-16 14:14:09.487987  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.489300  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.489309  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.489372  1 12 StorageProvider::FileSystemDB generate_oid=9c0e7cc107de4b1b9ed82e04
09-16 14:14:09.490286  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.490295  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "9c0e7cc107de4b1b9ed82e04"
    }
}>
09-16 14:14:09.490298  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.492171  1  4 insertChild() new child value=object(...)
09-16 14:14:09.492179  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.493681  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.493692  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.494881  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.494898  1  4 insertChild() found child value=object(...)
09-16 14:14:09.496249  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9c0e7cc107de4b1b9ed82e04"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.496321  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9c0e7cc107de4b1b9ed82e04"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.496327  1  4 insertChild() Insert succeeded.
09-16 14:14:09.496361  1  4 StorageProvider::FileSystemDB::store() using generated oid=<9c0e7cc107de4b1b9ed82e04>.
09-16 14:14:09.496371  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.496375  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.496383  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.496402  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/9c0e7cc107de4b1b9ed82e04.json>.
09-16 14:14:09.496436  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9c0e7cc107de4b1b9ed82e04"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.496442  1  5 findChild() args  path=<document>
09-16 14:14:09.498232  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.499575  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9c0e7cc107de4b1b9ed82e04"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.499611  1  5 findChild() found child value=object(...)
09-16 14:14:09.501060  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9c0e7cc107de4b1b9ed82e04"
}
}
}>
09-16 14:14:09.501068  1  5 findChild() Find succeeded.
09-16 14:14:09.509191  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.509198  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.509259  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.510115  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.510124  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "9c0e7cc107de4b1b9ed82e04"
        }
    }>.
09-16 14:14:09.510129  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<9c0e7cc107de4b1b9ed82e04>.
09-16 14:14:09.511877  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.511886  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.511890  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<9c0e7cc107de4b1b9ed82e04>.
09-16 14:14:09.511893  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.511912  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.511916  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<9c0e7cc107de4b1b9ed82e04>.
09-16 14:14:09.511920  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.511942  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.512426  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.512497  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.512512  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.512517  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:14:09.512648  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.512656  1  5 findChild() args  path=<collection>
09-16 14:14:09.514509  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.515927  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.515940  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.516010  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.516015  1  5 findChild() Find succeeded.
09-16 14:14:09.516929  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.516938  1  5 findChild() args  path=<filter>
09-16 14:14:09.518874  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.520414  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.520450  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:14:09.520629  1 12 StorageProvider::FileSystemDB generate_oid=8c0b4a166b0d4db1875c750f
09-16 14:14:09.521695  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.521704  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "8c0b4a166b0d4db1875c750f"
    }
}>
09-16 14:14:09.521708  1  2 insertChild() args  path=<document._id>
09-16 14:14:09.523798  1  4 insertChild() new child value=object(...)
09-16 14:14:09.523808  1  4 insertChild() recurse() args currentDepth=1
09-16 14:14:09.525167  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.525191  1  4 insertChild() recurse() args currentDepth=0
09-16 14:14:09.526470  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:14:09.526503  1  4 insertChild() found child value=object(...)
09-16 14:14:09.527974  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "8c0b4a166b0d4db1875c750f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.528054  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "8c0b4a166b0d4db1875c750f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.528062  1  4 insertChild() Insert succeeded.
09-16 14:14:09.528140  1  4 StorageProvider::FileSystemDB::store() using generated oid=<8c0b4a166b0d4db1875c750f>.
09-16 14:14:09.528157  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.528163  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.528182  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.528212  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/8c0b4a166b0d4db1875c750f.json>.
09-16 14:14:09.528276  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "8c0b4a166b0d4db1875c750f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.528282  1  5 findChild() args  path=<document>
09-16 14:14:09.530105  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.531473  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "8c0b4a166b0d4db1875c750f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.531501  1  5 findChild() found child value=object(...)
09-16 14:14:09.532997  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "8c0b4a166b0d4db1875c750f"
}
}
}>
09-16 14:14:09.533005  1  5 findChild() Find succeeded.
09-16 14:14:09.541324  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.541332  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.541406  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.542324  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.542332  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "8c0b4a166b0d4db1875c750f"
        }
    }>.
09-16 14:14:09.542338  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<8c0b4a166b0d4db1875c750f>.
09-16 14:14:09.544100  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:14:09.544110  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.544114  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<8c0b4a166b0d4db1875c750f>.
09-16 14:14:09.544117  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:14:09.544140  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.544145  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<8c0b4a166b0d4db1875c750f>.
09-16 14:14:09.544148  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.544172  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.544686  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"8c0b4a166b0d4db1875c750f",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"8c0b4a166b0d4db1875c750f",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.544788  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.544820  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:09.544824  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{"_id" : { "$in" : [ { "$oid" : "2ff049e929a34c62955f6195"},{ "$oid" : "b3148229cb6c4bb29b6e10e8"},{ "$oid" : "6f5df139dfab4c4b94342600"},{ "$oid" : "4b71fc530daf48baa81ef833"},{ "$oid" : "1dba0ecfc40e497a88e19aa0"},{ "$oid" : "9bce89a9c1b54f9db7e242db"},{ "$oid" : "4a67a060ed2644b3afc34476"},{ "$oid" : "51c7be00a1df4e72a97deb01"},{ "$oid" : "9c0e7cc107de4b1b9ed82e04"},{ "$oid" : "8c0b4a166b0d4db1875c750f"}]} }, "collection":"testFHICL_V001"}>
09-16 14:14:09.544994  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "2ff049e929a34c62955f6195"
                }, 
                {
                    "$oid" : "b3148229cb6c4bb29b6e10e8"
                }, 
                {
                    "$oid" : "6f5df139dfab4c4b94342600"
                }, 
                {
                    "$oid" : "4b71fc530daf48baa81ef833"
                }, 
                {
                    "$oid" : "1dba0ecfc40e497a88e19aa0"
                }, 
                {
                    "$oid" : "9bce89a9c1b54f9db7e242db"
                }, 
                {
                    "$oid" : "4a67a060ed2644b3afc34476"
                }, 
                {
                    "$oid" : "51c7be00a1df4e72a97deb01"
                }, 
                {
                    "$oid" : "9c0e7cc107de4b1b9ed82e04"
                }, 
                {
                    "$oid" : "8c0b4a166b0d4db1875c750f"
                }
            ]
        }
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.545002  1  5 findChild() args  path=<collection>
09-16 14:14:09.545805  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.546347  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "2ff049e929a34c62955f6195"
},
{
"$oid" : "b3148229cb6c4bb29b6e10e8"
},
{
"$oid" : "6f5df139dfab4c4b94342600"
},
{
"$oid" : "4b71fc530daf48baa81ef833"
},
{
"$oid" : "1dba0ecfc40e497a88e19aa0"
},
{
"$oid" : "9bce89a9c1b54f9db7e242db"
},
{
"$oid" : "4a67a060ed2644b3afc34476"
},
{
"$oid" : "51c7be00a1df4e72a97deb01"
},
{
"$oid" : "9c0e7cc107de4b1b9ed82e04"
},
{
"$oid" : "8c0b4a166b0d4db1875c750f"
}
]
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.546360  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:14:09.546452  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.546458  1  5 findChild() Find succeeded.
09-16 14:14:09.547312  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "2ff049e929a34c62955f6195"
                }, 
                {
                    "$oid" : "b3148229cb6c4bb29b6e10e8"
                }, 
                {
                    "$oid" : "6f5df139dfab4c4b94342600"
                }, 
                {
                    "$oid" : "4b71fc530daf48baa81ef833"
                }, 
                {
                    "$oid" : "1dba0ecfc40e497a88e19aa0"
                }, 
                {
                    "$oid" : "9bce89a9c1b54f9db7e242db"
                }, 
                {
                    "$oid" : "4a67a060ed2644b3afc34476"
                }, 
                {
                    "$oid" : "51c7be00a1df4e72a97deb01"
                }, 
                {
                    "$oid" : "9c0e7cc107de4b1b9ed82e04"
                }, 
                {
                    "$oid" : "8c0b4a166b0d4db1875c750f"
                }
            ]
        }
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:14:09.547319  1  5 findChild() args  path=<filter>
09-16 14:14:09.548093  1  5 findChild() recurse() args currentDepth=0
09-16 14:14:09.548645  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "2ff049e929a34c62955f6195"
},
{
"$oid" : "b3148229cb6c4bb29b6e10e8"
},
{
"$oid" : "6f5df139dfab4c4b94342600"
},
{
"$oid" : "4b71fc530daf48baa81ef833"
},
{
"$oid" : "1dba0ecfc40e497a88e19aa0"
},
{
"$oid" : "9bce89a9c1b54f9db7e242db"
},
{
"$oid" : "4a67a060ed2644b3afc34476"
},
{
"$oid" : "51c7be00a1df4e72a97deb01"
},
{
"$oid" : "9c0e7cc107de4b1b9ed82e04"
},
{
"$oid" : "8c0b4a166b0d4db1875c750f"
}
]
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:14:09.548664  1  5 findChild() found child value=object(...)
09-16 14:14:09.549172  1  5 findChild() resultDocument=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "2ff049e929a34c62955f6195"
},
{
"$oid" : "b3148229cb6c4bb29b6e10e8"
},
{
"$oid" : "6f5df139dfab4c4b94342600"
},
{
"$oid" : "4b71fc530daf48baa81ef833"
},
{
"$oid" : "1dba0ecfc40e497a88e19aa0"
},
{
"$oid" : "9bce89a9c1b54f9db7e242db"
},
{
"$oid" : "4a67a060ed2644b3afc34476"
},
{
"$oid" : "51c7be00a1df4e72a97deb01"
},
{
"$oid" : "9c0e7cc107de4b1b9ed82e04"
},
{
"$oid" : "8c0b4a166b0d4db1875c750f"
}
]
}
}
}>
09-16 14:14:09.549179  1  5 findChild() Find succeeded.
09-16 14:14:09.552693  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:14:09.552701  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.552710  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:14:09.552727  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.552731  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:14:09.552778  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"8c0b4a166b0d4db1875c750f",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"8c0b4a166b0d4db1875c750f",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.553785  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:09.553794  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "_id" : {
            "$in" : [
                {
                    "$oid" : "2ff049e929a34c62955f6195"
                }, 
                {
                    "$oid" : "b3148229cb6c4bb29b6e10e8"
                }, 
                {
                    "$oid" : "6f5df139dfab4c4b94342600"
                }, 
                {
                    "$oid" : "4b71fc530daf48baa81ef833"
                }, 
                {
                    "$oid" : "1dba0ecfc40e497a88e19aa0"
                }, 
                {
                    "$oid" : "9bce89a9c1b54f9db7e242db"
                }, 
                {
                    "$oid" : "4a67a060ed2644b3afc34476"
                }, 
                {
                    "$oid" : "51c7be00a1df4e72a97deb01"
                }, 
                {
                    "$oid" : "9c0e7cc107de4b1b9ed82e04"
                }, 
                {
                    "$oid" : "8c0b4a166b0d4db1875c750f"
                }
            ]
        }
    }>.
09-16 14:14:09.554485  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:09.555013  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() begin
09-16 14:14:09.555021  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() args objectid=<{
"$in" : [
{
"$oid" : "2ff049e929a34c62955f6195"
},
{
"$oid" : "b3148229cb6c4bb29b6e10e8"
},
{
"$oid" : "6f5df139dfab4c4b94342600"
},
{
"$oid" : "4b71fc530daf48baa81ef833"
},
{
"$oid" : "1dba0ecfc40e497a88e19aa0"
},
{
"$oid" : "9bce89a9c1b54f9db7e242db"
},
{
"$oid" : "4a67a060ed2644b3afc34476"
},
{
"$oid" : "51c7be00a1df4e72a97deb01"
},
{
"$oid" : "9c0e7cc107de4b1b9ed82e04"
},
{
"$oid" : "8c0b4a166b0d4db1875c750f"
}
]
}>.
09-16 14:14:09.555658  1  5 StorageProvider::FileSystemDB::index::_matchObjectIds() found 10 ouids.
09-16 14:14:09.555667  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<2ff049e929a34c62955f6195>.
09-16 14:14:09.555673  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<b3148229cb6c4bb29b6e10e8>.
09-16 14:14:09.555678  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<6f5df139dfab4c4b94342600>.
09-16 14:14:09.555682  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<4b71fc530daf48baa81ef833>.
09-16 14:14:09.555686  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<1dba0ecfc40e497a88e19aa0>.
09-16 14:14:09.555690  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<9bce89a9c1b54f9db7e242db>.
09-16 14:14:09.555694  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<4a67a060ed2644b3afc34476>.
09-16 14:14:09.555697  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<51c7be00a1df4e72a97deb01>.
09-16 14:14:09.555701  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<9c0e7cc107de4b1b9ed82e04>.
09-16 14:14:09.555705  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<8c0b4a166b0d4db1875c750f>.
09-16 14:14:09.555708  1 15 StorageProvider::FileSystemDB::index::_matchObjectIds() Found 10 documents
09-16 14:14:09.555840  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() criteria_count=0, max_count=1, found 10 documents.
09-16 14:14:09.555859  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() returning 10 documents.
09-16 14:14:09.555874  1  3 StorageProvider::FileSystemDB::load() search returned 10 documents.
09-16 14:14:09.556023  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/1dba0ecfc40e497a88e19aa0.json>.
09-16 14:14:09.556155  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/2ff049e929a34c62955f6195.json>.
09-16 14:14:09.556308  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/4a67a060ed2644b3afc34476.json>.
09-16 14:14:09.556425  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/4b71fc530daf48baa81ef833.json>.
09-16 14:14:09.556539  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/51c7be00a1df4e72a97deb01.json>.
09-16 14:14:09.556652  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/6f5df139dfab4c4b94342600.json>.
09-16 14:14:09.556769  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/8c0b4a166b0d4db1875c750f.json>.
09-16 14:14:09.556884  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/9bce89a9c1b54f9db7e242db.json>.
09-16 14:14:09.556999  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/9c0e7cc107de4b1b9ed82e04.json>.
09-16 14:14:09.557118  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/b3148229cb6c4bb29b6e10e8.json>.
09-16 14:14:09.557230  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.557737  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"8c0b4a166b0d4db1875c750f",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1dba0ecfc40e497a88e19aa0",
"2ff049e929a34c62955f6195",
"4a67a060ed2644b3afc34476",
"4b71fc530daf48baa81ef833",
"51c7be00a1df4e72a97deb01",
"6f5df139dfab4c4b94342600",
"85c60d25d97e42bc8ce91ad0",
"8c0b4a166b0d4db1875c750f",
"9bce89a9c1b54f9db7e242db",
"9c0e7cc107de4b1b9ed82e04",
"b3148229cb6c4bb29b6e10e8",
"c45fdb7f80e44d87a912f780"
]
}
}>
09-16 14:14:09.557813  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ { "$oid" : "2ff049e929a34c62955f6195"},{ "$oid" : "b3148229cb6c4bb29b6e10e8"},{ "$oid" : "6f5df139dfab4c4b94342600"},{ "$oid" : "4b71fc530daf48baa81ef833"},{ "$oid" : "1dba0ecfc40e497a88e19aa0"},{ "$oid" : "9bce89a9c1b54f9db7e242db"},{ "$oid" : "4a67a060ed2644b3afc34476"},{ "$oid" : "51c7be00a1df4e72a97deb01"},{ "$oid" : "9c0e7cc107de4b1b9ed82e04"},{ "$oid" : "8c0b4a166b0d4db1875c750f"}]} }, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.40 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_search2_004_t" end time: Sep 16 14:14 CDT
"FileSystemFhicl_search2_004_t" time elapsed: 00:00:00
----------------------------------------------------------

66/137 Testing: ValidateJson_t
66/137 Test: ValidateJson_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/Utils/test001/ValidateJson_t.d" "--required-files" "" "--datafiles" "" "--skip-return-code" "247" "ValidateJson_t"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/Utils/test001/ValidateJson_t.d
"ValidateJson_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
<end of output>
Test time =   0.03 sec
----------------------------------------------------------
Test Passed.
"ValidateJson_t" end time: Sep 16 14:14 CDT
"ValidateJson_t" time elapsed: 00:00:00
----------------------------------------------------------

67/137 Testing: LoadStore_store_filesystem_001_t
67/137 Test: LoadStore_store_filesystem_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test001/LoadStore_store_filesystem_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test001/test001.src.217.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test001/test001.cmp.217.json" "--skip-return-code" "247" "LoadStore_t" "-o" "store" "-d" "filesystem" "-c" "testLoadStore" "-f" "json" "-v" "versionA71444" "-s" "test001.src.217.json" "-r" "test001.cmp.217.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test001/LoadStore_store_filesystem_001_t.d
"LoadStore_store_filesystem_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test001.cmp.512.json’
removed ‘test001.src.512.json’
09-16 14:14:09.627791  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:09.628040  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:09.628144  1  0 artdaq::database::mongo trace_enable
09-16 14:14:09.628282  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:09.628356  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:09.628380  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:09.628429  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:09.630014  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:09.630029  1 10 Options: Updating operation from load to store.
09-16 14:14:09.630036  1 14 Options: dataFormat args format=<json>.
09-16 14:14:09.630043  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:09.630050  1 10 Options: Updating version from notprovided to versionA71444.
09-16 14:14:09.637169  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionA71444"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "json"
}>
09-16 14:14:09.637463  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:09.637473  1 10 Options: Updating operation from load to store.
09-16 14:14:09.637477  1 14 Options: dataFormat args format=<json>.
09-16 14:14:09.637481  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:09.637566  1 15 Options: searchFilter args search_filter=<{
"version" : "versionA71444"
}>.
09-16 14:14:09.638044  1 10 Options: Updating version from notprovided to versionA71444.
09-16 14:14:09.638072  1 15 store_configuration: begin
09-16 14:14:09.638087  1 15 store_configuration: json_buffer=<{"data":{
"daq" : {
"event_builder" : {

"expected_fragments_per_event" : 2,

"first_fragment_receiver_rank" : 0,

"fragment_receiver_count" : 2,

"mpi_buffer_count" : 16,

"print_event_store_stats" : true,

"use_art" : true,

"verbose" : false
}
}
}
}>
09-16 14:14:09.667132  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "versionA71444",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Sep 16 14:14:09 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Sep 16 14:14:09 2016"
},
{
"setVersion" : "Fri Sep 16 14:14:09 2016"
},
{
"setConfigurableEntity" : "Fri Sep 16 14:14:09 2016"
}
]
},
"configurable_entity" : {
"name" : "notprovided"
}
}, "collection":"testLoadStore"}>
09-16 14:14:09.667269  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:09.667282  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "versionA71444",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Sep 16 14:14:09 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Sep 16 14:14:09 2016"
},
{
"setVersion" : "Fri Sep 16 14:14:09 2016"
},
{
"setConfigurableEntity" : "Fri Sep 16 14:14:09 2016"
}
]
},
"configurable_entity" : {
"name" : "notprovided"
}
}, "collection":"testLoadStore"}>
09-16 14:14:09.671647  1 12 StorageProvider::FileSystemDB generate_oid=fa8f79db31c54c68930e2ce9
09-16 14:14:09.675423  1  4 StorageProvider::FileSystemDB::store() using generated oid=<fa8f79db31c54c68930e2ce9>.
09-16 14:14:09.675463  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:09.675483  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:09.675871  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/fa8f79db31c54c68930e2ce9.json>.
09-16 14:14:09.684989  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.684999  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:09.685072  1  3 StorageProvider::FileSystemDB::index::_open() json=<{"version":{},"configurations.name":{}, "configurable_entity.name":{} }>
09-16 14:14:09.685226  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:09.685234  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }, 
            "metadata" : {
                "comments" : {
                    "empty" : "empty"
                }
            }, 
            "search" : [
                {
                    "name" : "find any", 
                    "query" : "not defined"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "json", 
            "rawdata" : "as"
        }, 
        "version" : "versionA71444", 
        "configurations" : [
            {
                "name" : "notprovided", 
                "assigned" : "Fri Sep 16 14:14:09 2016"
            }
        ], 
        "aliases" : {
            "active" : [

            ], 
            "history" : [

            ]
        }, 
        "changelog" : "empty", 
        "bookkeeping" : {
            "isdeleted" : false, 
            "isreadonly" : true, 
            "created" : "Tue Dec 29 18:19:25 2015", 
            "updates" : [
                {
                    "addToGlobalConfig" : "Fri Sep 16 14:14:09 2016"
                }, 
                {
                    "setVersion" : "Fri Sep 16 14:14:09 2016"
                }, 
                {
                    "setConfigurableEntity" : "Fri Sep 16 14:14:09 2016"
                }
            ]
        }, 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "_id" : {
            "_oid" : "fa8f79db31c54c68930e2ce9"
        }
    }>.
09-16 14:14:09.685240  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<fa8f79db31c54c68930e2ce9>.
09-16 14:14:09.686700  1  5 StorageProvider::FileSystemDB::index::addDocument() found 9 keys.
09-16 14:14:09.686714  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:09.686718  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<fa8f79db31c54c68930e2ce9>.
09-16 14:14:09.686722  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<versionA71444>.
09-16 14:14:09.686832  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() begin
09-16 14:14:09.686838  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args ouid=<fa8f79db31c54c68930e2ce9>.
09-16 14:14:09.686841  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args configuration=<notprovided>.
09-16 14:14:09.686870  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:09.686885  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<fa8f79db31c54c68930e2ce9>.
09-16 14:14:09.686888  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:09.686914  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.687140  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
]
},
"configurations.name" : {
"notprovided" : [
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"fa8f79db31c54c68930e2ce9"
]
}
}>
09-16 14:14:09.687219  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.687258  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionA71444"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "json"
}
Running test:<store>
returned:
{
"daq" : {
"event_builder" : {

"expected_fragments_per_event" : 2,

"first_fragment_receiver_rank" : 0,

"fragment_receiver_count" : 2,

"mpi_buffer_count" : 16,

"print_event_store_stats" : true,

"use_art" : true,

"verbose" : false
}
}
}

<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_filesystem_001_t" end time: Sep 16 14:14 CDT
"LoadStore_store_filesystem_001_t" time elapsed: 00:00:00
----------------------------------------------------------

68/137 Testing: LoadStore_store_mongo_001_t
68/137 Test: LoadStore_store_mongo_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test001/LoadStore_store_mongo_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test001/test001.src.461.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test001/test001.cmp.461.json" "--skip-return-code" "247" "LoadStore_t" "-o" "store" "-d" "mongo" "-c" "testLoadStore" "-f" "json" "-v" "versionA71444" "-s" "test001.src.461.json" "-r" "test001.cmp.461.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test001/LoadStore_store_mongo_001_t.d
"LoadStore_store_mongo_001_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test001.cmp.218.json’
removed ‘test001.src.218.json’
09-16 14:14:09.718809  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:09.718924  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:09.718980  1  0 artdaq::database::mongo trace_enable
09-16 14:14:09.719042  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:09.719081  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:09.719107  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:09.719131  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:09.720257  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:09.720273  1 10 Options: Updating operation from load to store.
09-16 14:14:09.720284  1 14 Options: dataFormat args format=<json>.
09-16 14:14:09.720298  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:09.720311  1 10 Options: Updating version from notprovided to versionA71444.
09-16 14:14:09.727181  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionA71444"
},
"dbprovider" : "mongo",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "json"
}>
09-16 14:14:09.727467  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:09.727479  1 10 Options: Updating operation from load to store.
09-16 14:14:09.727486  1 14 Options: dataFormat args format=<json>.
09-16 14:14:09.727494  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:09.727585  1 15 Options: searchFilter args search_filter=<{
"version" : "versionA71444"
}>.
09-16 14:14:09.728068  1 10 Options: Updating version from notprovided to versionA71444.
09-16 14:14:09.728104  1 15 store_configuration: begin
09-16 14:14:09.728126  1 15 store_configuration: json_buffer=<{"data":{
"daq" : {
"event_builder" : {

"expected_fragments_per_event" : 2,

"first_fragment_receiver_rank" : 0,

"fragment_receiver_count" : 2,

"mpi_buffer_count" : 16,

"print_event_store_stats" : true,

"use_art" : true,

"verbose" : false
}
}
}
}>
09-16 14:14:09.758021  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "versionA71444",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Sep 16 14:14:09 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Sep 16 14:14:09 2016"
},
{
"setVersion" : "Fri Sep 16 14:14:09 2016"
},
{
"setConfigurableEntity" : "Fri Sep 16 14:14:09 2016"
}
]
},
"configurable_entity" : {
"name" : "notprovided"
}
}, "collection":"testLoadStore"}>
09-16 14:14:09.758889  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:09.759154  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:09.913825  1  5 inserted_id={
    "$oid" : "57dc44811a72ba42f87cb011"
}
09-16 14:14:09.914115  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionA71444"
},
"dbprovider" : "mongo",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "json"
}
Running test:<store>
returned:
{
"daq" : {
"event_builder" : {

"expected_fragments_per_event" : 2,

"first_fragment_receiver_rank" : 0,

"fragment_receiver_count" : 2,

"mpi_buffer_count" : 16,

"print_event_store_stats" : true,

"use_art" : true,

"verbose" : false
}
}
}

<end of output>
Test time =   0.23 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_mongo_001_t" end time: Sep 16 14:14 CDT
"LoadStore_store_mongo_001_t" time elapsed: 00:00:00
----------------------------------------------------------

69/137 Testing: LoadStore_load_filesystem_003_t
69/137 Test: LoadStore_load_filesystem_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test003/LoadStore_load_filesystem_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test003/test001.cmp.747.json" "--skip-return-code" "247" "LoadStore_t" "-o" "load" "-d" "filesystem" "-c" "testLoadStore" "-f" "json" "-v" "versionA71444" "-r" "test001.cmp.747.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test003/LoadStore_load_filesystem_003_t.d
"LoadStore_load_filesystem_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test001.cmp.723.json’
09-16 14:14:09.967279  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:09.967437  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:09.967514  1  0 artdaq::database::mongo trace_enable
09-16 14:14:09.967603  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:09.967653  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:09.967678  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:09.967704  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:09.969409  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:09.969439  1 10 Options: Updating operation from load to load.
09-16 14:14:09.969464  1 14 Options: dataFormat args format=<json>.
09-16 14:14:09.969480  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:09.969496  1 10 Options: Updating version from notprovided to versionA71444.
09-16 14:14:09.982463  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionA71444"
},
"dbprovider" : "filesystem",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "json"
}>
09-16 14:14:09.982963  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:09.982978  1 10 Options: Updating operation from load to load.
09-16 14:14:09.982986  1 14 Options: dataFormat args format=<json>.
09-16 14:14:09.982993  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:09.983157  1 15 Options: searchFilter args search_filter=<{
"version" : "versionA71444"
}>.
09-16 14:14:09.983943  1 10 Options: Updating version from notprovided to versionA71444.
09-16 14:14:09.983988  1 16 load_configuration: begin
09-16 14:14:09.984024  1 16 load_configuration: search_payload=<{"filter":{
"version" : "versionA71444"
}, "collection":"testLoadStore"}>
09-16 14:14:09.984271  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:09.984290  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{
"version" : "versionA71444"
}, "collection":"testLoadStore"}>
09-16 14:14:09.990619  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:09.990684  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:09.990761  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:09.991043  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:09.991055  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:09.991133  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
]
},
"configurations.name" : {
"notprovided" : [
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"fa8f79db31c54c68930e2ce9"
]
}
}>
09-16 14:14:09.992188  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:09.992201  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "version" : "versionA71444"
    }>.
09-16 14:14:09.992373  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:09.992578  1 14 StorageProvider::FileSystemDB::index::_matchVersion() begin
09-16 14:14:09.992588  1 14 StorageProvider::FileSystemDB::index::_matchVersion() args version=<versionA71444>.
09-16 14:14:09.992642  1 15 StorageProvider::FileSystemDB::index::_matchConfiguration() Found 1 documents where version=versionA71444
09-16 14:14:09.992701  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:09.992862  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/fa8f79db31c54c68930e2ce9.json>.
09-16 14:14:09.993028  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:09.993951  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
]
},
"configurations.name" : {
"notprovided" : [
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"fa8f79db31c54c68930e2ce9"
]
}
}>
09-16 14:14:09.994128  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:09.997628  1 15 load_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionA71444"
},
"dbprovider" : "filesystem",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "json"
}
Running test:<load>
returned:
{
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"LoadStore_load_filesystem_003_t" end time: Sep 16 14:14 CDT
"LoadStore_load_filesystem_003_t" time elapsed: 00:00:00
----------------------------------------------------------

70/137 Testing: LoadStore_load_mongo_003_t
70/137 Test: LoadStore_load_mongo_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test003/LoadStore_load_mongo_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test003/test001.cmp.264.json" "--skip-return-code" "247" "LoadStore_t" "-o" "load" "-d" "mongo" "-c" "testLoadStore" "-f" "json" "-v" "versionA71444" "-r" "test001.cmp.264.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test003/LoadStore_load_mongo_003_t.d
"LoadStore_load_mongo_003_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test001.cmp.338.json’
09-16 14:14:10.045825  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:10.046017  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:10.046102  1  0 artdaq::database::mongo trace_enable
09-16 14:14:10.046203  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:10.046261  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:10.046289  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:10.046317  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:10.048161  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:10.048183  1 10 Options: Updating operation from load to load.
09-16 14:14:10.048193  1 14 Options: dataFormat args format=<json>.
09-16 14:14:10.048205  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:10.048217  1 10 Options: Updating version from notprovided to versionA71444.
09-16 14:14:10.060075  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionA71444"
},
"dbprovider" : "mongo",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "json"
}>
09-16 14:14:10.060473  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:10.060487  1 10 Options: Updating operation from load to load.
09-16 14:14:10.060494  1 14 Options: dataFormat args format=<json>.
09-16 14:14:10.060501  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:10.060633  1 15 Options: searchFilter args search_filter=<{
"version" : "versionA71444"
}>.
09-16 14:14:10.061604  1 10 Options: Updating version from notprovided to versionA71444.
09-16 14:14:10.061653  1 16 load_configuration: begin
09-16 14:14:10.061698  1 16 load_configuration: search_payload=<{"filter":{
"version" : "versionA71444"
}, "collection":"testLoadStore"}>
09-16 14:14:10.062899  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:10.062922  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
"version" : "versionA71444"
}, "collection":"testLoadStore"}>
09-16 14:14:10.063849  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "version" : "versionA71444"
}>
09-16 14:14:10.063975  1  2 collection_name="testLoadStore", search filter=<{
    "version" : "versionA71444"
}>
09-16 14:14:10.065516  1  3 found_count=1
09-16 14:14:10.067104  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc44811a72ba42f87cb011"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "versionA71444", 
    "configurations" : [
        {
            "name" : "notprovided", 
            "assigned" : "Fri Sep 16 14:14:09 2016"
        }
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addToGlobalConfig" : "Fri Sep 16 14:14:09 2016"
            }, 
            {
                "setVersion" : "Fri Sep 16 14:14:09 2016"
            }, 
            {
                "setConfigurableEntity" : "Fri Sep 16 14:14:09 2016"
            }
        ]
    }, 
    "configurable_entity" : {
        "name" : "notprovided"
    }
}>
09-16 14:14:10.072020  1 15 load_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionA71444"
},
"dbprovider" : "mongo",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "json"
}
Running test:<load>
returned:
{
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"LoadStore_load_mongo_003_t" end time: Sep 16 14:14 CDT
"LoadStore_load_mongo_003_t" time elapsed: 00:00:00
----------------------------------------------------------

71/137 Testing: LoadStore_store_filesystem_002_t
71/137 Test: LoadStore_store_filesystem_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test002/LoadStore_store_filesystem_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test002/test001.src.939.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test002/test001.cmp.939.fcl" "--skip-return-code" "247" "LoadStore_t" "-o" "store" "-d" "filesystem" "-c" "testLoadStore" "-f" "fhicl" "-v" "versionB71444" "-s" "test001.src.939.fcl" "-r" "test001.cmp.939.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test002/LoadStore_store_filesystem_002_t.d
"LoadStore_store_filesystem_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test001.cmp.161.fcl’
removed ‘test001.src.161.fcl’
09-16 14:14:10.118635  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:10.118785  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:10.118858  1  0 artdaq::database::mongo trace_enable
09-16 14:14:10.118946  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:10.118996  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:10.119022  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:10.119048  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:10.120700  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:10.120721  1 10 Options: Updating operation from load to store.
09-16 14:14:10.120730  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:10.120741  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:10.120752  1 10 Options: Updating version from notprovided to versionB71444.
09-16 14:14:10.130899  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionB71444"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}>
09-16 14:14:10.131303  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:10.131315  1 10 Options: Updating operation from load to store.
09-16 14:14:10.131322  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:10.131328  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:10.131470  1 15 Options: searchFilter args search_filter=<{
"version" : "versionB71444"
}>.
09-16 14:14:10.132150  1 10 Options: Updating version from notprovided to versionB71444.
09-16 14:14:10.132188  1 15 store_configuration: begin
09-16 14:14:10.234739  1 17 store_configuration: Converted json data to fcl; json=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotat
09-16 14:14:10.234772  1 17 store_configuration: Converted json data to fcl; fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  
>
09-16 14:14:10.234789  1 15 store_configuration: json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fileNa
09-16 14:14:10.509473  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" :
09-16 14:14:10.509685  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:10.509704  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"
09-16 14:14:10.536885  1 12 StorageProvider::FileSystemDB generate_oid=46526bb7cb9043ccbdd2ce5d
09-16 14:14:10.561871  1  4 StorageProvider::FileSystemDB::store() using generated oid=<46526bb7cb9043ccbdd2ce5d>.
09-16 14:14:10.561925  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:10.561974  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:10.562028  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:10.562226  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/46526bb7cb9043ccbdd2ce5d.json>.
09-16 14:14:10.651273  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:10.651282  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:10.651320  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
]
},
"configurations.name" : {
"notprovided" : [
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"fa8f79db31c54c68930e2ce9"
]
}
}>
09-16 14:14:10.651672  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:10.651685  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "NetMonTransportServiceInterface" : {
                            "service_provider" : "NetMonTransportService", 
                            "max_fragment_size_words" : 2097152
                        }
                    }, 
                    "daq" : {
                        "max_fragment_size_words" : 2097152, 
                        "aggregator" : {
                            "mpi_buffer_count" : 8, 
                            "first_event_builder_rank" : 2, 
                            "event_builder_count" : 2, 
                            "expected_events_per_bunch" : 1, 
                            "print_event_store_stats" : true, 
                            "event_queue_depth" : 20, 
                            "event_queue_wait_time" : 5, 
                            "onmon_event_prescale" : 1, 
                            "xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5", 
                            "file_size_MB" : 8000, 
                            "file_duration" : 0, 
                            "file_event_count" : 0
                        }, 
                        "metrics" : {
                            "aggFile" : {
                                "metricPluginType" : "file", 
                                "level" : 3, 
                                "fileName" : "/tmp/aggregator/agg_%UID%_metrics.log", 
                                "uniquify" : true
                            }
                        }
                    }, 
                    "source" : {
                        "module_type" : "NetMonInput"
                    }, 
                    "outputs" : {
                        "normalOutputMod2" : {
                            "module_type" : "RootOutput", 
                            "fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root", 
                            "SelectEvents" : {
                                "SelectEvents" : [
                                    "pmod2"
                                ]
                            }, 
                            "compressionLevel" : 0
                        }, 
                        "normalOutputMod3" : {
                            "module_type" : "RootOutput", 
                            "fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root", 
                            "SelectEvents" : {
                                "SelectEvents" : [
                                    "pmod3"
                                ]
                            }, 
                            "compressionLevel" : 0
                        }
                    }, 
                    "physics" : {
                        "analyzers" : {

                        }, 
                        "producers" : {
                            "BuildInfo" : {
                                "module_type" : "ArtdaqDemoBuildInfo", 
                                "instance_name" : "ArtdaqDemo"
                            }
                        }, 
                        "filters" : {
                            "prescaleMod2" : {
                                "module_type" : "NthEvent", 
                                "nth" : 2
                            }, 
                            "prescaleMod3" : {
                                "module_type" : "NthEvent", 
                                "nth" : 3
                            }
                        }, 
                        "p1" : [

                        ], 
                        "p
09-16 14:14:10.651756  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<46526bb7cb9043ccbdd2ce5d>.
09-16 14:14:10.664452  1  5 StorageProvider::FileSystemDB::index::addDocument() found 9 keys.
09-16 14:14:10.664476  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:10.664480  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<46526bb7cb9043ccbdd2ce5d>.
09-16 14:14:10.664484  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<versionB71444>.
09-16 14:14:10.664604  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() begin
09-16 14:14:10.664610  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args ouid=<46526bb7cb9043ccbdd2ce5d>.
09-16 14:14:10.664622  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args configuration=<notprovided>.
09-16 14:14:10.664656  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:10.664671  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<46526bb7cb9043ccbdd2ce5d>.
09-16 14:14:10.664683  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:14:10.664762  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:10.665081  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
]
},
"configurations.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
}
}>
09-16 14:14:10.665217  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:10.665301  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionB71444"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}
Running test:<store>
returned:
 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  

<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_filesystem_002_t" end time: Sep 16 14:14 CDT
"LoadStore_store_filesystem_002_t" time elapsed: 00:00:00
----------------------------------------------------------

72/137 Testing: LoadStore_store_mongo_002_t
72/137 Test: LoadStore_store_mongo_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test002/LoadStore_store_mongo_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test002/test001.src.219.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test002/test001.cmp.219.fcl" "--skip-return-code" "247" "LoadStore_t" "-o" "store" "-d" "mongo" "-c" "testLoadStore" "-f" "fhicl" "-v" "versionB71444" "-s" "test001.src.219.fcl" "-r" "test001.cmp.219.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test002/LoadStore_store_mongo_002_t.d
"LoadStore_store_mongo_002_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test001.cmp.311.fcl’
removed ‘test001.src.311.fcl’
09-16 14:14:10.698741  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:10.698843  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:10.698888  1  0 artdaq::database::mongo trace_enable
09-16 14:14:10.698943  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:10.698976  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:10.698992  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:10.699008  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:10.700083  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:10.700095  1 10 Options: Updating operation from load to store.
09-16 14:14:10.700101  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:10.700108  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:10.700114  1 10 Options: Updating version from notprovided to versionB71444.
09-16 14:14:10.706774  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionB71444"
},
"dbprovider" : "mongo",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}>
09-16 14:14:10.707055  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:10.707063  1 10 Options: Updating operation from load to store.
09-16 14:14:10.707067  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:10.707071  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:10.707153  1 15 Options: searchFilter args search_filter=<{
"version" : "versionB71444"
}>.
09-16 14:14:10.707618  1 10 Options: Updating version from notprovided to versionB71444.
09-16 14:14:10.707644  1 15 store_configuration: begin
09-16 14:14:10.790504  1 17 store_configuration: Converted json data to fcl; json=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotat
09-16 14:14:10.790534  1 17 store_configuration: Converted json data to fcl; fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  
>
09-16 14:14:10.790541  1 15 store_configuration: json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fileNa
09-16 14:14:11.061012  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" :
09-16 14:14:11.061856  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:11.062220  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:11.067698  1  5 inserted_id={
    "$oid" : "57dc44831a72ba4322451a71"
}
09-16 14:14:11.067913  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionB71444"
},
"dbprovider" : "mongo",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}
Running test:<store>
returned:
 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  

<end of output>
Test time =   0.40 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_mongo_002_t" end time: Sep 16 14:14 CDT
"LoadStore_store_mongo_002_t" time elapsed: 00:00:00
----------------------------------------------------------

73/137 Testing: LoadStore_load_filesystem_004_t
73/137 Test: LoadStore_load_filesystem_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test004/LoadStore_load_filesystem_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test004/test001.cmp.581.fcl" "--skip-return-code" "247" "LoadStore_t" "-o" "load" "-d" "filesystem" "-c" "testLoadStore" "-f" "fhicl" "-v" "versionB71444" "-r" "test001.cmp.581.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test004/LoadStore_load_filesystem_004_t.d
"LoadStore_load_filesystem_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test001.cmp.292.fcl’
09-16 14:14:11.096833  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:11.096941  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:11.096995  1  0 artdaq::database::mongo trace_enable
09-16 14:14:11.097057  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:11.097095  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:11.097119  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:11.097143  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:11.098204  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:11.098222  1 10 Options: Updating operation from load to load.
09-16 14:14:11.098234  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:11.098247  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.098259  1 10 Options: Updating version from notprovided to versionB71444.
09-16 14:14:11.104872  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionB71444"
},
"dbprovider" : "filesystem",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}>
09-16 14:14:11.105149  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:11.105160  1 10 Options: Updating operation from load to load.
09-16 14:14:11.105166  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:11.105173  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.105260  1 15 Options: searchFilter args search_filter=<{
"version" : "versionB71444"
}>.
09-16 14:14:11.105741  1 10 Options: Updating version from notprovided to versionB71444.
09-16 14:14:11.105777  1 16 load_configuration: begin
09-16 14:14:11.105804  1 16 load_configuration: search_payload=<{"filter":{
"version" : "versionB71444"
}, "collection":"testLoadStore"}>
09-16 14:14:11.105954  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:11.105967  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{
"version" : "versionB71444"
}, "collection":"testLoadStore"}>
09-16 14:14:11.109634  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:11.109658  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:11.109699  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:11.109838  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:11.109847  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:11.109899  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
]
},
"configurations.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
}
}>
09-16 14:14:11.110614  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:11.110623  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "version" : "versionB71444"
    }>.
09-16 14:14:11.110738  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:14:11.110853  1 14 StorageProvider::FileSystemDB::index::_matchVersion() begin
09-16 14:14:11.110861  1 14 StorageProvider::FileSystemDB::index::_matchVersion() args version=<versionB71444>.
09-16 14:14:11.110898  1 15 StorageProvider::FileSystemDB::index::_matchConfiguration() Found 1 documents where version=versionB71444
09-16 14:14:11.110940  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:11.111036  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/46526bb7cb9043ccbdd2ce5d.json>.
09-16 14:14:11.111963  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:11.112592  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
]
},
"configurations.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
}
}>
09-16 14:14:11.112732  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:11.159659  1 15 load_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionB71444"
},
"dbprovider" : "filesystem",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}
Running test:<load>
returned:
 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  

<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"LoadStore_load_filesystem_004_t" end time: Sep 16 14:14 CDT
"LoadStore_load_filesystem_004_t" time elapsed: 00:00:00
----------------------------------------------------------

74/137 Testing: LoadStore_load_mongo_004_t
74/137 Test: LoadStore_load_mongo_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test004/LoadStore_load_mongo_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test004/test001.cmp.483.fcl" "--skip-return-code" "247" "LoadStore_t" "-o" "load" "-d" "mongo" "-c" "testLoadStore" "-f" "fhicl" "-v" "versionB71444" "-r" "test001.cmp.483.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test004/LoadStore_load_mongo_004_t.d
"LoadStore_load_mongo_004_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test001.cmp.100.fcl’
09-16 14:14:11.191594  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:11.191694  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:11.191740  1  0 artdaq::database::mongo trace_enable
09-16 14:14:11.191794  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:11.191826  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:11.191842  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:11.191858  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:11.192931  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:11.192943  1 10 Options: Updating operation from load to load.
09-16 14:14:11.192949  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:11.192956  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.192963  1 10 Options: Updating version from notprovided to versionB71444.
09-16 14:14:11.199586  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionB71444"
},
"dbprovider" : "mongo",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}>
09-16 14:14:11.199882  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:11.199890  1 10 Options: Updating operation from load to load.
09-16 14:14:11.199895  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:11.199899  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.199981  1 15 Options: searchFilter args search_filter=<{
"version" : "versionB71444"
}>.
09-16 14:14:11.200447  1 10 Options: Updating version from notprovided to versionB71444.
09-16 14:14:11.200475  1 16 load_configuration: begin
09-16 14:14:11.200495  1 16 load_configuration: search_payload=<{"filter":{
"version" : "versionB71444"
}, "collection":"testLoadStore"}>
09-16 14:14:11.201073  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:11.201085  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
"version" : "versionB71444"
}, "collection":"testLoadStore"}>
09-16 14:14:11.201459  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "version" : "versionB71444"
}>
09-16 14:14:11.201514  1  2 collection_name="testLoadStore", search filter=<{
    "version" : "versionB71444"
}>
09-16 14:14:11.202528  1  3 found_count=1
09-16 14:14:11.205781  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc44831a72ba4322451a71"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "NetMonTransportServiceInterface" : {
                        "service_provider" : "NetMonTransportService", 
                        "max_fragment_size_words" : 2097152
                    }
                }, 
                "daq" : {
                    "max_fragment_size_words" : 2097152, 
                    "aggregator" : {
                        "mpi_buffer_count" : 8, 
                        "first_event_builder_rank" : 2, 
                        "event_builder_count" : 2, 
                        "expected_events_per_bunch" : 1, 
                        "print_event_store_stats" : true, 
                        "event_queue_depth" : 20, 
                        "event_queue_wait_time" : 5, 
                        "onmon_event_prescale" : 1, 
                        "xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5", 
                        "file_size_MB" : 8000, 
                        "file_duration" : 0, 
                        "file_event_count" : 0
                    }, 
                    "metrics" : {
                        "aggFile" : {
                            "metricPluginType" : "file", 
                            "level" : 3, 
                            "fileName" : "/tmp/aggregator/agg_%UID%_metrics.log", 
                            "uniquify" : true
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "NetMonInput"
                }, 
                "outputs" : {
                    "normalOutputMod2" : {
                        "module_type" : "RootOutput", 
                        "fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root", 
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2"
                            ]
                        }, 
                        "compressionLevel" : 0
                    }, 
                    "normalOutputMod3" : {
                        "module_type" : "RootOutput", 
                        "fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root", 
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod3"
                            ]
                        }, 
                        "compressionLevel" : 0
                    }
                }, 
                "physics" : {
                    "analyzers" : {

                    }, 
                    "producers" : {
                        "BuildInfo" : {
                            "module_type" : "ArtdaqDemoBuildInfo", 
                            "instance_name" : "ArtdaqDemo"
                        }
                    }, 
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "p1" : [

                    ], 
                    "p2" : [
                        "BuildInfo"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ], 
                    "my_output_modules" : [
                        "nor
09-16 14:14:11.255014  1 15 load_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionB71444"
},
"dbprovider" : "mongo",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}
Running test:<load>
returned:
 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  

<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"LoadStore_load_mongo_004_t" end time: Sep 16 14:14 CDT
"LoadStore_load_mongo_004_t" time elapsed: 00:00:00
----------------------------------------------------------

75/137 Testing: LoadStore_store_filesystem_011_t
75/137 Test: LoadStore_store_filesystem_011_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/LoadStore_store_filesystem_011_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/test011.src.250.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/test011.cmp.250.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/test011.flt.250.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.250.json" "-s" "test011.src.250.json" "-r" "test011.cmp.250.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/LoadStore_store_filesystem_011_t.d
"LoadStore_store_filesystem_011_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.821.json’
removed ‘test011.flt.821.json’
removed ‘test011.src.821.json’
09-16 14:14:11.304000  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:11.304198  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:11.304282  1  0 artdaq::database::mongo trace_enable
09-16 14:14:11.304360  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:11.304416  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:11.304444  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:11.304470  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:11.306346  1 14 Options: json query= <{
    "filter":{"version":"versionC71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"filesystem",
    "operation":"store",
    "dataformat":"json"
}
>
09-16 14:14:11.306375  1 14 OperationBase::readJsonData() data=<{
    "filter":{"version":"versionC71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"filesystem",
    "operation":"store",
    "dataformat":"json"
}
>
09-16 14:14:11.311717  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:11.311741  1 10 Options: Updating operation from load to store.
09-16 14:14:11.311749  1 14 Options: dataFormat args format=<json>.
09-16 14:14:11.311759  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.316185  1 15 Options: searchFilter args search_filter=<{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.317337  1 10 Options: Updating version from notprovided to versionC71444.
09-16 14:14:11.317355  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.318912  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "json"
}>
09-16 14:14:11.319365  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:11.319376  1 10 Options: Updating operation from load to store.
09-16 14:14:11.319382  1 14 Options: dataFormat args format=<json>.
09-16 14:14:11.319388  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.319535  1 15 Options: searchFilter args search_filter=<{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.320029  1 10 Options: Updating version from notprovided to versionC71444.
09-16 14:14:11.320041  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.320063  1 15 store_configuration: begin
09-16 14:14:11.320076  1 15 store_configuration: json_buffer=<{"data":{
"daq" : {
"event_builder" : {

"expected_fragments_per_event" : 2,

"first_fragment_receiver_rank" : 0,

"fragment_receiver_count" : 2,

"mpi_buffer_count" : 16,

"print_event_store_stats" : true,

"use_art" : true,

"verbose" : false
}
}
}
}>
09-16 14:14:11.360456  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "versionC71444",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Sep 16 14:14:11 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Sep 16 14:14:11 2016"
},
{
"setVersion" : "Fri Sep 16 14:14:11 2016"
},
{
"setConfigurableEntity" : "Fri Sep 16 14:14:11 2016"
}
]
},
"configurable_entity" : {
"name" : "ENTITY-testLoadStore"
}
}, "collection":"testLoadStore"}>
09-16 14:14:11.360643  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:11.360661  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "versionC71444",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Sep 16 14:14:11 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Sep 16 14:14:11 2016"
},
{
"setVersion" : "Fri Sep 16 14:14:11 2016"
},
{
"setConfigurableEntity" : "Fri Sep 16 14:14:11 2016"
}
]
},
"configurable_entity" : {
"name" : "ENTITY-testLoadStore"
}
}, "collection":"testLoadStore"}>
09-16 14:14:11.366253  1 12 StorageProvider::FileSystemDB generate_oid=19cf4d709ca646888a7aed37
09-16 14:14:11.371085  1  4 StorageProvider::FileSystemDB::store() using generated oid=<19cf4d709ca646888a7aed37>.
09-16 14:14:11.371140  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:11.371165  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:11.371206  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:11.371366  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/19cf4d709ca646888a7aed37.json>.
09-16 14:14:11.382516  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:11.382527  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:11.382575  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
]
},
"configurations.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
}
}>
09-16 14:14:11.383140  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:11.383151  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }, 
            "metadata" : {
                "comments" : {
                    "empty" : "empty"
                }
            }, 
            "search" : [
                {
                    "name" : "find any", 
                    "query" : "not defined"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "json", 
            "rawdata" : "as"
        }, 
        "version" : "versionC71444", 
        "configurations" : [
            {
                "name" : "notprovided", 
                "assigned" : "Fri Sep 16 14:14:11 2016"
            }
        ], 
        "aliases" : {
            "active" : [

            ], 
            "history" : [

            ]
        }, 
        "changelog" : "empty", 
        "bookkeeping" : {
            "isdeleted" : false, 
            "isreadonly" : true, 
            "created" : "Tue Dec 29 18:19:25 2015", 
            "updates" : [
                {
                    "addToGlobalConfig" : "Fri Sep 16 14:14:11 2016"
                }, 
                {
                    "setVersion" : "Fri Sep 16 14:14:11 2016"
                }, 
                {
                    "setConfigurableEntity" : "Fri Sep 16 14:14:11 2016"
                }
            ]
        }, 
        "configurable_entity" : {
            "name" : "ENTITY-testLoadStore"
        }, 
        "_id" : {
            "_oid" : "19cf4d709ca646888a7aed37"
        }
    }>.
09-16 14:14:11.383159  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<19cf4d709ca646888a7aed37>.
09-16 14:14:11.384935  1  5 StorageProvider::FileSystemDB::index::addDocument() found 9 keys.
09-16 14:14:11.384952  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:11.384957  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<19cf4d709ca646888a7aed37>.
09-16 14:14:11.384962  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<versionC71444>.
09-16 14:14:11.385092  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() begin
09-16 14:14:11.385099  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args ouid=<19cf4d709ca646888a7aed37>.
09-16 14:14:11.385103  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args configuration=<notprovided>.
09-16 14:14:11.385139  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:11.385145  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<19cf4d709ca646888a7aed37>.
09-16 14:14:11.385149  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<ENTITY-testLoadStore>.
09-16 14:14:11.385182  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:11.385666  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37"
]
}
}>
09-16 14:14:11.385780  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:11.385835  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "json"
}
Running test:<store>
returned:
{
"daq" : {
"event_builder" : {

"expected_fragments_per_event" : 2,

"first_fragment_receiver_rank" : 0,

"fragment_receiver_count" : 2,

"mpi_buffer_count" : 16,

"print_event_store_stats" : true,

"use_art" : true,

"verbose" : false
}
}
}

<end of output>
Test time =   0.13 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_filesystem_011_t" end time: Sep 16 14:14 CDT
"LoadStore_store_filesystem_011_t" time elapsed: 00:00:00
----------------------------------------------------------

76/137 Testing: LoadStore_store_mongo_011_t
76/137 Test: LoadStore_store_mongo_011_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/LoadStore_store_mongo_011_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/test011.src.395.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/test011.cmp.395.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/test011.flt.395.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.395.json" "-s" "test011.src.395.json" "-r" "test011.cmp.395.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test011/LoadStore_store_mongo_011_t.d
"LoadStore_store_mongo_011_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.790.json’
removed ‘test011.flt.790.json’
removed ‘test011.src.790.json’
09-16 14:14:11.419074  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:11.419183  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:11.419234  1  0 artdaq::database::mongo trace_enable
09-16 14:14:11.419294  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:11.419329  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:11.419347  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:11.419364  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:11.420582  1 14 Options: json query= <{
    "filter":{"version":"versionC71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"mongo",
    "operation":"store",
    "dataformat":"json"
}
>
09-16 14:14:11.420604  1 14 OperationBase::readJsonData() data=<{
    "filter":{"version":"versionC71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"mongo",
    "operation":"store",
    "dataformat":"json"
}
>
09-16 14:14:11.425069  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:11.425094  1 10 Options: Updating operation from load to store.
09-16 14:14:11.425101  1 14 Options: dataFormat args format=<json>.
09-16 14:14:11.425108  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.427929  1 15 Options: searchFilter args search_filter=<{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.428968  1 10 Options: Updating version from notprovided to versionC71444.
09-16 14:14:11.428996  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.430514  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "mongo",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "json"
}>
09-16 14:14:11.430878  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:11.430887  1 10 Options: Updating operation from load to store.
09-16 14:14:11.430892  1 14 Options: dataFormat args format=<json>.
09-16 14:14:11.430896  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.430994  1 15 Options: searchFilter args search_filter=<{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.431350  1 10 Options: Updating version from notprovided to versionC71444.
09-16 14:14:11.431359  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.431377  1 15 store_configuration: begin
09-16 14:14:11.431387  1 15 store_configuration: json_buffer=<{"data":{
"daq" : {
"event_builder" : {

"expected_fragments_per_event" : 2,

"first_fragment_receiver_rank" : 0,

"fragment_receiver_count" : 2,

"mpi_buffer_count" : 16,

"print_event_store_stats" : true,

"use_art" : true,

"verbose" : false
}
}
}
}>
09-16 14:14:11.462155  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "versionC71444",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Sep 16 14:14:11 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Sep 16 14:14:11 2016"
},
{
"setVersion" : "Fri Sep 16 14:14:11 2016"
},
{
"setConfigurableEntity" : "Fri Sep 16 14:14:11 2016"
}
]
},
"configurable_entity" : {
"name" : "ENTITY-testLoadStore"
}
}, "collection":"testLoadStore"}>
09-16 14:14:11.463010  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:11.463290  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:11.465449  1  5 inserted_id={
    "$oid" : "57dc44831a72ba434e772b31"
}
09-16 14:14:11.465662  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "mongo",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "json"
}
Running test:<store>
returned:
{
"daq" : {
"event_builder" : {

"expected_fragments_per_event" : 2,

"first_fragment_receiver_rank" : 0,

"fragment_receiver_count" : 2,

"mpi_buffer_count" : 16,

"print_event_store_stats" : true,

"use_art" : true,

"verbose" : false
}
}
}

<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_mongo_011_t" end time: Sep 16 14:14 CDT
"LoadStore_store_mongo_011_t" time elapsed: 00:00:00
----------------------------------------------------------

77/137 Testing: LoadStore_load_filesystem_013_t
77/137 Test: LoadStore_load_filesystem_013_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test013/LoadStore_load_filesystem_013_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test013/test011.cmp.816.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test013/test011.flt.816.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.816.json" "-r" "test011.cmp.816.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test013/LoadStore_load_filesystem_013_t.d
"LoadStore_load_filesystem_013_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.642.json’
removed ‘test011.flt.642.json’
09-16 14:14:11.502619  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:11.502734  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:11.502791  1  0 artdaq::database::mongo trace_enable
09-16 14:14:11.502856  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:11.502898  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:11.502923  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:11.502948  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:11.504077  1 14 Options: json query= <{
    "filter":{"version":"versionC71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"filesystem",
    "operation":"load",
    "dataformat":"json"
}
>
09-16 14:14:11.504102  1 14 OperationBase::readJsonData() data=<{
    "filter":{"version":"versionC71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"filesystem",
    "operation":"load",
    "dataformat":"json"
}
>
09-16 14:14:11.507748  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:11.507769  1 10 Options: Updating operation from load to load.
09-16 14:14:11.507778  1 14 Options: dataFormat args format=<json>.
09-16 14:14:11.507788  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.510546  1 15 Options: searchFilter args search_filter=<{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.511151  1 10 Options: Updating version from notprovided to versionC71444.
09-16 14:14:11.511163  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.512221  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "json"
}>
09-16 14:14:11.512546  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:11.512555  1 10 Options: Updating operation from load to load.
09-16 14:14:11.512562  1 14 Options: dataFormat args format=<json>.
09-16 14:14:11.512570  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.512663  1 15 Options: searchFilter args search_filter=<{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.513009  1 10 Options: Updating version from notprovided to versionC71444.
09-16 14:14:11.513019  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.513045  1 16 load_configuration: begin
09-16 14:14:11.513074  1 16 load_configuration: search_payload=<{"filter":{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}, "collection":"testLoadStore"}>
09-16 14:14:11.513233  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:11.513247  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}, "collection":"testLoadStore"}>
09-16 14:14:11.517301  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:11.517326  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:11.517368  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:11.517516  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:11.517526  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:11.517586  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37"
]
}
}>
09-16 14:14:11.518497  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:11.518505  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "version" : "versionC71444", 
        "configurable_entity.name" : "ENTITY-testLoadStore"
    }>.
09-16 14:14:11.518676  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 2 search criteria.
09-16 14:14:11.518797  1 14 StorageProvider::FileSystemDB::index::_matchVersion() begin
09-16 14:14:11.518805  1 14 StorageProvider::FileSystemDB::index::_matchVersion() args version=<versionC71444>.
09-16 14:14:11.518844  1 15 StorageProvider::FileSystemDB::index::_matchConfiguration() Found 1 documents where version=versionC71444
09-16 14:14:11.518887  1 15 StorageProvider::FileSystemDB::index::_matchConfigurableEntity() begin
09-16 14:14:11.518894  1 15 StorageProvider::FileSystemDB::index::_matchConfigurableEntity() args configurable_entity=<ENTITY-testLoadStore>.
09-16 14:14:11.518906  1 15 StorageProvider::FileSystemDB::index::_matchConfigurableEntity() Found 1 documents where entity=ENTITY-testLoadStore
09-16 14:14:11.518992  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() criteria_count=2, max_count=2, found 1 documents.
09-16 14:14:11.519014  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() returning 1 documents.
09-16 14:14:11.519034  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:11.519135  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/19cf4d709ca646888a7aed37.json>.
09-16 14:14:11.519251  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:11.520014  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37"
]
}
}>
09-16 14:14:11.520179  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:11.522773  1 15 load_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "json"
}
Running test:<load>
returned:
{
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"LoadStore_load_filesystem_013_t" end time: Sep 16 14:14 CDT
"LoadStore_load_filesystem_013_t" time elapsed: 00:00:00
----------------------------------------------------------

78/137 Testing: LoadStore_load_mongo_013_t
78/137 Test: LoadStore_load_mongo_013_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test013/LoadStore_load_mongo_013_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test013/test011.cmp.562.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test013/test011.flt.562.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.562.json" "-r" "test011.cmp.562.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test013/LoadStore_load_mongo_013_t.d
"LoadStore_load_mongo_013_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.874.json’
removed ‘test011.flt.874.json’
09-16 14:14:11.567832  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:11.567988  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:11.568081  1  0 artdaq::database::mongo trace_enable
09-16 14:14:11.568175  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:11.568227  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:11.568252  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:11.568278  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:11.569990  1 14 Options: json query= <{
    "filter":{"version":"versionC71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"mongo",
    "operation":"load",
    "dataformat":"json"
}
>
09-16 14:14:11.570025  1 14 OperationBase::readJsonData() data=<{
    "filter":{"version":"versionC71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"mongo",
    "operation":"load",
    "dataformat":"json"
}
>
09-16 14:14:11.575647  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:11.575669  1 10 Options: Updating operation from load to load.
09-16 14:14:11.575678  1 14 Options: dataFormat args format=<json>.
09-16 14:14:11.575688  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.579317  1 15 Options: searchFilter args search_filter=<{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.580155  1 10 Options: Updating version from notprovided to versionC71444.
09-16 14:14:11.580171  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.582986  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "mongo",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "json"
}>
09-16 14:14:11.583915  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:11.583935  1 10 Options: Updating operation from load to load.
09-16 14:14:11.583947  1 14 Options: dataFormat args format=<json>.
09-16 14:14:11.583959  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.584197  1 15 Options: searchFilter args search_filter=<{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.585217  1 10 Options: Updating version from notprovided to versionC71444.
09-16 14:14:11.585229  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.585259  1 16 load_configuration: begin
09-16 14:14:11.585294  1 16 load_configuration: search_payload=<{"filter":{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}, "collection":"testLoadStore"}>
09-16 14:14:11.586459  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:11.586484  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}, "collection":"testLoadStore"}>
09-16 14:14:11.587276  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "version" : "versionC71444", 
    "configurable_entity.name" : "ENTITY-testLoadStore"
}>
09-16 14:14:11.587411  1  2 collection_name="testLoadStore", search filter=<{
    "version" : "versionC71444", 
    "configurable_entity.name" : "ENTITY-testLoadStore"
}>
09-16 14:14:11.589454  1  3 found_count=1
09-16 14:14:11.592008  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc44831a72ba434e772b31"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "versionC71444", 
    "configurations" : [
        {
            "name" : "notprovided", 
            "assigned" : "Fri Sep 16 14:14:11 2016"
        }
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addToGlobalConfig" : "Fri Sep 16 14:14:11 2016"
            }, 
            {
                "setVersion" : "Fri Sep 16 14:14:11 2016"
            }, 
            {
                "setConfigurableEntity" : "Fri Sep 16 14:14:11 2016"
            }
        ]
    }, 
    "configurable_entity" : {
        "name" : "ENTITY-testLoadStore"
    }
}>
09-16 14:14:11.600001  1 15 load_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionC71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "mongo",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "json"
}
Running test:<load>
returned:
{
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"LoadStore_load_mongo_013_t" end time: Sep 16 14:14 CDT
"LoadStore_load_mongo_013_t" time elapsed: 00:00:00
----------------------------------------------------------

79/137 Testing: LoadStore_store_filesystem_012_t
79/137 Test: LoadStore_store_filesystem_012_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/LoadStore_store_filesystem_012_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/test011.src.637.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/test011.cmp.637.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/test011.flt.637.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.637.json" "-s" "test011.src.637.fcl" "-r" "test011.cmp.637.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/LoadStore_store_filesystem_012_t.d
"LoadStore_store_filesystem_012_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.646.fcl’
removed ‘test011.flt.646.json’
removed ‘test011.src.646.fcl’
09-16 14:14:11.656169  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:11.656358  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:11.656464  1  0 artdaq::database::mongo trace_enable
09-16 14:14:11.656591  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:11.656661  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:11.656706  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:11.656749  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:11.658739  1 14 Options: json query= <{
    "filter":{"version":"versionD71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"filesystem",
    "operation":"store",
    "dataformat":"fhicl"
}
>
09-16 14:14:11.658784  1 14 OperationBase::readJsonData() data=<{
    "filter":{"version":"versionD71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"filesystem",
    "operation":"store",
    "dataformat":"fhicl"
}
>
09-16 14:14:11.664816  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:11.664887  1 10 Options: Updating operation from load to store.
09-16 14:14:11.664903  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:11.664922  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.670083  1 15 Options: searchFilter args search_filter=<{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.671067  1 10 Options: Updating version from notprovided to versionD71444.
09-16 14:14:11.671087  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.672938  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}>
09-16 14:14:11.673522  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:11.673546  1 10 Options: Updating operation from load to store.
09-16 14:14:11.673560  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:11.673573  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:11.673779  1 15 Options: searchFilter args search_filter=<{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:11.674403  1 10 Options: Updating version from notprovided to versionD71444.
09-16 14:14:11.674423  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:11.674476  1 15 store_configuration: begin
09-16 14:14:11.786973  1 17 store_configuration: Converted json data to fcl; json=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotat
09-16 14:14:11.787008  1 17 store_configuration: Converted json data to fcl; fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  
>
09-16 14:14:11.787020  1 15 store_configuration: json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fileNa
09-16 14:14:12.057371  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" :
09-16 14:14:12.057612  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:12.057633  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"
09-16 14:14:12.084959  1 12 StorageProvider::FileSystemDB generate_oid=334af0790d3047e689b83901
09-16 14:14:12.109699  1  4 StorageProvider::FileSystemDB::store() using generated oid=<334af0790d3047e689b83901>.
09-16 14:14:12.109744  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:12.109778  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:12.109826  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:12.109996  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/334af0790d3047e689b83901.json>.
09-16 14:14:12.197857  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:12.197868  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:12.197922  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37"
]
}
}>
09-16 14:14:12.198569  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:12.198584  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "NetMonTransportServiceInterface" : {
                            "service_provider" : "NetMonTransportService", 
                            "max_fragment_size_words" : 2097152
                        }
                    }, 
                    "daq" : {
                        "max_fragment_size_words" : 2097152, 
                        "aggregator" : {
                            "mpi_buffer_count" : 8, 
                            "first_event_builder_rank" : 2, 
                            "event_builder_count" : 2, 
                            "expected_events_per_bunch" : 1, 
                            "print_event_store_stats" : true, 
                            "event_queue_depth" : 20, 
                            "event_queue_wait_time" : 5, 
                            "onmon_event_prescale" : 1, 
                            "xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5", 
                            "file_size_MB" : 8000, 
                            "file_duration" : 0, 
                            "file_event_count" : 0
                        }, 
                        "metrics" : {
                            "aggFile" : {
                                "metricPluginType" : "file", 
                                "level" : 3, 
                                "fileName" : "/tmp/aggregator/agg_%UID%_metrics.log", 
                                "uniquify" : true
                            }
                        }
                    }, 
                    "source" : {
                        "module_type" : "NetMonInput"
                    }, 
                    "outputs" : {
                        "normalOutputMod2" : {
                            "module_type" : "RootOutput", 
                            "fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root", 
                            "SelectEvents" : {
                                "SelectEvents" : [
                                    "pmod2"
                                ]
                            }, 
                            "compressionLevel" : 0
                        }, 
                        "normalOutputMod3" : {
                            "module_type" : "RootOutput", 
                            "fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root", 
                            "SelectEvents" : {
                                "SelectEvents" : [
                                    "pmod3"
                                ]
                            }, 
                            "compressionLevel" : 0
                        }
                    }, 
                    "physics" : {
                        "analyzers" : {

                        }, 
                        "producers" : {
                            "BuildInfo" : {
                                "module_type" : "ArtdaqDemoBuildInfo", 
                                "instance_name" : "ArtdaqDemo"
                            }
                        }, 
                        "filters" : {
                            "prescaleMod2" : {
                                "module_type" : "NthEvent", 
                                "nth" : 2
                            }, 
                            "prescaleMod3" : {
                                "module_type" : "NthEvent", 
                                "nth" : 3
                            }
                        }, 
                        "p1" : [

                        ], 
                        "p
09-16 14:14:12.198662  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<334af0790d3047e689b83901>.
09-16 14:14:12.210957  1  5 StorageProvider::FileSystemDB::index::addDocument() found 9 keys.
09-16 14:14:12.210974  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:12.210982  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<334af0790d3047e689b83901>.
09-16 14:14:12.210990  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<versionD71444>.
09-16 14:14:12.211094  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() begin
09-16 14:14:12.211102  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args ouid=<334af0790d3047e689b83901>.
09-16 14:14:12.211107  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args configuration=<notprovided>.
09-16 14:14:12.211146  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:12.211153  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<334af0790d3047e689b83901>.
09-16 14:14:12.211158  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<ENTITY-testLoadStore>.
09-16 14:14:12.211234  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:12.211728  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
],
"versionD71444" : [
"334af0790d3047e689b83901"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901"
]
}
}>
09-16 14:14:12.211848  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:12.211918  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}
Running test:<store>
returned:
 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  

<end of output>
Test time =   0.61 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_filesystem_012_t" end time: Sep 16 14:14 CDT
"LoadStore_store_filesystem_012_t" time elapsed: 00:00:00
----------------------------------------------------------

80/137 Testing: LoadStore_store_mongo_012_t
80/137 Test: LoadStore_store_mongo_012_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/LoadStore_store_mongo_012_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/test011.src.463.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/test011.cmp.463.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/test011.flt.463.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.463.json" "-s" "test011.src.463.fcl" "-r" "test011.cmp.463.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test012/LoadStore_store_mongo_012_t.d
"LoadStore_store_mongo_012_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.980.fcl’
removed ‘test011.flt.980.json’
removed ‘test011.src.980.fcl’
09-16 14:14:12.262305  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:12.262472  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:12.262552  1  0 artdaq::database::mongo trace_enable
09-16 14:14:12.262650  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:12.262706  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:12.262733  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:12.262775  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:12.264707  1 14 Options: json query= <{
    "filter":{"version":"versionD71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"mongo",
    "operation":"store",
    "dataformat":"fhicl"
}
>
09-16 14:14:12.264753  1 14 OperationBase::readJsonData() data=<{
    "filter":{"version":"versionD71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"mongo",
    "operation":"store",
    "dataformat":"fhicl"
}
>
09-16 14:14:12.272977  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:12.273013  1 10 Options: Updating operation from load to store.
09-16 14:14:12.273030  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:12.273048  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:12.278257  1 15 Options: searchFilter args search_filter=<{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:12.279508  1 10 Options: Updating version from notprovided to versionD71444.
09-16 14:14:12.279530  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:12.281385  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "mongo",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}>
09-16 14:14:12.281912  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:12.281925  1 10 Options: Updating operation from load to store.
09-16 14:14:12.281932  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:12.281939  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:12.282076  1 15 Options: searchFilter args search_filter=<{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:12.282629  1 10 Options: Updating version from notprovided to versionD71444.
09-16 14:14:12.282642  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:12.282667  1 15 store_configuration: begin
09-16 14:14:12.387859  1 17 store_configuration: Converted json data to fcl; json=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotat
09-16 14:14:12.387892  1 17 store_configuration: Converted json data to fcl; fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  
>
09-16 14:14:12.387901  1 15 store_configuration: json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fileNa
09-16 14:14:12.661062  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"NetMonTransportServiceInterface" : {
"service_provider" : "NetMonTransportService",
"max_fragment_size_words" : 2097152
}
},
"daq" : {
"max_fragment_size_words" : 2097152,
"aggregator" : {
"mpi_buffer_count" : 8,
"first_event_builder_rank" : 2,
"event_builder_count" : 2,
"expected_events_per_bunch" : 1,
"print_event_store_stats" : true,
"event_queue_depth" : 20,
"event_queue_wait_time" : 5,
"onmon_event_prescale" : 1,
"xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5",
"file_size_MB" : 8000,
"file_duration" : 0,
"file_event_count" : 0
},
"metrics" : {
"aggFile" : {
"metricPluginType" : "file",
"level" : 3,
"fileName" : "/tmp/aggregator/agg_%UID%_metrics.log",
"uniquify" : true
}
}
},
"source" : {
"module_type" : "NetMonInput"
},
"outputs" : {
"normalOutputMod2" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod2"
]
},
"compressionLevel" : 0
},
"normalOutputMod3" : {
"module_type" : "RootOutput",
"fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root",
"SelectEvents" : {
"SelectEvents" : [
"pmod3"
]
},
"compressionLevel" : 0
}
},
"physics" : {
"analyzers" : {

},
"producers" : {
"BuildInfo" : {
"module_type" : "ArtdaqDemoBuildInfo",
"instance_name" : "ArtdaqDemo"
}
},
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"p1" : [

],
"p2" : [
"BuildInfo"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
],
"my_output_modules" : [
"normalOutputMod2",
"normalOutputMod3"
]
},
"process_name" : "DAQAG"
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"aggregator" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"expected_events_per_bunch" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"event_queue_depth" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"event_queue_wait_time" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"onmon_event_prescale" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"xmlrpc_client_list" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"file_size_MB" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_duration" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"file_event_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"aggFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" :
09-16 14:14:12.661896  1  4 StorageProvider::MongoDB::store() begin
09-16 14:14:12.662252  1  4 Search filter is missing, proceeding with insert.
09-16 14:14:12.668132  1  5 inserted_id={
    "$oid" : "57dc44841a72ba43800c2711"
}
09-16 14:14:12.668324  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "mongo",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}
Running test:<store>
returned:
 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  

<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_mongo_012_t" end time: Sep 16 14:14 CDT
"LoadStore_store_mongo_012_t" time elapsed: 00:00:00
----------------------------------------------------------

81/137 Testing: LoadStore_load_filesystem_014_t
81/137 Test: LoadStore_load_filesystem_014_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test014/LoadStore_load_filesystem_014_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test014/test011.cmp.956.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test014/test011.flt.956.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.956.json" "-r" "test011.cmp.956.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test014/LoadStore_load_filesystem_014_t.d
"LoadStore_load_filesystem_014_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.707.fcl’
removed ‘test011.flt.707.json’
09-16 14:14:12.700845  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:12.700955  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:12.701010  1  0 artdaq::database::mongo trace_enable
09-16 14:14:12.701072  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:12.701112  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:12.701135  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:12.701159  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:12.702244  1 14 Options: json query= <{
    "filter":{"version":"versionD71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"filesystem",
    "operation":"load",
    "dataformat":"fhicl"
}
>
09-16 14:14:12.702268  1 14 OperationBase::readJsonData() data=<{
    "filter":{"version":"versionD71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"filesystem",
    "operation":"load",
    "dataformat":"fhicl"
}
>
09-16 14:14:12.705837  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:12.705854  1 10 Options: Updating operation from load to load.
09-16 14:14:12.705863  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:12.705873  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:12.708269  1 15 Options: searchFilter args search_filter=<{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:12.708836  1 10 Options: Updating version from notprovided to versionD71444.
09-16 14:14:12.708848  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:12.709901  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}>
09-16 14:14:12.710215  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:12.710225  1 10 Options: Updating operation from load to load.
09-16 14:14:12.710231  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:12.710238  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:12.710329  1 15 Options: searchFilter args search_filter=<{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:12.710666  1 10 Options: Updating version from notprovided to versionD71444.
09-16 14:14:12.710676  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:12.710702  1 16 load_configuration: begin
09-16 14:14:12.710729  1 16 load_configuration: search_payload=<{"filter":{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}, "collection":"testLoadStore"}>
09-16 14:14:12.710875  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:14:12.710888  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}, "collection":"testLoadStore"}>
09-16 14:14:12.714829  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:12.714853  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:12.714896  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:12.715035  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:12.715044  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:12.715107  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
],
"versionD71444" : [
"334af0790d3047e689b83901"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901"
]
}
}>
09-16 14:14:12.716109  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:14:12.716117  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "version" : "versionD71444", 
        "configurable_entity.name" : "ENTITY-testLoadStore"
    }>.
09-16 14:14:12.716287  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 2 search criteria.
09-16 14:14:12.716406  1 14 StorageProvider::FileSystemDB::index::_matchVersion() begin
09-16 14:14:12.716414  1 14 StorageProvider::FileSystemDB::index::_matchVersion() args version=<versionD71444>.
09-16 14:14:12.716451  1 15 StorageProvider::FileSystemDB::index::_matchConfiguration() Found 1 documents where version=versionD71444
09-16 14:14:12.716493  1 15 StorageProvider::FileSystemDB::index::_matchConfigurableEntity() begin
09-16 14:14:12.716500  1 15 StorageProvider::FileSystemDB::index::_matchConfigurableEntity() args configurable_entity=<ENTITY-testLoadStore>.
09-16 14:14:12.716512  1 15 StorageProvider::FileSystemDB::index::_matchConfigurableEntity() Found 2 documents where entity=ENTITY-testLoadStore
09-16 14:14:12.716599  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() criteria_count=2, max_count=2, found 1 documents.
09-16 14:14:12.716620  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() returning 1 documents.
09-16 14:14:12.716639  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:14:12.716735  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/334af0790d3047e689b83901.json>.
09-16 14:14:12.717664  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:12.718438  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
],
"versionD71444" : [
"334af0790d3047e689b83901"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901"
]
}
}>
09-16 14:14:12.718589  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:12.765892  1 15 load_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}
Running test:<load>
returned:
 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  

<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"LoadStore_load_filesystem_014_t" end time: Sep 16 14:14 CDT
"LoadStore_load_filesystem_014_t" time elapsed: 00:00:00
----------------------------------------------------------

82/137 Testing: LoadStore_load_mongo_014_t
82/137 Test: LoadStore_load_mongo_014_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test014/LoadStore_load_mongo_014_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test014/test011.cmp.877.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test014/test011.flt.877.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.877.json" "-r" "test011.cmp.877.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test014/LoadStore_load_mongo_014_t.d
"LoadStore_load_mongo_014_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.938.fcl’
removed ‘test011.flt.938.json’
09-16 14:14:12.797477  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:12.797588  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:12.797642  1  0 artdaq::database::mongo trace_enable
09-16 14:14:12.797703  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:12.797741  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:12.797764  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:12.797791  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:12.798907  1 14 Options: json query= <{
    "filter":{"version":"versionD71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"mongo",
    "operation":"load",
    "dataformat":"fhicl"
}
>
09-16 14:14:12.798932  1 14 OperationBase::readJsonData() data=<{
    "filter":{"version":"versionD71444", "configurable_entity.name":"ENTITY-testLoadStore"},
    "collection":"testLoadStore",
    "dbprovider":"mongo",
    "operation":"load",
    "dataformat":"fhicl"
}
>
09-16 14:14:12.802531  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:12.802548  1 10 Options: Updating operation from load to load.
09-16 14:14:12.802557  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:12.802569  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:12.805004  1 15 Options: searchFilter args search_filter=<{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:12.805546  1 10 Options: Updating version from notprovided to versionD71444.
09-16 14:14:12.805558  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:12.806606  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "mongo",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}>
09-16 14:14:12.806933  1 12 Options: Updating provider from filesystem to mongo.
09-16 14:14:12.806943  1 10 Options: Updating operation from load to load.
09-16 14:14:12.806950  1 14 Options: dataFormat args format=<fhicl>.
09-16 14:14:12.806956  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:12.807047  1 15 Options: searchFilter args search_filter=<{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:12.807376  1 10 Options: Updating version from notprovided to versionD71444.
09-16 14:14:12.807386  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:12.807423  1 16 load_configuration: begin
09-16 14:14:12.807459  1 16 load_configuration: search_payload=<{"filter":{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}, "collection":"testLoadStore"}>
09-16 14:14:12.808054  1  3 StorageProvider::MongoDB::load() begin
09-16 14:14:12.808068  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}, "collection":"testLoadStore"}>
09-16 14:14:12.808460  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "version" : "versionD71444", 
    "configurable_entity.name" : "ENTITY-testLoadStore"
}>
09-16 14:14:12.808524  1  2 collection_name="testLoadStore", search filter=<{
    "version" : "versionD71444", 
    "configurable_entity.name" : "ENTITY-testLoadStore"
}>
09-16 14:14:12.809714  1  3 found_count=1
09-16 14:14:12.813279  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc44841a72ba43800c2711"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "NetMonTransportServiceInterface" : {
                        "service_provider" : "NetMonTransportService", 
                        "max_fragment_size_words" : 2097152
                    }
                }, 
                "daq" : {
                    "max_fragment_size_words" : 2097152, 
                    "aggregator" : {
                        "mpi_buffer_count" : 8, 
                        "first_event_builder_rank" : 2, 
                        "event_builder_count" : 2, 
                        "expected_events_per_bunch" : 1, 
                        "print_event_store_stats" : true, 
                        "event_queue_depth" : 20, 
                        "event_queue_wait_time" : 5, 
                        "onmon_event_prescale" : 1, 
                        "xmlrpc_client_list" : ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5", 
                        "file_size_MB" : 8000, 
                        "file_duration" : 0, 
                        "file_event_count" : 0
                    }, 
                    "metrics" : {
                        "aggFile" : {
                            "metricPluginType" : "file", 
                            "level" : 3, 
                            "fileName" : "/tmp/aggregator/agg_%UID%_metrics.log", 
                            "uniquify" : true
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "NetMonInput"
                }, 
                "outputs" : {
                    "normalOutputMod2" : {
                        "module_type" : "RootOutput", 
                        "fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root", 
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2"
                            ]
                        }, 
                        "compressionLevel" : 0
                    }, 
                    "normalOutputMod3" : {
                        "module_type" : "RootOutput", 
                        "fileName" : "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root", 
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod3"
                            ]
                        }, 
                        "compressionLevel" : 0
                    }
                }, 
                "physics" : {
                    "analyzers" : {

                    }, 
                    "producers" : {
                        "BuildInfo" : {
                            "module_type" : "ArtdaqDemoBuildInfo", 
                            "instance_name" : "ArtdaqDemo"
                        }
                    }, 
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "p1" : [

                    ], 
                    "p2" : [
                        "BuildInfo"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ], 
                    "my_output_modules" : [
                        "nor
09-16 14:14:12.862941  1 15 load_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionD71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "mongo",
"operation" : "load",
"collection" : "testLoadStore",
"dataformat" : "fhicl"
}
Running test:<load>
returned:
 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
max_fragment_size_words: 2097152  

}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
aggregator: {
 
mpi_buffer_count: 8  
 
first_event_builder_rank: 2  
 
event_builder_count: 2  
 
expected_events_per_bunch: 1  
 
print_event_store_stats: true  
 
event_queue_depth: 20  
 
event_queue_wait_time: 5  
 
onmon_event_prescale: 1  
 
xmlrpc_client_list: ";http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5"  
 
file_size_MB: 8000  
 
file_duration: 0  
 
file_event_count: 0  

} 
metrics: {
 
aggFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/aggregator/agg_%UID%_metrics.log"  
 
uniquify: true  

}
}
} 
source: {
 
module_type: NetMonInput  

} 
outputs: {
 
normalOutputMod2: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod2.root"  
 
SelectEvents: {
 
SelectEvents: [pmod2]  

} 
compressionLevel: 0  

} 
normalOutputMod3: {
 
module_type: RootOutput  
 
fileName: "/tmp/artdaqdemo_r%06r_sr%02s_%to_mod3.root"  
 
SelectEvents: {
 
SelectEvents: [pmod3]  

} 
compressionLevel: 0  

}
} 
physics: {
 
analyzers: {

} 
producers: {
 
BuildInfo: {
 
module_type: ArtdaqDemoBuildInfo  
 
instance_name: ArtdaqDemo  

}
} 
filters: {
 
prescaleMod2: {
 
module_type: NthEvent  
 
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3  

}
} 
p1: []  
 
p2: [BuildInfo]  
 
pmod2: [prescaleMod2]  
 
pmod3: [prescaleMod3]  
#my_output_modules: [ normalOutput ]
my_output_modules: [normalOutputMod2, normalOutputMod3]  

} 
process_name: DAQAG  

<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"LoadStore_load_mongo_014_t" end time: Sep 16 14:14 CDT
"LoadStore_load_mongo_014_t" time elapsed: 00:00:00
----------------------------------------------------------

83/137 Testing: LoadStore_store_filesystem_020_t
83/137 Test: LoadStore_store_filesystem_020_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test020/LoadStore_store_filesystem_020_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test020/test011.src.826.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test020/test011.cmp.826.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test020/test011.flt.826.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.826.json" "-s" "test011.src.826.json" "-r" "test011.cmp.826.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test020/LoadStore_store_filesystem_020_t.d
"LoadStore_store_filesystem_020_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.068.json’
removed ‘test011.flt.068.json’
removed ‘test011.src.068.json’
09-16 14:14:12.914286  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:12.914442  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:12.914536  1  0 artdaq::database::mongo trace_enable
09-16 14:14:12.914633  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:12.914692  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:12.914719  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:12.914747  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:12.916423  1 14 Options: json query= <{
   "filter":{
      "version":"versionZ71444",
      "configurable_entity.name":"ENTITY-testLoadStore"
   },
   "configuration":"testConfigA03172016-174859",
   "collection":"testLoadStore",
   "dbprovider":"filesystem",
   "operation":"store",
   "dataformat":"gui"
}
>
09-16 14:14:12.916458  1 14 OperationBase::readJsonData() data=<{
   "filter":{
      "version":"versionZ71444",
      "configurable_entity.name":"ENTITY-testLoadStore"
   },
   "configuration":"testConfigA03172016-174859",
   "collection":"testLoadStore",
   "dbprovider":"filesystem",
   "operation":"store",
   "dataformat":"gui"
}
>
09-16 14:14:12.922324  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:12.922351  1 10 Options: Updating operation from load to store.
09-16 14:14:12.922359  1 14 Options: dataFormat args format=<gui>.
09-16 14:14:12.922370  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:12.927500  1 15 Options: searchFilter args search_filter=<{
"version" : "versionZ71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:12.928204  1 12 Options: Updating global_configuration from notprovided to testConfigA03172016-174859.
09-16 14:14:12.928602  1 10 Options: Updating version from notprovided to versionZ71444.
09-16 14:14:12.928616  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:12.932647  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionZ71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "gui",
"configuration" : "testConfigA03172016-174859"
}>
09-16 14:14:12.933369  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:12.933383  1 10 Options: Updating operation from load to store.
09-16 14:14:12.933390  1 14 Options: dataFormat args format=<gui>.
09-16 14:14:12.933402  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:12.933617  1 15 Options: searchFilter args search_filter=<{
"version" : "versionZ71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
}>.
09-16 14:14:12.934193  1 12 Options: Updating global_configuration from notprovided to testConfigA03172016-174859.
09-16 14:14:12.934268  1 10 Options: Updating version from notprovided to versionZ71444.
09-16 14:14:12.934278  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:12.934306  1 15 store_configuration: begin
09-16 14:14:13.008719  1 15 store_configuration: json_buffer=<{
"document" : {
"data" : {
"prolog" : {
"fhicl_pound_include_0" : "metrics.fcl",
"ssp_standard" : {
"metrics" : "@local::metrics",
"max_fragment_size_words" : 262144,
"fragment_receiver" : {
"mpi_buffer_count" : 16,
"mpi_sync_interval" : 24000,
"first_event_builder_rank" : -1,
"event_builder_count" : -1,
"generator" : "SSP",
"fragment_type" : "SSP",
"interface_type" : 1,
"verbosity" : 3,
"DAQConfig" : {
"MillisliceLength" : 10000000,
"MillisliceOverlap" : 1000000,
"UseExternalTimestamp" : 1,
"StartOnNOvASync" : 1,
"EmptyWriteDelay" : 1000000,
"HardwareClockRate" : 64
},
"HardwareConfig" : {
"eventDataInterfaceSelect" : 1,
"ChannelControl" : {
"ExtTriggerMode" : 1,
"LEDTrigger" : 0,
"TimestampRate" : 7
},
"ALL_channel_control" : 1,
"ALL_led_threshold" : 100,
"trigger_input_delay" : 55,
"dsp_clock_control" : 19,
"ALL_readout_window" : 700,
"ALL_readout_pretrigger" : 50,
"ALL_cfd_parameters" : 6144,
"ALL_p_window" : 32,
"ALL_i2_window" : 500,
"ALL_m1_window" : 10,
"ALL_m2_window" : 10,
"ALL_d_window" : 20,
"ALL_i1_window" : 500,
"ALL_disc_width" : 10,
"ALL_baseline_start" : 0,
"ALL_bias_config" : 265488,
"c2c_control" : 7,
"c2c_master_intr_control" : 0,
"comm_clock_control" : 1,
"comm_led_config" : 0,
"comm_led_input" : 0,
"qi_dac_config" : 0,
"qi_dac_control" : 1,
"mon_config" : 1241088,
"mon_select" : 16776960,
"mon_gpio" : 0,
"mon_control" : 65537,
"c2c_slave_intr_control" : 0,
"gpio_output_width" : 4096,
"front_panel_config" : 4369,
"dsp_led_config" : 0,
"dsp_led_input" : 0,
"baseline_delay" : 5,
"diag_channel_input" : 0,
"qi_config" : 268377856,
"qi_delay" : 0,
"qi_pulse_width" : 0,
"external_gate_width" : 32768
}
}
},
"daq" : "@local::ssp_standard",
"fhicl_pound_include_1" : "ssp_expert_run_options.fcl",
"fhicl_pound_include_2" : "user_run_options.fcl",
"ssp_standard" : "@local::daq",
"ssp01_standard" : "@local::ssp_standard",
"ssp01_standard.fragment_receiver.fragment_id" : "123",
"ssp01_standard.fragment_receiver.board_id" : 0,
"ssp01_standard.fragment_receiver.board_ip" : "192.168.1.109",
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : 1,
"ssp02_standard" : "@local::ssp_standard",
"ssp02_standard.fragment_receiver.fragment_id" : 1,
"ssp02_standard.fragment_receiver.board_id" : 1,
"ssp02_standard.fragment_receiver.board_ip" : "192.168.1.117",
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : 2,
"ssp03_standard" : "@local::ssp_standard",
"ssp03_standard.fragment_receiver.fragment_id" : 2,
"ssp03_standard.fragment_receiver.board_id" : 2,
"ssp03_standard.fragment_receiver.board_ip" : "192.168.1.113",
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : 3,
"ssp04_standard" : "@local::ssp_standard",
"ssp04_standard.fragment_receiver.fragment_id" : 3,
"ssp04_standard.fragment_receiver.board_id" : 3,
"ssp04_standard.fragment_receiver.board_ip" : "192.168.1.110",
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : 4,
"ssp05_standard" : "@local::ssp_standard",
"ssp05_standard.fragment_receiver.fragment_id" : 4,
"ssp05_standard.fragment_receiver.board_id" : 4,
"ssp05_standard.fragment_receiver.board_ip" : "192.168.1.114",
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : 5,
"ssp06_standard" : "@local::ssp_standard",
"ssp06_standard.fragment_receiver.fragment_id" : 5,
"ssp06_standard.fragment_receiver.board_id" : 5,
"ssp06_standard.fragment_receiver.board_ip" : "192.168.1.106",
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : 6,
"ssp07_standard" : "@local::ssp_standard",
"ssp07_standard.fragment_receiver.fragment_id" : 6,
"ssp07_standard.fragment_receiver.board_id" : 6,
"ssp07_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : 7,
"ssp08_standard" : "@local::ssp_standard",
"ssp08_standard.fragment_receiver.fragment_id" : 7,
"ssp08_standard.fragment_receiver.board_id" : 7,
"ssp08_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : 8
},
"main" : {

}
},
"metadata" : {
09-16 14:14:13.527188  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"prolog" : {
"fhicl_pound_include_0" : "metrics.fcl",
"ssp_standard" : {
"metrics" : "@local::metrics",
"max_fragment_size_words" : 262144,
"fragment_receiver" : {
"mpi_buffer_count" : 16,
"mpi_sync_interval" : 24000,
"first_event_builder_rank" : -1,
"event_builder_count" : -1,
"generator" : "SSP",
"fragment_type" : "SSP",
"interface_type" : 1,
"verbosity" : 3,
"DAQConfig" : {
"MillisliceLength" : 10000000,
"MillisliceOverlap" : 1000000,
"UseExternalTimestamp" : 1,
"StartOnNOvASync" : 1,
"EmptyWriteDelay" : 1000000,
"HardwareClockRate" : 64
},
"HardwareConfig" : {
"eventDataInterfaceSelect" : 1,
"ChannelControl" : {
"ExtTriggerMode" : 1,
"LEDTrigger" : 0,
"TimestampRate" : 7
},
"ALL_channel_control" : 1,
"ALL_led_threshold" : 100,
"trigger_input_delay" : 55,
"dsp_clock_control" : 19,
"ALL_readout_window" : 700,
"ALL_readout_pretrigger" : 50,
"ALL_cfd_parameters" : 6144,
"ALL_p_window" : 32,
"ALL_i2_window" : 500,
"ALL_m1_window" : 10,
"ALL_m2_window" : 10,
"ALL_d_window" : 20,
"ALL_i1_window" : 500,
"ALL_disc_width" : 10,
"ALL_baseline_start" : 0,
"ALL_bias_config" : 265488,
"c2c_control" : 7,
"c2c_master_intr_control" : 0,
"comm_clock_control" : 1,
"comm_led_config" : 0,
"comm_led_input" : 0,
"qi_dac_config" : 0,
"qi_dac_control" : 1,
"mon_config" : 1241088,
"mon_select" : 16776960,
"mon_gpio" : 0,
"mon_control" : 65537,
"c2c_slave_intr_control" : 0,
"gpio_output_width" : 4096,
"front_panel_config" : 4369,
"dsp_led_config" : 0,
"dsp_led_input" : 0,
"baseline_delay" : 5,
"diag_channel_input" : 0,
"qi_config" : 268377856,
"qi_delay" : 0,
"qi_pulse_width" : 0,
"external_gate_width" : 32768
}
}
},
"daq" : "@local::ssp_standard",
"fhicl_pound_include_1" : "ssp_expert_run_options.fcl",
"fhicl_pound_include_2" : "user_run_options.fcl",
"ssp_standard" : "@local::daq",
"ssp01_standard" : "@local::ssp_standard",
"ssp01_standard.fragment_receiver.fragment_id" : "123",
"ssp01_standard.fragment_receiver.board_id" : 0,
"ssp01_standard.fragment_receiver.board_ip" : "192.168.1.109",
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : 1,
"ssp02_standard" : "@local::ssp_standard",
"ssp02_standard.fragment_receiver.fragment_id" : 1,
"ssp02_standard.fragment_receiver.board_id" : 1,
"ssp02_standard.fragment_receiver.board_ip" : "192.168.1.117",
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : 2,
"ssp03_standard" : "@local::ssp_standard",
"ssp03_standard.fragment_receiver.fragment_id" : 2,
"ssp03_standard.fragment_receiver.board_id" : 2,
"ssp03_standard.fragment_receiver.board_ip" : "192.168.1.113",
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : 3,
"ssp04_standard" : "@local::ssp_standard",
"ssp04_standard.fragment_receiver.fragment_id" : 3,
"ssp04_standard.fragment_receiver.board_id" : 3,
"ssp04_standard.fragment_receiver.board_ip" : "192.168.1.110",
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : 4,
"ssp05_standard" : "@local::ssp_standard",
"ssp05_standard.fragment_receiver.fragment_id" : 4,
"ssp05_standard.fragment_receiver.board_id" : 4,
"ssp05_standard.fragment_receiver.board_ip" : "192.168.1.114",
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : 5,
"ssp06_standard" : "@local::ssp_standard",
"ssp06_standard.fragment_receiver.fragment_id" : 5,
"ssp06_standard.fragment_receiver.board_id" : 5,
"ssp06_standard.fragment_receiver.board_ip" : "192.168.1.106",
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : 6,
"ssp07_standard" : "@local::ssp_standard",
"ssp07_standard.fragment_receiver.fragment_id" : 6,
"ssp07_standard.fragment_receiver.board_id" : 6,
"ssp07_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : 7,
"ssp08_standard" : "@local::ssp_standard",
"ssp08_standard.fragment_receiver.fragment_id" : 7,
"ssp08_standard.fragment_receiver.board_id" : 7,
"ssp08_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : 8
},
"main" : {

}
},
09-16 14:14:13.527440  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:13.527460  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {
"fhicl_pound_include_0" : "metrics.fcl",
"ssp_standard" : {
"metrics" : "@local::metrics",
"max_fragment_size_words" : 262144,
"fragment_receiver" : {
"mpi_buffer_count" : 16,
"mpi_sync_interval" : 24000,
"first_event_builder_rank" : -1,
"event_builder_count" : -1,
"generator" : "SSP",
"fragment_type" : "SSP",
"interface_type" : 1,
"verbosity" : 3,
"DAQConfig" : {
"MillisliceLength" : 10000000,
"MillisliceOverlap" : 1000000,
"UseExternalTimestamp" : 1,
"StartOnNOvASync" : 1,
"EmptyWriteDelay" : 1000000,
"HardwareClockRate" : 64
},
"HardwareConfig" : {
"eventDataInterfaceSelect" : 1,
"ChannelControl" : {
"ExtTriggerMode" : 1,
"LEDTrigger" : 0,
"TimestampRate" : 7
},
"ALL_channel_control" : 1,
"ALL_led_threshold" : 100,
"trigger_input_delay" : 55,
"dsp_clock_control" : 19,
"ALL_readout_window" : 700,
"ALL_readout_pretrigger" : 50,
"ALL_cfd_parameters" : 6144,
"ALL_p_window" : 32,
"ALL_i2_window" : 500,
"ALL_m1_window" : 10,
"ALL_m2_window" : 10,
"ALL_d_window" : 20,
"ALL_i1_window" : 500,
"ALL_disc_width" : 10,
"ALL_baseline_start" : 0,
"ALL_bias_config" : 265488,
"c2c_control" : 7,
"c2c_master_intr_control" : 0,
"comm_clock_control" : 1,
"comm_led_config" : 0,
"comm_led_input" : 0,
"qi_dac_config" : 0,
"qi_dac_control" : 1,
"mon_config" : 1241088,
"mon_select" : 16776960,
"mon_gpio" : 0,
"mon_control" : 65537,
"c2c_slave_intr_control" : 0,
"gpio_output_width" : 4096,
"front_panel_config" : 4369,
"dsp_led_config" : 0,
"dsp_led_input" : 0,
"baseline_delay" : 5,
"diag_channel_input" : 0,
"qi_config" : 268377856,
"qi_delay" : 0,
"qi_pulse_width" : 0,
"external_gate_width" : 32768
}
}
},
"daq" : "@local::ssp_standard",
"fhicl_pound_include_1" : "ssp_expert_run_options.fcl",
"fhicl_pound_include_2" : "user_run_options.fcl",
"ssp_standard" : "@local::daq",
"ssp01_standard" : "@local::ssp_standard",
"ssp01_standard.fragment_receiver.fragment_id" : "123",
"ssp01_standard.fragment_receiver.board_id" : 0,
"ssp01_standard.fragment_receiver.board_ip" : "192.168.1.109",
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : 1,
"ssp02_standard" : "@local::ssp_standard",
"ssp02_standard.fragment_receiver.fragment_id" : 1,
"ssp02_standard.fragment_receiver.board_id" : 1,
"ssp02_standard.fragment_receiver.board_ip" : "192.168.1.117",
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : 2,
"ssp03_standard" : "@local::ssp_standard",
"ssp03_standard.fragment_receiver.fragment_id" : 2,
"ssp03_standard.fragment_receiver.board_id" : 2,
"ssp03_standard.fragment_receiver.board_ip" : "192.168.1.113",
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : 3,
"ssp04_standard" : "@local::ssp_standard",
"ssp04_standard.fragment_receiver.fragment_id" : 3,
"ssp04_standard.fragment_receiver.board_id" : 3,
"ssp04_standard.fragment_receiver.board_ip" : "192.168.1.110",
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : 4,
"ssp05_standard" : "@local::ssp_standard",
"ssp05_standard.fragment_receiver.fragment_id" : 4,
"ssp05_standard.fragment_receiver.board_id" : 4,
"ssp05_standard.fragment_receiver.board_ip" : "192.168.1.114",
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : 5,
"ssp06_standard" : "@local::ssp_standard",
"ssp06_standard.fragment_receiver.fragment_id" : 5,
"ssp06_standard.fragment_receiver.board_id" : 5,
"ssp06_standard.fragment_receiver.board_ip" : "192.168.1.106",
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : 6,
"ssp07_standard" : "@local::ssp_standard",
"ssp07_standard.fragment_receiver.fragment_id" : 6,
"ssp07_standard.fragment_receiver.board_id" : 6,
"ssp07_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : 7,
"ssp08_standard" : "@local::ssp_standard",
"ssp08_standard.fragment_receiver.fragment_id" : 7,
"ssp08_standard.fragment_receiver.board_id" : 7,
"ssp08_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : 8
},
"ma
09-16 14:14:13.580303  1 12 StorageProvider::FileSystemDB generate_oid=6bd4cd9b7fac49ccb1ad9297
09-16 14:14:13.624315  1  4 StorageProvider::FileSystemDB::store() using generated oid=<6bd4cd9b7fac49ccb1ad9297>.
09-16 14:14:13.624387  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:13.624423  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:13.624471  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:13.624648  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/6bd4cd9b7fac49ccb1ad9297.json>.
09-16 14:14:13.781410  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:13.781450  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:13.781574  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
],
"versionD71444" : [
"334af0790d3047e689b83901"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901"
]
}
}>
09-16 14:14:13.782715  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:13.782741  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {
                    "fhicl_pound_include_0" : "metrics.fcl", 
                    "ssp_standard" : {
                        "metrics" : "@local::metrics", 
                        "max_fragment_size_words" : 262144, 
                        "fragment_receiver" : {
                            "mpi_buffer_count" : 16, 
                            "mpi_sync_interval" : 24000, 
                            "first_event_builder_rank" : -1, 
                            "event_builder_count" : -1, 
                            "generator" : "SSP", 
                            "fragment_type" : "SSP", 
                            "interface_type" : 1, 
                            "verbosity" : 3, 
                            "DAQConfig" : {
                                "MillisliceLength" : 10000000, 
                                "MillisliceOverlap" : 1000000, 
                                "UseExternalTimestamp" : 1, 
                                "StartOnNOvASync" : 1, 
                                "EmptyWriteDelay" : 1000000, 
                                "HardwareClockRate" : 64
                            }, 
                            "HardwareConfig" : {
                                "eventDataInterfaceSelect" : 1, 
                                "ChannelControl" : {
                                    "ExtTriggerMode" : 1, 
                                    "LEDTrigger" : 0, 
                                    "TimestampRate" : 7
                                }, 
                                "ALL_channel_control" : 1, 
                                "ALL_led_threshold" : 100, 
                                "trigger_input_delay" : 55, 
                                "dsp_clock_control" : 19, 
                                "ALL_readout_window" : 700, 
                                "ALL_readout_pretrigger" : 50, 
                                "ALL_cfd_parameters" : 6144, 
                                "ALL_p_window" : 32, 
                                "ALL_i2_window" : 500, 
                                "ALL_m1_window" : 10, 
                                "ALL_m2_window" : 10, 
                                "ALL_d_window" : 20, 
                                "ALL_i1_window" : 500, 
                                "ALL_disc_width" : 10, 
                                "ALL_baseline_start" : 0, 
                                "ALL_bias_config" : 265488, 
                                "c2c_control" : 7, 
                                "c2c_master_intr_control" : 0, 
                                "comm_clock_control" : 1, 
                                "comm_led_config" : 0, 
                                "comm_led_input" : 0, 
                                "qi_dac_config" : 0, 
                                "qi_dac_control" : 1, 
                                "mon_config" : 1241088, 
                                "mon_select" : 16776960, 
                                "mon_gpio" : 0, 
                                "mon_control" : 65537, 
                                "c2c_slave_intr_control" : 0, 
                                "gpio_output_width" : 4096, 
                                "front_panel_config" : 4369, 
                                "dsp_led_config" : 0, 
                                "dsp_led_input" : 0, 
                                "baseline_delay" : 5, 
                                "diag_channel_input" : 0, 
                                "qi_config" : 268377856, 
                                "qi_delay" : 0, 
                                "qi_pulse_width" : 0, 
                                "external_gate_width" : 32768
                            }
                        }
                    }, 
                    "daq" : "@local::ssp_standard", 
                    "fhicl_pound_include_1" : "ssp_expert_run_options.fcl", 
                    "
09-16 14:14:13.782872  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<6bd4cd9b7fac49ccb1ad9297>.
09-16 14:14:13.806348  1  5 StorageProvider::FileSystemDB::index::addDocument() found 9 keys.
09-16 14:14:13.806378  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:13.806382  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<6bd4cd9b7fac49ccb1ad9297>.
09-16 14:14:13.806387  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<versionZ71444>.
09-16 14:14:13.806554  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() begin
09-16 14:14:13.806562  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args ouid=<6bd4cd9b7fac49ccb1ad9297>.
09-16 14:14:13.806566  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args configuration=<testConfigA03172016-174859>.
09-16 14:14:13.806588  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:13.806592  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<6bd4cd9b7fac49ccb1ad9297>.
09-16 14:14:13.806595  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<ENTITY-testLoadStore>.
09-16 14:14:13.806704  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:13.807345  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
],
"versionD71444" : [
"334af0790d3047e689b83901"
],
"versionZ71444" : [
"6bd4cd9b7fac49ccb1ad9297"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"testConfigA03172016-174859" : [
"6bd4cd9b7fac49ccb1ad9297"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"6bd4cd9b7fac49ccb1ad9297"
]
}
}>
09-16 14:14:13.807491  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:13.807579  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionZ71444",
"configurable_entity.name" : "ENTITY-testLoadStore"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "gui",
"configuration" : "testConfigA03172016-174859"
}
Running test:<store>
returned:
{
"document" : {
"data" : {
"prolog" : {
"fhicl_pound_include_0" : "metrics.fcl",
"ssp_standard" : {
"metrics" : "@local::metrics",
"max_fragment_size_words" : 262144,
"fragment_receiver" : {
"mpi_buffer_count" : 16,
"mpi_sync_interval" : 24000,
"first_event_builder_rank" : -1,
"event_builder_count" : -1,
"generator" : "SSP",
"fragment_type" : "SSP",
"interface_type" : 1,
"verbosity" : 3,
"DAQConfig" : {
"MillisliceLength" : 10000000,
"MillisliceOverlap" : 1000000,
"UseExternalTimestamp" : 1,
"StartOnNOvASync" : 1,
"EmptyWriteDelay" : 1000000,
"HardwareClockRate" : 64
},
"HardwareConfig" : {
"eventDataInterfaceSelect" : 1,
"ChannelControl" : {
"ExtTriggerMode" : 1,
"LEDTrigger" : 0,
"TimestampRate" : 7
},
"ALL_channel_control" : 1,
"ALL_led_threshold" : 100,
"trigger_input_delay" : 55,
"dsp_clock_control" : 19,
"ALL_readout_window" : 700,
"ALL_readout_pretrigger" : 50,
"ALL_cfd_parameters" : 6144,
"ALL_p_window" : 32,
"ALL_i2_window" : 500,
"ALL_m1_window" : 10,
"ALL_m2_window" : 10,
"ALL_d_window" : 20,
"ALL_i1_window" : 500,
"ALL_disc_width" : 10,
"ALL_baseline_start" : 0,
"ALL_bias_config" : 265488,
"c2c_control" : 7,
"c2c_master_intr_control" : 0,
"comm_clock_control" : 1,
"comm_led_config" : 0,
"comm_led_input" : 0,
"qi_dac_config" : 0,
"qi_dac_control" : 1,
"mon_config" : 1241088,
"mon_select" : 16776960,
"mon_gpio" : 0,
"mon_control" : 65537,
"c2c_slave_intr_control" : 0,
"gpio_output_width" : 4096,
"front_panel_config" : 4369,
"dsp_led_config" : 0,
"dsp_led_input" : 0,
"baseline_delay" : 5,
"diag_channel_input" : 0,
"qi_config" : 268377856,
"qi_delay" : 0,
"qi_pulse_width" : 0,
"external_gate_width" : 32768
}
}
},
"daq" : "@local::ssp_standard",
"fhicl_pound_include_1" : "ssp_expert_run_options.fcl",
"fhicl_pound_include_2" : "user_run_options.fcl",
"ssp_standard" : "@local::daq",
"ssp01_standard" : "@local::ssp_standard",
"ssp01_standard.fragment_receiver.fragment_id" : "123",
"ssp01_standard.fragment_receiver.board_id" : 0,
"ssp01_standard.fragment_receiver.board_ip" : "192.168.1.109",
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : 1,
"ssp02_standard" : "@local::ssp_standard",
"ssp02_standard.fragment_receiver.fragment_id" : 1,
"ssp02_standard.fragment_receiver.board_id" : 1,
"ssp02_standard.fragment_receiver.board_ip" : "192.168.1.117",
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : 2,
"ssp03_standard" : "@local::ssp_standard",
"ssp03_standard.fragment_receiver.fragment_id" : 2,
"ssp03_standard.fragment_receiver.board_id" : 2,
"ssp03_standard.fragment_receiver.board_ip" : "192.168.1.113",
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : 3,
"ssp04_standard" : "@local::ssp_standard",
"ssp04_standard.fragment_receiver.fragment_id" : 3,
"ssp04_standard.fragment_receiver.board_id" : 3,
"ssp04_standard.fragment_receiver.board_ip" : "192.168.1.110",
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : 4,
"ssp05_standard" : "@local::ssp_standard",
"ssp05_standard.fragment_receiver.fragment_id" : 4,
"ssp05_standard.fragment_receiver.board_id" : 4,
"ssp05_standard.fragment_receiver.board_ip" : "192.168.1.114",
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : 5,
"ssp06_standard" : "@local::ssp_standard",
"ssp06_standard.fragment_receiver.fragment_id" : 5,
"ssp06_standard.fragment_receiver.board_id" : 5,
"ssp06_standard.fragment_receiver.board_ip" : "192.168.1.106",
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : 6,
"ssp07_standard" : "@local::ssp_standard",
"ssp07_standard.fragment_receiver.fragment_id" : 6,
"ssp07_standard.fragment_receiver.board_id" : 6,
"ssp07_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : 7,
"ssp08_standard" : "@local::ssp_standard",
"ssp08_standard.fragment_receiver.fragment_id" : 7,
"ssp08_standard.fragment_receiver.board_id" : 7,
"ssp08_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : 8
},
"main" : {

}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {
"fhicl_pound_include_0" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp_standard" : {
"type" : "table",
"comment" : " ",
"children" : {
"metrics" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_sync_interval" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : "# These two variables will be calculated by DAQInterface...",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"generator" : {
"type" : "string",
"comment" : " ",
"annotation" : "###Don^t edit these lines"
},
"fragment_type" : {
"type" : "string",
"comment" : "###Don^t edit these lines",
"annotation" : "###"
},
"interface_type" : {
"type" : "number",
"comment" : " ",
"annotation" : "### 0=USB, 1=Ethernet, 2=Emulated"
},
"verbosity" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=silent, no errors or warnings."
},
"DAQConfig" : {
"type" : "table",
"comment" : " ",
"children" : {
"MillisliceLength" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Amount of time to assign to a single fragment in clock ticks"
},
"MillisliceOverlap" : {
"type" : "number",
"comment" : "#Amount of time to assign to a single fragment in clock ticks",
"annotation" : "#Amount at start of next fragment to also put into current fragment"
},
"UseExternalTimestamp" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=Use internal timestamp to split events into millislices, 1=Use NOvA timestamp."
},
"StartOnNOvASync" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Tell SSP to wait for sync pulse from NOvA timing unit before taking data."
},
"EmptyWriteDelay" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Time in us that DAQ will wait for SSP events, before starting to build and send"
},
"HardwareClockRate" : {
"type" : "number",
"comment" : " ",
"annotation" : "#in MHz. Must be 64 for NOvA timestamping, 150 for internal."
}
}
},
"HardwareConfig" : {
"type" : "table",
"comment" : " ",
"children" : {
"eventDataInterfaceSelect" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=USB, 1=Ethernet"
},
"ChannelControl" : {
"type" : "table",
"comment" : " ",
"children" : {
"ExtTriggerMode" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=no external trigger"
},
"LEDTrigger" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=no leading edge trigger"
},
"TimestampRate" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=292.969kHz"
}
}
},
"ALL_channel_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_led_threshold" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Leading edge trigger threshold in ADC"
},
"trigger_input_delay" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Delay to apply to front panel trigger."
},
"dsp_clock_control" : {
"type" : "number",
"comment" : "#Use NOvA TDU",
"annotation" : "# Bit |  Meaning "
},
"ALL_readout_window" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Number of ADC samples to read out"
},
"ALL_readout_pretrigger" : {
"type" : "number",
"comment" : "#Number of ADC samples to read out",
"annotation" : "#Of which before trigger time"
},
"ALL_cfd_parameters" : {
"type" : "number",
"comment" : "#Leave alone unless you know what you^re doing!",
"annotation" : " "
},
"ALL_p_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_i2_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_m1_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_m2_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_d_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_i1_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_disc_width" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_baseline_start" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_bias_config" : {
"type" : "number",
"comment" : "#ALL_bias_config:           0x00040E21 # 26.5V",
"annotation" : "# 24.5V"
},
"c2c_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"c2c_master_intr_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"comm_clock_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"comm_led_config" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"comm_led_input" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_dac_config" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_dac_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mon_config" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mon_select" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mon_gpio" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mon_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"c2c_slave_intr_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"gpio_output_width" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"front_panel_config" : {
"type" : "number",
"comment" : " ",
"annotation" : "# standard config?"
},
"dsp_led_config" : {
"type" : "number",
"comment" : "# standard config?",
"annotation" : " "
},
"dsp_led_input" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"baseline_delay" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"diag_channel_input" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_config" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_delay" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_pulse_width" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"external_gate_width" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"daq" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"fhicl_pound_include_1" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"fhicl_pound_include_2" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {

}
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
],
"converted" : {

}
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "demoVersion002",
"configurations" : [
{
"name" : "demoConfig001",
"assigned" : "Thu Sep  8 19:38:10 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Thu Sep  8 19:38:10 2016"
},
{
"setVersion" : "Thu Sep  8 19:38:10 2016"
},
{
"setConfigurableEntity" : "Thu Sep  8 19:38:10 2016"
}
]
},
"configurable_entity" : {
"name" : "notprovided"
},
"_id" : {
"_oid" : "15781635e2564d60ac331274"
}
}
<end of output>
Test time =   0.99 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_filesystem_020_t" end time: Sep 16 14:14 CDT
"LoadStore_store_filesystem_020_t" time elapsed: 00:00:00
----------------------------------------------------------

84/137 Testing: LoadStore_store_filesystem_021_t
84/137 Test: LoadStore_store_filesystem_021_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test021/LoadStore_store_filesystem_021_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test021/test011.src.974.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test021/test011.cmp.974.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test021/test011.flt.974.json" "--skip-return-code" "247" "LoadStore_t" "--searchquery=test011.flt.974.json" "-s" "test011.src.974.json" "-r" "test011.cmp.974.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/ConfigurationDB/LoadStore/test021/LoadStore_store_filesystem_021_t.d
"LoadStore_store_filesystem_021_t" start time: Sep 16 14:14 CDT
Output:
----------------------------------------------------------
removed ‘test011.cmp.378.json’
removed ‘test011.flt.378.json’
removed ‘test011.src.378.json’
09-16 14:14:13.892624  1  0 artdaq::database::filesystem trace_enable
09-16 14:14:13.892780  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:14:13.892848  1  0 artdaq::database::mongo trace_enable
09-16 14:14:13.892923  1  0 artdaq::database::configuration::LoadStoreOperation trace_enable
09-16 14:14:13.892963  1  0 artdaq::database::configuration::options::OperationBase trace_enable
09-16 14:14:13.892984  1  0 artdaq::database::configuration::options::OperationLoadStore trace_enable
09-16 14:14:13.893008  1  0 artdaq::database::configuration::LoadStoreOperationDetail trace_enable
09-16 14:14:13.894569  1 14 Options: json query= <{
   "configurable_entity":"ENTITY-testLoadStore",
   "version":"versionZ71444",
   "configuration":"testConfigA03172016-174859",
   "collection":"testLoadStore",
   "dbprovider":"filesystem",
   "operation":"store",
   "dataformat":"gui"
}
>
09-16 14:14:13.894596  1 14 OperationBase::readJsonData() data=<{
   "configurable_entity":"ENTITY-testLoadStore",
   "version":"versionZ71444",
   "configuration":"testConfigA03172016-174859",
   "collection":"testLoadStore",
   "dbprovider":"filesystem",
   "operation":"store",
   "dataformat":"gui"
}
>
09-16 14:14:13.898752  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:13.898767  1 10 Options: Updating operation from load to store.
09-16 14:14:13.898773  1 14 Options: dataFormat args format=<gui>.
09-16 14:14:13.898779  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:13.899298  1 12 Options: Updating global_configuration from notprovided to testConfigA03172016-174859.
09-16 14:14:13.899307  1 10 Options: Updating version from notprovided to versionZ71444.
09-16 14:14:13.899312  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:13.899334  1  1 Options() no filter provided <{
   "configurable_entity":"ENTITY-testLoadStore",
   "version":"versionZ71444",
   "configuration":"testConfigA03172016-174859",
   "collection":"testLoadStore",
   "dbprovider":"filesystem",
   "operation":"store",
   "dataformat":"gui"
}
>
09-16 14:14:13.904810  1 14 OperationBase::readJsonData() data=<{
"filter" : {
"version" : "versionZ71444",
"configurable_entity.name" : "ENTITY-testLoadStore",
"configurations.name" : "testConfigA03172016-174859"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "gui",
"configuration" : "testConfigA03172016-174859"
}>
09-16 14:14:13.905567  1 12 Options: Updating provider from filesystem to filesystem.
09-16 14:14:13.905576  1 10 Options: Updating operation from load to store.
09-16 14:14:13.905580  1 14 Options: dataFormat args format=<gui>.
09-16 14:14:13.905584  1 11 Options: Updating collection_name from notprovided to testLoadStore.
09-16 14:14:13.905706  1 15 Options: searchFilter args search_filter=<{
"version" : "versionZ71444",
"configurable_entity.name" : "ENTITY-testLoadStore",
"configurations.name" : "testConfigA03172016-174859"
}>.
09-16 14:14:13.906110  1 12 Options: Updating global_configuration from notprovided to testConfigA03172016-174859.
09-16 14:14:13.906146  1 10 Options: Updating version from notprovided to versionZ71444.
09-16 14:14:13.906152  1 11 Options: Updating entity from notprovided to ENTITY-testLoadStore.
09-16 14:14:13.906156  1 12 Options: Updating global_configuration from testConfigA03172016-174859 to testConfigA03172016-174859.
09-16 14:14:13.906164  1 15 store_configuration: begin
09-16 14:14:13.960776  1 15 store_configuration: json_buffer=<{
"document" : {
"data" : {
"prolog" : {
"fhicl_pound_include_0" : "metrics.fcl",
"ssp_standard" : {
"metrics" : "@local::metrics",
"max_fragment_size_words" : 262144,
"fragment_receiver" : {
"mpi_buffer_count" : 16,
"mpi_sync_interval" : 24000,
"first_event_builder_rank" : -1,
"event_builder_count" : -1,
"generator" : "SSP",
"fragment_type" : "SSP",
"interface_type" : 1,
"verbosity" : 3,
"DAQConfig" : {
"MillisliceLength" : 10000000,
"MillisliceOverlap" : 1000000,
"UseExternalTimestamp" : 1,
"StartOnNOvASync" : 1,
"EmptyWriteDelay" : 1000000,
"HardwareClockRate" : 64
},
"HardwareConfig" : {
"eventDataInterfaceSelect" : 1,
"ChannelControl" : {
"ExtTriggerMode" : 1,
"LEDTrigger" : 0,
"TimestampRate" : 7
},
"ALL_channel_control" : 1,
"ALL_led_threshold" : 100,
"trigger_input_delay" : 55,
"dsp_clock_control" : 19,
"ALL_readout_window" : 700,
"ALL_readout_pretrigger" : 50,
"ALL_cfd_parameters" : 6144,
"ALL_p_window" : 32,
"ALL_i2_window" : 500,
"ALL_m1_window" : 10,
"ALL_m2_window" : 10,
"ALL_d_window" : 20,
"ALL_i1_window" : 500,
"ALL_disc_width" : 10,
"ALL_baseline_start" : 0,
"ALL_bias_config" : 265488,
"c2c_control" : 7,
"c2c_master_intr_control" : 0,
"comm_clock_control" : 1,
"comm_led_config" : 0,
"comm_led_input" : 0,
"qi_dac_config" : 0,
"qi_dac_control" : 1,
"mon_config" : 1241088,
"mon_select" : 16776960,
"mon_gpio" : 0,
"mon_control" : 65537,
"c2c_slave_intr_control" : 0,
"gpio_output_width" : 4096,
"front_panel_config" : 4369,
"dsp_led_config" : 0,
"dsp_led_input" : 0,
"baseline_delay" : 5,
"diag_channel_input" : 0,
"qi_config" : 268377856,
"qi_delay" : 0,
"qi_pulse_width" : 0,
"external_gate_width" : 32768
}
}
},
"daq" : "@local::ssp_standard",
"fhicl_pound_include_1" : "ssp_expert_run_options.fcl",
"fhicl_pound_include_2" : "user_run_options.fcl",
"ssp_standard" : "@local::daq",
"ssp01_standard" : "@local::ssp_standard",
"ssp01_standard.fragment_receiver.fragment_id" : "123",
"ssp01_standard.fragment_receiver.board_id" : 0,
"ssp01_standard.fragment_receiver.board_ip" : "192.168.1.109",
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : 1,
"ssp02_standard" : "@local::ssp_standard",
"ssp02_standard.fragment_receiver.fragment_id" : 1,
"ssp02_standard.fragment_receiver.board_id" : 1,
"ssp02_standard.fragment_receiver.board_ip" : "192.168.1.117",
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : 2,
"ssp03_standard" : "@local::ssp_standard",
"ssp03_standard.fragment_receiver.fragment_id" : 2,
"ssp03_standard.fragment_receiver.board_id" : 2,
"ssp03_standard.fragment_receiver.board_ip" : "192.168.1.113",
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : 3,
"ssp04_standard" : "@local::ssp_standard",
"ssp04_standard.fragment_receiver.fragment_id" : 3,
"ssp04_standard.fragment_receiver.board_id" : 3,
"ssp04_standard.fragment_receiver.board_ip" : "192.168.1.110",
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : 4,
"ssp05_standard" : "@local::ssp_standard",
"ssp05_standard.fragment_receiver.fragment_id" : 4,
"ssp05_standard.fragment_receiver.board_id" : 4,
"ssp05_standard.fragment_receiver.board_ip" : "192.168.1.114",
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : 5,
"ssp06_standard" : "@local::ssp_standard",
"ssp06_standard.fragment_receiver.fragment_id" : 5,
"ssp06_standard.fragment_receiver.board_id" : 5,
"ssp06_standard.fragment_receiver.board_ip" : "192.168.1.106",
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : 6,
"ssp07_standard" : "@local::ssp_standard",
"ssp07_standard.fragment_receiver.fragment_id" : 6,
"ssp07_standard.fragment_receiver.board_id" : 6,
"ssp07_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : 7,
"ssp08_standard" : "@local::ssp_standard",
"ssp08_standard.fragment_receiver.fragment_id" : 7,
"ssp08_standard.fragment_receiver.board_id" : 7,
"ssp08_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : 8
},
"main" : {

}
},
"metadata" : {
09-16 14:14:14.475092  1 15 store_configuration: insert_payload=<{"document":{
"document" : {
"data" : {
"prolog" : {
"fhicl_pound_include_0" : "metrics.fcl",
"ssp_standard" : {
"metrics" : "@local::metrics",
"max_fragment_size_words" : 262144,
"fragment_receiver" : {
"mpi_buffer_count" : 16,
"mpi_sync_interval" : 24000,
"first_event_builder_rank" : -1,
"event_builder_count" : -1,
"generator" : "SSP",
"fragment_type" : "SSP",
"interface_type" : 1,
"verbosity" : 3,
"DAQConfig" : {
"MillisliceLength" : 10000000,
"MillisliceOverlap" : 1000000,
"UseExternalTimestamp" : 1,
"StartOnNOvASync" : 1,
"EmptyWriteDelay" : 1000000,
"HardwareClockRate" : 64
},
"HardwareConfig" : {
"eventDataInterfaceSelect" : 1,
"ChannelControl" : {
"ExtTriggerMode" : 1,
"LEDTrigger" : 0,
"TimestampRate" : 7
},
"ALL_channel_control" : 1,
"ALL_led_threshold" : 100,
"trigger_input_delay" : 55,
"dsp_clock_control" : 19,
"ALL_readout_window" : 700,
"ALL_readout_pretrigger" : 50,
"ALL_cfd_parameters" : 6144,
"ALL_p_window" : 32,
"ALL_i2_window" : 500,
"ALL_m1_window" : 10,
"ALL_m2_window" : 10,
"ALL_d_window" : 20,
"ALL_i1_window" : 500,
"ALL_disc_width" : 10,
"ALL_baseline_start" : 0,
"ALL_bias_config" : 265488,
"c2c_control" : 7,
"c2c_master_intr_control" : 0,
"comm_clock_control" : 1,
"comm_led_config" : 0,
"comm_led_input" : 0,
"qi_dac_config" : 0,
"qi_dac_control" : 1,
"mon_config" : 1241088,
"mon_select" : 16776960,
"mon_gpio" : 0,
"mon_control" : 65537,
"c2c_slave_intr_control" : 0,
"gpio_output_width" : 4096,
"front_panel_config" : 4369,
"dsp_led_config" : 0,
"dsp_led_input" : 0,
"baseline_delay" : 5,
"diag_channel_input" : 0,
"qi_config" : 268377856,
"qi_delay" : 0,
"qi_pulse_width" : 0,
"external_gate_width" : 32768
}
}
},
"daq" : "@local::ssp_standard",
"fhicl_pound_include_1" : "ssp_expert_run_options.fcl",
"fhicl_pound_include_2" : "user_run_options.fcl",
"ssp_standard" : "@local::daq",
"ssp01_standard" : "@local::ssp_standard",
"ssp01_standard.fragment_receiver.fragment_id" : "123",
"ssp01_standard.fragment_receiver.board_id" : 0,
"ssp01_standard.fragment_receiver.board_ip" : "192.168.1.109",
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : 1,
"ssp02_standard" : "@local::ssp_standard",
"ssp02_standard.fragment_receiver.fragment_id" : 1,
"ssp02_standard.fragment_receiver.board_id" : 1,
"ssp02_standard.fragment_receiver.board_ip" : "192.168.1.117",
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : 2,
"ssp03_standard" : "@local::ssp_standard",
"ssp03_standard.fragment_receiver.fragment_id" : 2,
"ssp03_standard.fragment_receiver.board_id" : 2,
"ssp03_standard.fragment_receiver.board_ip" : "192.168.1.113",
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : 3,
"ssp04_standard" : "@local::ssp_standard",
"ssp04_standard.fragment_receiver.fragment_id" : 3,
"ssp04_standard.fragment_receiver.board_id" : 3,
"ssp04_standard.fragment_receiver.board_ip" : "192.168.1.110",
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : 4,
"ssp05_standard" : "@local::ssp_standard",
"ssp05_standard.fragment_receiver.fragment_id" : 4,
"ssp05_standard.fragment_receiver.board_id" : 4,
"ssp05_standard.fragment_receiver.board_ip" : "192.168.1.114",
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : 5,
"ssp06_standard" : "@local::ssp_standard",
"ssp06_standard.fragment_receiver.fragment_id" : 5,
"ssp06_standard.fragment_receiver.board_id" : 5,
"ssp06_standard.fragment_receiver.board_ip" : "192.168.1.106",
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : 6,
"ssp07_standard" : "@local::ssp_standard",
"ssp07_standard.fragment_receiver.fragment_id" : 6,
"ssp07_standard.fragment_receiver.board_id" : 6,
"ssp07_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : 7,
"ssp08_standard" : "@local::ssp_standard",
"ssp08_standard.fragment_receiver.fragment_id" : 7,
"ssp08_standard.fragment_receiver.board_id" : 7,
"ssp08_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : 8
},
"main" : {

}
},
09-16 14:14:14.475332  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:14:14.475352  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {
"fhicl_pound_include_0" : "metrics.fcl",
"ssp_standard" : {
"metrics" : "@local::metrics",
"max_fragment_size_words" : 262144,
"fragment_receiver" : {
"mpi_buffer_count" : 16,
"mpi_sync_interval" : 24000,
"first_event_builder_rank" : -1,
"event_builder_count" : -1,
"generator" : "SSP",
"fragment_type" : "SSP",
"interface_type" : 1,
"verbosity" : 3,
"DAQConfig" : {
"MillisliceLength" : 10000000,
"MillisliceOverlap" : 1000000,
"UseExternalTimestamp" : 1,
"StartOnNOvASync" : 1,
"EmptyWriteDelay" : 1000000,
"HardwareClockRate" : 64
},
"HardwareConfig" : {
"eventDataInterfaceSelect" : 1,
"ChannelControl" : {
"ExtTriggerMode" : 1,
"LEDTrigger" : 0,
"TimestampRate" : 7
},
"ALL_channel_control" : 1,
"ALL_led_threshold" : 100,
"trigger_input_delay" : 55,
"dsp_clock_control" : 19,
"ALL_readout_window" : 700,
"ALL_readout_pretrigger" : 50,
"ALL_cfd_parameters" : 6144,
"ALL_p_window" : 32,
"ALL_i2_window" : 500,
"ALL_m1_window" : 10,
"ALL_m2_window" : 10,
"ALL_d_window" : 20,
"ALL_i1_window" : 500,
"ALL_disc_width" : 10,
"ALL_baseline_start" : 0,
"ALL_bias_config" : 265488,
"c2c_control" : 7,
"c2c_master_intr_control" : 0,
"comm_clock_control" : 1,
"comm_led_config" : 0,
"comm_led_input" : 0,
"qi_dac_config" : 0,
"qi_dac_control" : 1,
"mon_config" : 1241088,
"mon_select" : 16776960,
"mon_gpio" : 0,
"mon_control" : 65537,
"c2c_slave_intr_control" : 0,
"gpio_output_width" : 4096,
"front_panel_config" : 4369,
"dsp_led_config" : 0,
"dsp_led_input" : 0,
"baseline_delay" : 5,
"diag_channel_input" : 0,
"qi_config" : 268377856,
"qi_delay" : 0,
"qi_pulse_width" : 0,
"external_gate_width" : 32768
}
}
},
"daq" : "@local::ssp_standard",
"fhicl_pound_include_1" : "ssp_expert_run_options.fcl",
"fhicl_pound_include_2" : "user_run_options.fcl",
"ssp_standard" : "@local::daq",
"ssp01_standard" : "@local::ssp_standard",
"ssp01_standard.fragment_receiver.fragment_id" : "123",
"ssp01_standard.fragment_receiver.board_id" : 0,
"ssp01_standard.fragment_receiver.board_ip" : "192.168.1.109",
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : 1,
"ssp02_standard" : "@local::ssp_standard",
"ssp02_standard.fragment_receiver.fragment_id" : 1,
"ssp02_standard.fragment_receiver.board_id" : 1,
"ssp02_standard.fragment_receiver.board_ip" : "192.168.1.117",
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : 2,
"ssp03_standard" : "@local::ssp_standard",
"ssp03_standard.fragment_receiver.fragment_id" : 2,
"ssp03_standard.fragment_receiver.board_id" : 2,
"ssp03_standard.fragment_receiver.board_ip" : "192.168.1.113",
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : 3,
"ssp04_standard" : "@local::ssp_standard",
"ssp04_standard.fragment_receiver.fragment_id" : 3,
"ssp04_standard.fragment_receiver.board_id" : 3,
"ssp04_standard.fragment_receiver.board_ip" : "192.168.1.110",
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : 4,
"ssp05_standard" : "@local::ssp_standard",
"ssp05_standard.fragment_receiver.fragment_id" : 4,
"ssp05_standard.fragment_receiver.board_id" : 4,
"ssp05_standard.fragment_receiver.board_ip" : "192.168.1.114",
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : 5,
"ssp06_standard" : "@local::ssp_standard",
"ssp06_standard.fragment_receiver.fragment_id" : 5,
"ssp06_standard.fragment_receiver.board_id" : 5,
"ssp06_standard.fragment_receiver.board_ip" : "192.168.1.106",
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : 6,
"ssp07_standard" : "@local::ssp_standard",
"ssp07_standard.fragment_receiver.fragment_id" : 6,
"ssp07_standard.fragment_receiver.board_id" : 6,
"ssp07_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : 7,
"ssp08_standard" : "@local::ssp_standard",
"ssp08_standard.fragment_receiver.fragment_id" : 7,
"ssp08_standard.fragment_receiver.board_id" : 7,
"ssp08_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : 8
},
"ma
09-16 14:14:14.523753  1 12 StorageProvider::FileSystemDB generate_oid=aaa030ed9a7947159e9907a3
09-16 14:14:14.566295  1  4 StorageProvider::FileSystemDB::store() using generated oid=<aaa030ed9a7947159e9907a3>.
09-16 14:14:14.566369  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>.
09-16 14:14:14.566412  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:14.566467  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/>
09-16 14:14:14.566654  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/aaa030ed9a7947159e9907a3.json>.
09-16 14:14:14.717308  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:14:14.717319  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testLoadStore/index.json>.
09-16 14:14:14.717379  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
],
"versionD71444" : [
"334af0790d3047e689b83901"
],
"versionZ71444" : [
"6bd4cd9b7fac49ccb1ad9297"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"testConfigA03172016-174859" : [
"6bd4cd9b7fac49ccb1ad9297"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"6bd4cd9b7fac49ccb1ad9297"
]
}
}>
09-16 14:14:14.718316  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:14:14.718333  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {
                    "fhicl_pound_include_0" : "metrics.fcl", 
                    "ssp_standard" : {
                        "metrics" : "@local::metrics", 
                        "max_fragment_size_words" : 262144, 
                        "fragment_receiver" : {
                            "mpi_buffer_count" : 16, 
                            "mpi_sync_interval" : 24000, 
                            "first_event_builder_rank" : -1, 
                            "event_builder_count" : -1, 
                            "generator" : "SSP", 
                            "fragment_type" : "SSP", 
                            "interface_type" : 1, 
                            "verbosity" : 3, 
                            "DAQConfig" : {
                                "MillisliceLength" : 10000000, 
                                "MillisliceOverlap" : 1000000, 
                                "UseExternalTimestamp" : 1, 
                                "StartOnNOvASync" : 1, 
                                "EmptyWriteDelay" : 1000000, 
                                "HardwareClockRate" : 64
                            }, 
                            "HardwareConfig" : {
                                "eventDataInterfaceSelect" : 1, 
                                "ChannelControl" : {
                                    "ExtTriggerMode" : 1, 
                                    "LEDTrigger" : 0, 
                                    "TimestampRate" : 7
                                }, 
                                "ALL_channel_control" : 1, 
                                "ALL_led_threshold" : 100, 
                                "trigger_input_delay" : 55, 
                                "dsp_clock_control" : 19, 
                                "ALL_readout_window" : 700, 
                                "ALL_readout_pretrigger" : 50, 
                                "ALL_cfd_parameters" : 6144, 
                                "ALL_p_window" : 32, 
                                "ALL_i2_window" : 500, 
                                "ALL_m1_window" : 10, 
                                "ALL_m2_window" : 10, 
                                "ALL_d_window" : 20, 
                                "ALL_i1_window" : 500, 
                                "ALL_disc_width" : 10, 
                                "ALL_baseline_start" : 0, 
                                "ALL_bias_config" : 265488, 
                                "c2c_control" : 7, 
                                "c2c_master_intr_control" : 0, 
                                "comm_clock_control" : 1, 
                                "comm_led_config" : 0, 
                                "comm_led_input" : 0, 
                                "qi_dac_config" : 0, 
                                "qi_dac_control" : 1, 
                                "mon_config" : 1241088, 
                                "mon_select" : 16776960, 
                                "mon_gpio" : 0, 
                                "mon_control" : 65537, 
                                "c2c_slave_intr_control" : 0, 
                                "gpio_output_width" : 4096, 
                                "front_panel_config" : 4369, 
                                "dsp_led_config" : 0, 
                                "dsp_led_input" : 0, 
                                "baseline_delay" : 5, 
                                "diag_channel_input" : 0, 
                                "qi_config" : 268377856, 
                                "qi_delay" : 0, 
                                "qi_pulse_width" : 0, 
                                "external_gate_width" : 32768
                            }
                        }
                    }, 
                    "daq" : "@local::ssp_standard", 
                    "fhicl_pound_include_1" : "ssp_expert_run_options.fcl", 
                    "
09-16 14:14:14.718461  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<aaa030ed9a7947159e9907a3>.
09-16 14:14:14.740907  1  5 StorageProvider::FileSystemDB::index::addDocument() found 9 keys.
09-16 14:14:14.740922  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:14:14.740926  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<aaa030ed9a7947159e9907a3>.
09-16 14:14:14.740930  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<versionZ71444>.
09-16 14:14:14.741037  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() begin
09-16 14:14:14.741043  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args ouid=<aaa030ed9a7947159e9907a3>.
09-16 14:14:14.741046  1  7 StorageProvider::FileSystemDB::index::_addConfiguration() args configuration=<testConfigA03172016-174859>.
09-16 14:14:14.741063  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:14:14.741067  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<aaa030ed9a7947159e9907a3>.
09-16 14:14:14.741070  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<ENTITY-testLoadStore>.
09-16 14:14:14.741159  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:14:14.741800  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"versionA71444" : [
"fa8f79db31c54c68930e2ce9"
],
"versionB71444" : [
"46526bb7cb9043ccbdd2ce5d"
],
"versionC71444" : [
"19cf4d709ca646888a7aed37"
],
"versionD71444" : [
"334af0790d3047e689b83901"
],
"versionZ71444" : [
"6bd4cd9b7fac49ccb1ad9297",
"aaa030ed9a7947159e9907a3"
]
},
"configurations.name" : {
"notprovided" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"testConfigA03172016-174859" : [
"6bd4cd9b7fac49ccb1ad9297",
"aaa030ed9a7947159e9907a3"
]
},
"configurable_entity.name" : {
"notprovided" : [
"46526bb7cb9043ccbdd2ce5d",
"fa8f79db31c54c68930e2ce9"
],
"ENTITY-testLoadStore" : [
"19cf4d709ca646888a7aed37",
"334af0790d3047e689b83901",
"6bd4cd9b7fac49ccb1ad9297",
"aaa030ed9a7947159e9907a3"
]
}
}>
09-16 14:14:14.741909  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:14:14.742019  1 15 store_configuration: end
Parsed options:
{
"filter" : {
"version" : "versionZ71444",
"configurable_entity.name" : "ENTITY-testLoadStore",
"configurations.name" : "testConfigA03172016-174859"
},
"dbprovider" : "filesystem",
"operation" : "store",
"collection" : "testLoadStore",
"dataformat" : "gui",
"configuration" : "testConfigA03172016-174859"
}
Running test:<store>
returned:
{
"document" : {
"data" : {
"prolog" : {
"fhicl_pound_include_0" : "metrics.fcl",
"ssp_standard" : {
"metrics" : "@local::metrics",
"max_fragment_size_words" : 262144,
"fragment_receiver" : {
"mpi_buffer_count" : 16,
"mpi_sync_interval" : 24000,
"first_event_builder_rank" : -1,
"event_builder_count" : -1,
"generator" : "SSP",
"fragment_type" : "SSP",
"interface_type" : 1,
"verbosity" : 3,
"DAQConfig" : {
"MillisliceLength" : 10000000,
"MillisliceOverlap" : 1000000,
"UseExternalTimestamp" : 1,
"StartOnNOvASync" : 1,
"EmptyWriteDelay" : 1000000,
"HardwareClockRate" : 64
},
"HardwareConfig" : {
"eventDataInterfaceSelect" : 1,
"ChannelControl" : {
"ExtTriggerMode" : 1,
"LEDTrigger" : 0,
"TimestampRate" : 7
},
"ALL_channel_control" : 1,
"ALL_led_threshold" : 100,
"trigger_input_delay" : 55,
"dsp_clock_control" : 19,
"ALL_readout_window" : 700,
"ALL_readout_pretrigger" : 50,
"ALL_cfd_parameters" : 6144,
"ALL_p_window" : 32,
"ALL_i2_window" : 500,
"ALL_m1_window" : 10,
"ALL_m2_window" : 10,
"ALL_d_window" : 20,
"ALL_i1_window" : 500,
"ALL_disc_width" : 10,
"ALL_baseline_start" : 0,
"ALL_bias_config" : 265488,
"c2c_control" : 7,
"c2c_master_intr_control" : 0,
"comm_clock_control" : 1,
"comm_led_config" : 0,
"comm_led_input" : 0,
"qi_dac_config" : 0,
"qi_dac_control" : 1,
"mon_config" : 1241088,
"mon_select" : 16776960,
"mon_gpio" : 0,
"mon_control" : 65537,
"c2c_slave_intr_control" : 0,
"gpio_output_width" : 4096,
"front_panel_config" : 4369,
"dsp_led_config" : 0,
"dsp_led_input" : 0,
"baseline_delay" : 5,
"diag_channel_input" : 0,
"qi_config" : 268377856,
"qi_delay" : 0,
"qi_pulse_width" : 0,
"external_gate_width" : 32768
}
}
},
"daq" : "@local::ssp_standard",
"fhicl_pound_include_1" : "ssp_expert_run_options.fcl",
"fhicl_pound_include_2" : "user_run_options.fcl",
"ssp_standard" : "@local::daq",
"ssp01_standard" : "@local::ssp_standard",
"ssp01_standard.fragment_receiver.fragment_id" : "123",
"ssp01_standard.fragment_receiver.board_id" : 0,
"ssp01_standard.fragment_receiver.board_ip" : "192.168.1.109",
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : 1,
"ssp02_standard" : "@local::ssp_standard",
"ssp02_standard.fragment_receiver.fragment_id" : 1,
"ssp02_standard.fragment_receiver.board_id" : 1,
"ssp02_standard.fragment_receiver.board_ip" : "192.168.1.117",
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : 2,
"ssp03_standard" : "@local::ssp_standard",
"ssp03_standard.fragment_receiver.fragment_id" : 2,
"ssp03_standard.fragment_receiver.board_id" : 2,
"ssp03_standard.fragment_receiver.board_ip" : "192.168.1.113",
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : 3,
"ssp04_standard" : "@local::ssp_standard",
"ssp04_standard.fragment_receiver.fragment_id" : 3,
"ssp04_standard.fragment_receiver.board_id" : 3,
"ssp04_standard.fragment_receiver.board_ip" : "192.168.1.110",
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : 4,
"ssp05_standard" : "@local::ssp_standard",
"ssp05_standard.fragment_receiver.fragment_id" : 4,
"ssp05_standard.fragment_receiver.board_id" : 4,
"ssp05_standard.fragment_receiver.board_ip" : "192.168.1.114",
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : 5,
"ssp06_standard" : "@local::ssp_standard",
"ssp06_standard.fragment_receiver.fragment_id" : 5,
"ssp06_standard.fragment_receiver.board_id" : 5,
"ssp06_standard.fragment_receiver.board_ip" : "192.168.1.106",
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : 6,
"ssp07_standard" : "@local::ssp_standard",
"ssp07_standard.fragment_receiver.fragment_id" : 6,
"ssp07_standard.fragment_receiver.board_id" : 6,
"ssp07_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : 7,
"ssp08_standard" : "@local::ssp_standard",
"ssp08_standard.fragment_receiver.fragment_id" : 7,
"ssp08_standard.fragment_receiver.board_id" : 7,
"ssp08_standard.fragment_receiver.board_ip" : "192.168.1.105",
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : 8
},
"main" : {

}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {
"fhicl_pound_include_0" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp_standard" : {
"type" : "table",
"comment" : " ",
"children" : {
"metrics" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver" : {
"type" : "table",
"comment" : " ",
"children" : {
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_sync_interval" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_event_builder_rank" : {
"type" : "number",
"comment" : "# These two variables will be calculated by DAQInterface...",
"annotation" : " "
},
"event_builder_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"generator" : {
"type" : "string",
"comment" : " ",
"annotation" : "###Don^t edit these lines"
},
"fragment_type" : {
"type" : "string",
"comment" : "###Don^t edit these lines",
"annotation" : "###"
},
"interface_type" : {
"type" : "number",
"comment" : " ",
"annotation" : "### 0=USB, 1=Ethernet, 2=Emulated"
},
"verbosity" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=silent, no errors or warnings."
},
"DAQConfig" : {
"type" : "table",
"comment" : " ",
"children" : {
"MillisliceLength" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Amount of time to assign to a single fragment in clock ticks"
},
"MillisliceOverlap" : {
"type" : "number",
"comment" : "#Amount of time to assign to a single fragment in clock ticks",
"annotation" : "#Amount at start of next fragment to also put into current fragment"
},
"UseExternalTimestamp" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=Use internal timestamp to split events into millislices, 1=Use NOvA timestamp."
},
"StartOnNOvASync" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Tell SSP to wait for sync pulse from NOvA timing unit before taking data."
},
"EmptyWriteDelay" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Time in us that DAQ will wait for SSP events, before starting to build and send"
},
"HardwareClockRate" : {
"type" : "number",
"comment" : " ",
"annotation" : "#in MHz. Must be 64 for NOvA timestamping, 150 for internal."
}
}
},
"HardwareConfig" : {
"type" : "table",
"comment" : " ",
"children" : {
"eventDataInterfaceSelect" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=USB, 1=Ethernet"
},
"ChannelControl" : {
"type" : "table",
"comment" : " ",
"children" : {
"ExtTriggerMode" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=no external trigger"
},
"LEDTrigger" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=no leading edge trigger"
},
"TimestampRate" : {
"type" : "number",
"comment" : " ",
"annotation" : "#0=292.969kHz"
}
}
},
"ALL_channel_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_led_threshold" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Leading edge trigger threshold in ADC"
},
"trigger_input_delay" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Delay to apply to front panel trigger."
},
"dsp_clock_control" : {
"type" : "number",
"comment" : "#Use NOvA TDU",
"annotation" : "# Bit |  Meaning "
},
"ALL_readout_window" : {
"type" : "number",
"comment" : " ",
"annotation" : "#Number of ADC samples to read out"
},
"ALL_readout_pretrigger" : {
"type" : "number",
"comment" : "#Number of ADC samples to read out",
"annotation" : "#Of which before trigger time"
},
"ALL_cfd_parameters" : {
"type" : "number",
"comment" : "#Leave alone unless you know what you^re doing!",
"annotation" : " "
},
"ALL_p_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_i2_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_m1_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_m2_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_d_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_i1_window" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_disc_width" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_baseline_start" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ALL_bias_config" : {
"type" : "number",
"comment" : "#ALL_bias_config:           0x00040E21 # 26.5V",
"annotation" : "# 24.5V"
},
"c2c_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"c2c_master_intr_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"comm_clock_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"comm_led_config" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"comm_led_input" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_dac_config" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_dac_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mon_config" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mon_select" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mon_gpio" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mon_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"c2c_slave_intr_control" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"gpio_output_width" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"front_panel_config" : {
"type" : "number",
"comment" : " ",
"annotation" : "# standard config?"
},
"dsp_led_config" : {
"type" : "number",
"comment" : "# standard config?",
"annotation" : " "
},
"dsp_led_input" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"baseline_delay" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"diag_channel_input" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_config" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_delay" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"qi_pulse_width" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"external_gate_width" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"daq" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"fhicl_pound_include_1" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"fhicl_pound_include_2" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp01_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp02_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp03_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp04_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp05_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp06_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp07_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard.fragment_receiver.fragment_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard.fragment_receiver.board_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard.fragment_receiver.board_ip" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"ssp08_standard.fragment_receiver.HardwareConfig.module_id" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
}
}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {

}
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
],
"converted" : {

}
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "demoVersion002",
"configurations" : [
{
"name" : "demoConfig001",
"assigned" : "Thu Sep  8 19:38:10 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Thu Sep  8 19:38:10 2016"
},
{
"setVersion" : "Thu Sep  8 19:38:10 2016"
},
{
"setConfigurableEntity" : "Thu Sep  8 19:38:10 2016"
}
]
},
"configurable_entity" : {
"name" : "notprovided"
},
"_id" : {
"_oid" : "15781635e2564d60ac331274"
}
}
<end of output>
Test time =   0.93 sec
----------------------------------------------------------
Test Passed.
"LoadStore_store_filesystem_021_t" end time: Sep 16 14:14 CDT
"LoadStore_store_filesystem_021_t" time elapsed: 00:00:00
----------------------------------------------------------

