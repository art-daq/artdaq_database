diff --git a/fhiclcpp/extended_value.h b/fhiclcpp/extended_value.h
index 1e8eed8..423f609 100644
--- a/fhiclcpp/extended_value.h
+++ b/fhiclcpp/extended_value.h
@@ -10,11 +10,13 @@
 #include "fhiclcpp/Protection.h"
 #include "fhiclcpp/fwd.h"
 #include "stdmap_shims.h"
+#include "fhiclcpp/exception.h"
 
 #include <any>
 #include <map>
 #include <string>
 #include <vector>
+#include <utility>
 
 // ----------------------------------------------------------------------
 
@@ -32,6 +34,68 @@ namespace fhicl {
   };
 }
 
+
+namespace fhicl {
+using raw_value_t = std::string;
+
+namespace detail {
+using fhicl::exception;
+using fhicl::error;
+auto rtrim_whitespace = [](auto const &str) {
+  constexpr auto single_quote = '\'';
+  constexpr auto double_quote = '\"';
+  constexpr auto back_slash = '\\';
+
+  constexpr auto double_slashes = "//";
+  constexpr auto space_char = ' ';
+  constexpr auto skip_chars = "# \n\r\t";
+
+  if (str.empty())
+    return str;
+
+  if (str[0] == single_quote) {
+    auto pos = str.find(single_quote, 1);
+
+    if (pos == std::string::npos)
+      throw exception(cant_find, "missing a closing single quote in str=" + str);
+
+    return str.substr(0, pos + 1);
+  }
+
+  if (str[0] == double_quote) {
+    auto pos = str.find(double_quote, 1);
+
+    while (str[pos -1]==back_slash) pos = str.find(double_quote, pos+1);
+
+    if (pos == std::string::npos)
+      throw exception(cant_find, "missing a closing double quote in str=" + str);
+
+    return str.substr(0, pos + 1);
+  }
+
+  auto pos = str.find(double_slashes);
+
+  if (pos == std::string::npos) {
+    pos = str.find_first_of(skip_chars);
+
+    if (pos == std::string::npos)
+      return str;
+  } else {
+    auto pos1 = str.find_first_of(skip_chars);
+
+    if (pos1 != std::string::npos)
+      pos = std::min(pos, pos1);
+  }
+
+  while (str[--pos] == space_char && pos != 0)
+    ;
+
+  return str.substr(0, pos + 1);
+};
+
+} // namespace detail
+} // namespace fhicl
+
 // ----------------------------------------------------------------------
 
 class fhicl::extended_value {
@@ -50,16 +114,47 @@ public:
                  std::string src = {})
     : in_prolog{in_prolog}
     , tag{tag}
-    , value{value}
+    , value    {value}
+    , raw_value{}
     , src_info{move(src)}
     , protection{protection}
   {}
 
   extended_value(bool const in_prolog,
                  value_tag const tag,
-                 std::any const value,
-                 std::string src = {})
-    : in_prolog{in_prolog}, tag{tag}, value{value}, src_info{move(src)}
+                 boost::any const value,
+                 std::string const& src = {})
+    : in_prolog{in_prolog}
+    , tag{tag}
+    , value    {value}
+    , raw_value{}
+    , src_info{move(src)}
+  {}
+
+  extended_value(bool const in_prolog,
+                 value_tag const tag,
+                 boost::any const value,
+                 raw_value_t raw_value,
+                 Protection const protection,
+                 std::string const& src = {})
+    : in_prolog{in_prolog}
+    , tag{tag}
+    , value    {value}
+    , raw_value{detail::rtrim_whitespace(std::move(raw_value))}
+    , src_info{move(src)}
+    , protection{protection}
+  {}
+
+  extended_value(bool const in_prolog,
+                 value_tag const tag,
+                 boost::any const value,
+                 raw_value_t raw_value,
+                 std::string const& src = {})
+    : in_prolog{in_prolog}
+    , tag{tag}
+    , value    {value}
+    , raw_value{detail::rtrim_whitespace(std::move(raw_value))}
+    , src_info{move(src)}
   {}
 
   bool
@@ -88,6 +183,7 @@ public:
   bool in_prolog{false};
   value_tag tag{UNKNOWN};
   std::any value{};
+  std::string raw_value{};
   std::string src_info{};
   Protection protection{Protection::NONE};
 
diff --git a/fhiclcpp/parse.cc b/fhiclcpp/parse.cc
index 951532e..b6e7f17 100644
--- a/fhiclcpp/parse.cc
+++ b/fhiclcpp/parse.cc
@@ -135,7 +135,7 @@ namespace {
     }
 
     v.protection = static_cast<Protection>(m);
-    check_protection(v, name);
+        check_protection(v, name);
   }
 
   std::string
@@ -193,9 +193,10 @@ namespace {
             value_tag const t,
             std::any const v,
             FwdIter const pos,
+            FwdIter const last,
             cet::includer const& s)
   {
-    return extended_value{b, t, v, s.src_whereis(pos)};
+    return extended_value{b, t, v,raw_value_t(pos,last),s.src_whereis(pos)};
   }
 
   complex_t
@@ -242,13 +243,13 @@ namespace {
              intermediate_table& t,
              FwdIter const pos,
              cet::includer const& s) try {
-    set_protection(name, m, value);
-    t.insert(name, value);
-  }
-  catch (fhicl::exception& e) {
+      set_protection(name, m, value);
+      t.insert(name, value);
+    }
+    catch (fhicl::exception& e) {
     throw fhicl::exception(fhicl::error::parse_error, "Error in assignment:", e)
-      << " at " << s.highlighted_whereis(pos) << '\n';
-  }
+        << " at " << s.highlighted_whereis(pos) << '\n';
+    }
 
   template <typename FwdIter>
   void
@@ -257,13 +258,13 @@ namespace {
             bool const in_prolog,
             FwdIter const pos,
             cet::includer const& s) try {
-    t.erase(name, in_prolog);
-  }
-  catch (fhicl::exception& e) {
-    throw fhicl::exception(
-      fhicl::error::parse_error, "Error in erase attempt:", e)
-      << " at " << s.highlighted_whereis(pos) << '\n';
-  }
+      t.erase(name, in_prolog);
+    }
+    catch (fhicl::exception& e) {
+      throw fhicl::exception(
+        fhicl::error::parse_error, "Error in erase attempt:", e)
+        << " at " << s.highlighted_whereis(pos) << '\n';
+    }
 
   void
   map_insert(std::string const& name,
@@ -283,13 +284,13 @@ namespace {
           << i->second.pretty_src_info() << ")\n";
       }
       switch (i->second.protection) {
-      case Protection::NONE:
-        break;
-      case Protection::PROTECT_IGNORE:
-        // Do not overwrite protected binding.
-        return;
-      case Protection::PROTECT_ERROR:
-        throw fhicl::exception(fhicl::error::protection_violation)
+        case Protection::NONE:
+          break;
+        case Protection::PROTECT_IGNORE:
+          // Do not overwrite protected binding.
+          return;
+        case Protection::PROTECT_ERROR:
+          throw fhicl::exception(fhicl::error::protection_violation)
           << '"' << name << "\" is protected on " << i->second.pretty_src_info()
           << '\n';
       }
@@ -305,12 +306,12 @@ namespace {
                  table_t& t,
                  FwdIter const pos,
                  cet::includer const& s) try {
-    map_insert(name, m, value, t);
-  }
-  catch (fhicl::exception& e) {
+      map_insert(name, m, value, t);
+    }
+    catch (fhicl::exception& e) {
     throw fhicl::exception(fhicl::error::parse_error, "Error in assignment:", e)
-      << " at " << s.highlighted_whereis(pos) << '\n';
-  }
+        << " at " << s.highlighted_whereis(pos) << '\n';
+    }
 
   template <typename FwdIter>
   void
@@ -342,16 +343,16 @@ namespace {
             << element.pretty_src_info() << ")\n";
         }
         switch (element.protection) {
-        case Protection::NONE:
-          break;
-        case Protection::PROTECT_IGNORE:
-          continue;
-        case Protection::PROTECT_ERROR:
-          throw fhicl::exception(fhicl::error::protection_violation)
+          case Protection::NONE:
+            break;
+          case Protection::PROTECT_IGNORE:
+            continue;
+          case Protection::PROTECT_ERROR:
+            throw fhicl::exception(fhicl::error::protection_violation)
             << "@table::" << name << ": inserting name " << name
-            << "would violate protection on existing item"
-            << "\n(previous definition on " << element.pretty_src_info()
-            << ")\n";
+              << "would violate protection on existing item"
+              << "\n(previous definition on " << element.pretty_src_info()
+              << ")\n";
         }
       }
       element = value;
@@ -422,16 +423,16 @@ namespace {
     if (i == t.end())
       return;
 
-    switch (i->second.protection) {
-    case Protection::NONE:
-      t.erase(name);
-    case Protection::PROTECT_IGNORE:
-      break;
-    case Protection::PROTECT_ERROR:
-      throw fhicl::exception(fhicl::error::protection_violation)
-        << "Unable to erase " << name << " due to protection.\n";
+      switch (i->second.protection) {
+        case Protection::NONE:
+          t.erase(name);
+        case Protection::PROTECT_IGNORE:
+          break;
+        case Protection::PROTECT_ERROR:
+          throw fhicl::exception(fhicl::error::protection_violation)
+            << "Unable to erase " << name << " due to protection.\n";
+      }
     }
-  }
 
   template <typename FwdIter>
   void
@@ -439,13 +440,13 @@ namespace {
                 table_t& t,
                 FwdIter pos,
                 cet::includer const& s) try {
-    map_erase(name, t);
-  }
-  catch (fhicl::exception& e) {
-    throw fhicl::exception(
-      fhicl::error::parse_error, "Error in erase attempt:", e)
-      << " at " << s.highlighted_whereis(pos) << '\n';
-  }
+      map_erase(name, t);
+    }
+    catch (fhicl::exception& e) {
+      throw fhicl::exception(
+        fhicl::error::parse_error, "Error in erase attempt:", e)
+        << " at " << s.highlighted_whereis(pos) << '\n';
+    }
 
   // ----------------------------------------------------------------------
 
@@ -646,66 +647,19 @@ namespace {
 #pragma clang diagnostic ignored "-Wunsequenced"
 #endif
     value =
-      ((iter_pos >> vp.nil)
-         [_val = phx::bind(
-            &xvalue_dp<iter_t>, ref(in_prolog), NIL, qi::_2, qi::_1, ref(s))] |
-       (iter_pos >> vp.boolean)
-         [_val = phx::bind(
-            &xvalue_dp<iter_t>, ref(in_prolog), BOOL, qi::_2, qi::_1, ref(s))] |
-       (iter_pos >> vp.number)[_val = phx::bind(&xvalue_dp<iter_t>,
-                                                ref(in_prolog),
-                                                NUMBER,
-                                                qi::_2,
-                                                qi::_1,
-                                                ref(s))] |
-       (iter_pos >> vp.complex)[_val = phx::bind(&xvalue_dp<iter_t>,
-                                                 ref(in_prolog),
-                                                 COMPLEX,
-                                                 qi::_2,
-                                                 qi::_1,
-                                                 ref(s))] |
-       (iter_pos >> vp.string)[_val = phx::bind(&xvalue_dp<iter_t>,
-                                                ref(in_prolog),
-                                                STRING,
-                                                qi::_2,
-                                                qi::_1,
-                                                ref(s))] |
-       (iter_pos >> localref)[_val = phx::bind(&local_lookup<iter_t>,
-                                               qi::_2,
-                                               ref(tbl),
-                                               ref(in_prolog),
-                                               qi::_1,
-                                               ref(s))] |
-       (iter_pos >> dbref)[_val = phx::bind(&database_lookup<iter_t>,
-                                            qi::_2,
-                                            ref(tbl),
-                                            ref(in_prolog),
-                                            qi::_1,
-                                            ref(s))] |
-       (iter_pos >> vp.id)[_val = phx::bind(&xvalue_dp<iter_t>,
-                                            ref(in_prolog),
-                                            TABLEID,
-                                            qi::_2,
-                                            qi::_1,
-                                            ref(s))] |
-       (iter_pos >> sequence)[_val = phx::bind(&xvalue_dp<iter_t>,
-                                               ref(in_prolog),
-                                               SEQUENCE,
-                                               qi::_2,
-                                               qi::_1,
-                                               ref(s))] |
-       (iter_pos >> table)[_val = phx::bind(&xvalue_dp<iter_t>,
-                                            ref(in_prolog),
-                                            TABLE,
-                                            qi::_2,
-                                            qi::_1,
-                                            ref(s))] |
-       (iter_pos >> vp.catchall)[_val = phx::bind(&xvalue_dp<iter_t>,
-                                                  ref(in_prolog),
-                                                  STRING,
-                                                  qi::_2,
-                                                  qi::_1,
-                                                  ref(s))]);
+    ((iter_pos >> vp.nil >> iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), NIL     , qi::_2, qi::_1, qi::_3, ref(s)) ]     |
+     (iter_pos >> vp.boolean >> iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), BOOL    , qi::_2, qi::_1, qi::_3, ref(s)) ] |
+     (iter_pos >> vp.number >> iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), NUMBER  , qi::_2, qi::_1, qi::_3, ref(s)) ]  |
+     (iter_pos >> vp.complex >> iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), COMPLEX , qi::_2, qi::_1, qi::_3, ref(s)) ] |
+     (iter_pos >> vp.string >> iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), STRING  , qi::_2, qi::_1, qi::_3, ref(s)) ]  |
+     (iter_pos >> localref)[ _val = phx::bind(&local_lookup<iter_t>,qi::_2, ref(tbl), ref(in_prolog), qi::_1, ref(s)) ]                      |
+     (iter_pos >> dbref )  [ _val = phx::bind(&database_lookup<iter_t>,qi::_2, ref(tbl), ref(in_prolog),qi::_1, ref(s)) ]                    |
+     (iter_pos >> vp.id  >> iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), TABLEID , qi::_2, qi::_1, qi::_3, ref(s)) ]     |
+     (iter_pos >> sequence >> iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), SEQUENCE, qi::_2, qi::_1, qi::_3, ref(s)) ]   |
+     (iter_pos >> table  >>iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), TABLE   , qi::_2, qi::_1, qi::_3, ref(s)) ]      |
+     (iter_pos >> vp.catchall >> iter_pos) [ _val = phx::bind(&xvalue_dp<iter_t>, ref(in_prolog), STRING  , qi::_2, qi::_1, qi::_3, ref(s)) ]
+);
+
 #ifdef __clang__
 #pragma clang diagnostic pop
 #endif
@@ -817,14 +771,14 @@ namespace {
       return std::move(p.tbl);
     }
 
-    auto e = fhicl::exception(fhicl::parse_error, "detected at or near")
-             << s.highlighted_whereis(begin) << "\n";
-    if (unparsed.find("BEGIN_PROLOG"s) == 0ull) {
-      e << "PROLOG blocks must be both contiguous and not nested.\n";
+      auto e = fhicl::exception(fhicl::parse_error, "detected at or near")
+               << s.highlighted_whereis(begin) << "\n";
+      if (unparsed.find("BEGIN_PROLOG"s) == 0ull) {
+        e << "PROLOG blocks must be both contiguous and not nested.\n";
+      }
+      throw e;
     }
-    throw e;
   }
-}
 
 fhicl::intermediate_table
 fhicl::parse_document(std::string const& filename, cet::filepath_maker& maker)
diff --git a/fhiclcpp/parse_shims.h b/fhiclcpp/parse_shims.h
index d1f5dae..c70be82 100644
--- a/fhiclcpp/parse_shims.h
+++ b/fhiclcpp/parse_shims.h
@@ -67,9 +67,8 @@ namespace shims {
         return false;
 
       Iterator it = first;
-      while (it != last &&
-             (std::isalnum(*it) || *it == '_' || *it == ':' || *it == '@'))
-        ++it;
+
+      while (it != last && (std::isalnum(*it) || *it == '_' || *it == ':' || *it == '.' || *it == '@')) ++it;
 
       if (it != last && !maximally_munched_ass(*it))
         return false;

