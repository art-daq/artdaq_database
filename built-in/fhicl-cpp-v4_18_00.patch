diff --git a/fhiclcpp/extended_value.h b/fhiclcpp/extended_value.h
index b242991..71fcd15 100644
--- a/fhiclcpp/extended_value.h
+++ b/fhiclcpp/extended_value.h
@@ -10,6 +10,7 @@
 #include "fhiclcpp/Protection.h"
 #include "fhiclcpp/fwd.h"
 #include "fhiclcpp/stdmap_shims.h"
+#include "fhiclcpp/exception.h"
 
 #include <any>
 #include <string>
@@ -32,6 +33,68 @@ namespace fhicl {
   };
 }
 
+
+namespace fhicl {
+using raw_value_t = std::string;
+
+namespace detail {
+using fhicl::exception;
+using fhicl::error;
+inline auto rtrim_whitespace = [](auto const &str) {
+  constexpr auto single_quote = '\'';
+  constexpr auto double_quote = '\"';
+  constexpr auto back_slash = '\\';
+
+  constexpr auto double_slashes = "//";
+  constexpr auto space_char = ' ';
+  constexpr auto skip_chars = "# \n\r\t";
+
+  if (str.empty())
+    return str;
+
+  if (str[0] == single_quote) {
+    auto pos = str.find(single_quote, 1);
+
+    if (pos == std::string::npos)
+      throw exception(cant_find, "missing a closing single quote in str=" + str);
+
+    return str.substr(0, pos + 1);
+  }
+
+  if (str[0] == double_quote) {
+    auto pos = str.find(double_quote, 1);
+
+    while (str[pos -1]==back_slash) pos = str.find(double_quote, pos+1);
+
+    if (pos == std::string::npos)
+      throw exception(cant_find, "missing a closing double quote in str=" + str);
+
+    return str.substr(0, pos + 1);
+  }
+
+  auto pos = str.find(double_slashes);
+
+  if (pos == std::string::npos) {
+    pos = str.find_first_of(skip_chars);
+
+    if (pos == std::string::npos)
+      return str;
+  } else {
+    auto pos1 = str.find_first_of(skip_chars);
+
+    if (pos1 != std::string::npos)
+      pos = std::min(pos, pos1);
+  }
+
+  while (str[--pos] == space_char && pos != 0)
+    ;
+
+  return str.substr(0, pos + 1);
+};
+
+} // namespace detail
+} // namespace fhicl
+
 // ----------------------------------------------------------------------
 
 class fhicl::extended_value {
@@ -52,6 +115,7 @@ public:
     : in_prolog{in_prolog}
     , tag{tag}
     , value{value}
+    , raw_value{}
     , src_info{std::move(src)}
     , protection{protection}
   {}
@@ -59,8 +123,38 @@ public:
   extended_value(bool const in_prolog,
                  value_tag const tag,
                  std::any const value,
-                 std::string src = {})
-    : in_prolog{in_prolog}, tag{tag}, value{value}, src_info{std::move(src)}
+                 std::string const& src = {})
+    : in_prolog{in_prolog}
+    , tag{tag}
+    , value{value}
+    , raw_value{}
+    , src_info{std::move(src)}
+  {}
+
+  extended_value(bool const in_prolog,
+                 value_tag const tag,
+                 std::any const value,
+                 raw_value_t raw_value,
+                 Protection const protection,
+                 std::string const& src = {})
+    : in_prolog{in_prolog}
+    , tag{tag}
+    , value{value}
+    , raw_value{detail::rtrim_whitespace(std::move(raw_value))}
+    , src_info{std::move(src)}
+    , protection{protection}
+  {}
+
+  extended_value(bool const in_prolog,
+                 value_tag const tag,
+                 std::any const value,
+                 raw_value_t raw_value,
+                 std::string const& src = {})
+    : in_prolog{in_prolog}
+    , tag{tag}
+    , value{value}
+    , raw_value{detail::rtrim_whitespace(std::move(raw_value))}
+    , src_info{std::move(src)}
   {}
 
   bool
@@ -96,6 +190,7 @@ public:
   bool in_prolog{false};
   value_tag tag{UNKNOWN};
   std::any value{};
+  std::string raw_value{};
   std::string src_info{};
 
   // Protection corresponds to the binding of a name to a value, and
diff --git a/fhiclcpp/parse.cc b/fhiclcpp/parse.cc
index 86d3b21..24c265b 100644
--- a/fhiclcpp/parse.cc
+++ b/fhiclcpp/parse.cc
@@ -422,15 +422,15 @@ namespace {
     }
 
     extended_value
-    xvalue_(value_tag const t, std::any const v, iter_t const pos)
+    xvalue_(value_tag const t, std::any const v, iter_t const pos, iter_t const last)
     {
-      return extended_value{in_prolog, t, v, sref.src_whereis(pos)};
+      return extended_value{in_prolog, t, v, raw_value_t(pos,last), sref.src_whereis(pos)};
     }
 
     auto
     xvalue_for(value_tag const t)
     {
-      return phx::bind(&document_parser::xvalue_, this, t, qi::_2, qi::_1);
+      return phx::bind(&document_parser::xvalue_, this, t, qi::_2, qi::_1, qi::_3);
     }
 
     void
@@ -594,20 +594,20 @@ namespace {
 #pragma clang diagnostic ignored "-Wunsequenced"
 #endif
     value =
-      ((iter_pos >> vp.nil)[_val = xvalue_for(NIL)] |
-       (iter_pos >> vp.boolean)[_val = xvalue_for(BOOL)] |
-       (iter_pos >> vp.number)[_val = xvalue_for(NUMBER)] |
-       (iter_pos >> vp.complex)[_val = xvalue_for(COMPLEX)] |
-       (iter_pos >> vp.string)[_val = xvalue_for(STRING)] |
+      ((iter_pos >> vp.nil >> iter_pos)[_val = xvalue_for(NIL)] |
+       (iter_pos >> vp.boolean >> iter_pos)[_val = xvalue_for(BOOL)] |
+       (iter_pos >> vp.number >> iter_pos)[_val = xvalue_for(NUMBER)] |
+       (iter_pos >> vp.complex >> iter_pos)[_val = xvalue_for(COMPLEX)] |
+       (iter_pos >> vp.string >> iter_pos)[_val = xvalue_for(STRING)] |
        (iter_pos >>
         localref)[_val = phx::bind(
                     &document_parser::local_lookup, this, qi::_2, qi::_1)] |
        (iter_pos >> dbref)[_val = phx::bind(
                              &document_parser::database_lookup, this, qi::_1)] |
-       (iter_pos >> vp.id)[_val = xvalue_for(TABLEID)] |
-       (iter_pos >> sequence)[_val = xvalue_for(SEQUENCE)] |
-       (iter_pos >> table)[_val = xvalue_for(TABLE)] |
-       (iter_pos >> vp.catchall)[_val = xvalue_for(STRING)]);
+       (iter_pos >> vp.id >> iter_pos)[_val = xvalue_for(TABLEID)] |
+       (iter_pos >> sequence >> iter_pos)[_val = xvalue_for(SEQUENCE)] |
+       (iter_pos >> table >> iter_pos)[_val = xvalue_for(TABLE)] |
+       (iter_pos >> vp.catchall >> iter_pos)[_val = xvalue_for(STRING)]);
 #ifdef __clang__
 #pragma clang diagnostic pop
 #endif
diff --git a/fhiclcpp/parse_shims.h b/fhiclcpp/parse_shims.h
index 4d3cab0..9accb11 100644
--- a/fhiclcpp/parse_shims.h
+++ b/fhiclcpp/parse_shims.h
@@ -65,7 +65,7 @@ namespace shims {
 
       Iterator it = first;
       while (it != last &&
-             (std::isalnum(*it) || *it == '_' || *it == ':' || *it == '@'))
+             (std::isalnum(*it) || *it == '_' || *it == ':' || *it == '.' || *it == '@'))
         ++it;
 
       if (it != last && !maximally_munched_ass(*it))
